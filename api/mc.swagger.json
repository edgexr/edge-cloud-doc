{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "# Introduction\nThe Master Controller (MC) serves as the central gateway for orchestrating edge applications and provides several services to both application developers and operators. For application developers, these APIs allow the management and monitoring of deployments for edge applications. For infrastructure operators, these APIs provide ways to manage and monitor the usage of cloudlet infrastructures. Both developers and operators can take advantage of these APIS to manage users within the Organization.\n\nYou can leverage these functionalities and services on our easy-to-use MobiledgeX Console. If you prefer to manage these services programmatically, the available APIs and their resources are accessible from the left navigational menu.",
    "title": "Master Controller (MC) API Documentation",
    "version": "2.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/auth/alertreceiver/create": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create Alert Receiver\nCreate alert receiver.",
        "tags": [
          "AlertReceiver"
        ],
        "operationId": "CreateAlertReceiver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "AppInst spec for alerts",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "Cloudlet": {
                  "description": "Cloudlet spec for alerts",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Email": {
                  "description": "Custom receiving email",
                  "type": "string"
                },
                "Name": {
                  "description": "Receiver Name",
                  "type": "string"
                },
                "PagerDutyApiVersion": {
                  "description": "PagerDuty API version",
                  "type": "string"
                },
                "PagerDutyIntegrationKey": {
                  "description": "PagerDuty integration key",
                  "type": "string"
                },
                "Region": {
                  "description": "Region for the alert receiver",
                  "type": "string"
                },
                "Severity": {
                  "description": "Alert severity filter",
                  "type": "string"
                },
                "SlackChannel": {
                  "description": "Custom slack channel",
                  "type": "string"
                },
                "SlackWebhook": {
                  "description": "Custom slack webhook",
                  "type": "string"
                },
                "Type": {
                  "description": "Receiver type. Eg. email, slack, pagerduty",
                  "type": "string"
                },
                "User": {
                  "description": "User that created this receiver",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/alertreceiver/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete Alert Receiver\nDelete alert receiver.",
        "tags": [
          "AlertReceiver"
        ],
        "operationId": "DeleteAlertReceiver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "AppInst spec for alerts",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "Cloudlet": {
                  "description": "Cloudlet spec for alerts",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Email": {
                  "description": "Custom receiving email",
                  "type": "string"
                },
                "Name": {
                  "description": "Receiver Name",
                  "type": "string"
                },
                "PagerDutyApiVersion": {
                  "description": "PagerDuty API version",
                  "type": "string"
                },
                "PagerDutyIntegrationKey": {
                  "description": "PagerDuty integration key",
                  "type": "string"
                },
                "Region": {
                  "description": "Region for the alert receiver",
                  "type": "string"
                },
                "Severity": {
                  "description": "Alert severity filter",
                  "type": "string"
                },
                "SlackChannel": {
                  "description": "Custom slack channel",
                  "type": "string"
                },
                "SlackWebhook": {
                  "description": "Custom slack webhook",
                  "type": "string"
                },
                "Type": {
                  "description": "Receiver type. Eg. email, slack, pagerduty",
                  "type": "string"
                },
                "User": {
                  "description": "User that created this receiver",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/alertreceiver/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Show Alert Receiver\nShow alert receiver.",
        "tags": [
          "AlertReceiver"
        ],
        "operationId": "ShowAlertReceiver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "AppInst spec for alerts",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "Cloudlet": {
                  "description": "Cloudlet spec for alerts",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Email": {
                  "description": "Custom receiving email",
                  "type": "string"
                },
                "Name": {
                  "description": "Receiver Name",
                  "type": "string"
                },
                "PagerDutyApiVersion": {
                  "description": "PagerDuty API version",
                  "type": "string"
                },
                "PagerDutyIntegrationKey": {
                  "description": "PagerDuty integration key",
                  "type": "string"
                },
                "Region": {
                  "description": "Region for the alert receiver",
                  "type": "string"
                },
                "Severity": {
                  "description": "Alert severity filter",
                  "type": "string"
                },
                "SlackChannel": {
                  "description": "Custom slack channel",
                  "type": "string"
                },
                "SlackWebhook": {
                  "description": "Custom slack webhook",
                  "type": "string"
                },
                "Type": {
                  "description": "Receiver type. Eg. email, slack, pagerduty",
                  "type": "string"
                },
                "User": {
                  "description": "User that created this receiver",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/billingorg/addchild": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds an Organization to an existing parent BillingOrganization.",
        "tags": [
          "BillingOrganization"
        ],
        "summary": "Add Child to BillingOrganization",
        "operationId": "AddChildOrg",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/billingorg/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes an existing BillingOrganization.",
        "tags": [
          "BillingOrganization"
        ],
        "summary": "Delete BillingOrganization",
        "operationId": "DeleteBillingOrg",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/billingorg/removechild": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Removes an Organization from an existing parent BillingOrganization.",
        "tags": [
          "BillingOrganization"
        ],
        "summary": "Remove Child from BillingOrganization",
        "operationId": "RemoveChildOrg",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/billingorg/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Displays existing BillingOrganizations in which you are authorized to access.",
        "tags": [
          "BillingOrganization"
        ],
        "summary": "Show BillingOrganizations",
        "operationId": "ShowBillingOrg",
        "responses": {
          "200": {
            "$ref": "#/responses/listBillingOrgs"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/billingorg/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "API to update an existing BillingOrganization.",
        "tags": [
          "BillingOrganization"
        ],
        "summary": "Update BillingOrganization",
        "operationId": "UpdateBillingOrg",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AccessCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ExecRequest"
        ],
        "summary": "Access Cloudlet VM",
        "operationId": "AccessCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ExecRequest": {
                  "description": "ExecRequest in region",
                  "type": "object",
                  "properties": {
                    "app_inst_key": {
                      "description": "Target AppInst",
                      "type": "object",
                      "properties": {
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "AppInstKey"
                    },
                    "cmd": {
                      "description": "Command to run (one of)",
                      "type": "object",
                      "properties": {
                        "cloudlet_mgmt_node": {
                          "description": "Cloudlet Mgmt Node",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of Cloudlet Mgmt Node",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "type": {
                              "description": "Type of Cloudlet Mgmt Node",
                              "type": "string",
                              "x-go-name": "Type"
                            }
                          },
                          "x-go-name": "CloudletMgmtNode"
                        },
                        "command": {
                          "description": "Command or Shell",
                          "type": "string",
                          "x-go-name": "Command"
                        }
                      },
                      "x-go-name": "Cmd"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddAppAlertPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppAlertPolicy"
        ],
        "summary": "Add an AlertPolicy to the App",
        "operationId": "AddAppAlertPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppAlertPolicy": {
                  "description": "AppAlertPolicy in region",
                  "type": "object",
                  "properties": {
                    "alert_policy": {
                      "description": "Alert name",
                      "type": "string",
                      "x-go-name": "AlertPolicy"
                    },
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddAppAutoProvPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppAutoProvPolicy"
        ],
        "summary": "Add an AutoProvPolicy to the App",
        "operationId": "AddAppAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppAutoProvPolicy": {
                  "description": "AppAutoProvPolicy in region",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "auto_prov_policy": {
                      "description": "Auto provisioning policy name",
                      "type": "string",
                      "x-go-name": "AutoProvPolicy"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddAutoProvPolicyCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AutoProvPolicyCloudlet"
        ],
        "summary": "Add a Cloudlet to the Auto Provisioning Policy",
        "operationId": "AddAutoProvPolicyCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoProvPolicyCloudlet": {
                  "description": "AutoProvPolicyCloudlet in region",
                  "type": "object",
                  "properties": {
                    "cloudlet_key": {
                      "description": "Cloudlet identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "CloudletKey"
                    },
                    "key": {
                      "description": "Unique policy identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddCloudletAllianceOrg": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletAllianceOrg"
        ],
        "summary": "Add alliance organization to the cloudlet",
        "operationId": "AddCloudletAllianceOrg",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletAllianceOrg": {
                  "description": "CloudletAllianceOrg in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Cloudlet Key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "organization": {
                      "description": "Alliance organization",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddCloudletPoolMember": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletPoolMember"
        ],
        "summary": "Add a Cloudlet to a CloudletPool",
        "operationId": "AddCloudletPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletPoolMember": {
                  "description": "CloudletPoolMember in region",
                  "type": "object",
                  "properties": {
                    "cloudlet": {
                      "description": "Cloudlet name",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Cloudlet"
                    },
                    "key": {
                      "description": "CloudletPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "CloudletPool Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization this pool belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddCloudletResMapping": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletResMap"
        ],
        "summary": "Add Optional Resource tag table",
        "operationId": "AddCloudletResMapping",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletResMap": {
                  "description": "CloudletResMap in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Resource cloudlet key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "mapping": {
                      "description": "Resource mapping info",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Mapping"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddFlavorRes": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Flavor"
        ],
        "summary": "Add Optional Resource",
        "operationId": "AddFlavorRes",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Flavor": {
                  "description": "Flavor in region",
                  "type": "object",
                  "properties": {
                    "disk": {
                      "description": "Amount of disk space in gigabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Disk"
                    },
                    "key": {
                      "description": "Unique key for the new flavor.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "opt_res_map": {
                      "description": "Optional Resources request, key = gpu\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "OptResMap"
                    },
                    "ram": {
                      "description": "RAM in megabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Ram"
                    },
                    "vcpus": {
                      "description": "Number of virtual CPUs",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Vcpus"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddGPUDriverBuild": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds new build to GPU driver.",
        "tags": [
          "GPUDriverBuildMember"
        ],
        "summary": "Add GPU Driver Build",
        "operationId": "AddGPUDriverBuild",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriverBuildMember": {
                  "description": "GPUDriverBuildMember in region",
                  "type": "object",
                  "properties": {
                    "build": {
                      "description": "GPU driver build",
                      "type": "object",
                      "properties": {
                        "driver_path": {
                          "description": "Path where the driver package is located, if it is authenticated path,\nthen credentials must be passed as part of URL (one-time download path)",
                          "type": "string",
                          "x-go-name": "DriverPath"
                        },
                        "driver_path_creds": {
                          "description": "Optional credentials (username:password) to access driver path",
                          "type": "string",
                          "x-go-name": "DriverPathCreds"
                        },
                        "hypervisor_info": {
                          "description": "Info on hypervisor supported by vGPU driver",
                          "type": "string",
                          "x-go-name": "HypervisorInfo"
                        },
                        "kernel_version": {
                          "description": "Kernel Version supported by GPU driver build",
                          "type": "string",
                          "x-go-name": "KernelVersion"
                        },
                        "md5sum": {
                          "description": "Driver package md5sum to ensure package is not corrupted",
                          "type": "string",
                          "x-go-name": "Md5Sum"
                        },
                        "name": {
                          "description": "Unique identifier key",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "operating_system": {
                          "description": "Operator System supported by GPU driver build",
                          "allOf": [
                            {
                              "$ref": "#/definitions/OSType"
                            }
                          ],
                          "x-go-name": "OperatingSystem"
                        },
                        "storage_path": {
                          "description": "GPU driver build storage path",
                          "type": "string",
                          "x-go-name": "StoragePath"
                        }
                      },
                      "x-go-name": "Build"
                    },
                    "ignore_state": {
                      "description": "Ignore state will ignore any action in-progress on the GPU driver",
                      "type": "boolean",
                      "x-go-name": "IgnoreState"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddResTag": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ResTagTable"
        ],
        "summary": "Add new tag(s) to TagTable",
        "operationId": "AddResTag",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTable": {
                  "description": "ResTagTable in region",
                  "type": "object",
                  "properties": {
                    "azone": {
                      "description": "Availability zone(s) of resource if required",
                      "type": "string",
                      "x-go-name": "Azone"
                    },
                    "key": {
                      "description": "Resource tags table key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Resource Table Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Operator organization of the cloudlet site.",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "tags": {
                      "description": "One or more string tags",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/AddVMPoolMember": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds a VM to existing VM Pool.",
        "tags": [
          "VMPoolMember"
        ],
        "summary": "Add VMPoolMember",
        "operationId": "AddVMPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "VMPoolMember": {
                  "description": "VMPoolMember in region",
                  "type": "object",
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "key": {
                      "description": "VMPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the vmpool",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the vmpool",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "vm": {
                      "description": "VM part of VM Pool",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "VM Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "net_info": {
                          "description": "VM IP",
                          "type": "object",
                          "properties": {
                            "external_ip": {
                              "description": "External IP",
                              "type": "string",
                              "x-go-name": "ExternalIp"
                            },
                            "internal_ip": {
                              "description": "Internal IP",
                              "type": "string",
                              "x-go-name": "InternalIp"
                            }
                          },
                          "x-go-name": "NetInfo"
                        }
                      },
                      "x-go-name": "Vm"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateAlertPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AlertPolicy"
        ],
        "summary": "Create an Alert Policy",
        "operationId": "CreateAlertPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AlertPolicy": {
                  "description": "AlertPolicy in region",
                  "type": "object",
                  "properties": {
                    "active_conn_limit": {
                      "description": "Active Connections alert threshold. Valid values 1-4294967295",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ActiveConnLimit"
                    },
                    "annotations": {
                      "description": "Additional Annotations for extra information about the alert",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Annotations"
                    },
                    "cpu_utilization_limit": {
                      "description": "Container or pod CPU utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CpuUtilizationLimit"
                    },
                    "description": {
                      "description": "Description of the alert policy",
                      "type": "string",
                      "x-go-name": "Description"
                    },
                    "disk_utilization_limit": {
                      "description": "Container or pod disk utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DiskUtilizationLimit"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Alert Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the app that this alert can be applied to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "labels": {
                      "description": "Additional Labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Labels"
                    },
                    "mem_utilization_limit": {
                      "description": "Container or pod memory utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MemUtilizationLimit"
                    },
                    "severity": {
                      "description": "Alert severity level - one of \"info\", \"warning\", \"error\"",
                      "type": "string",
                      "x-go-name": "Severity"
                    },
                    "trigger_time": {
                      "description": "Duration for which alert interval is active (max 72 hours)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "TriggerTime"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateApp": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates a definition for an application instance for Cloudlet deployment.",
        "tags": [
          "App"
        ],
        "summary": "Create Application",
        "operationId": "CreateApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "App": {
                  "description": "App in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_ports": {
                      "description": "Comma separated list of protocol:port pairs that the App listens on.\nEx: \"tcp:80,udp:10002\".\nAlso supports additional configurations per port:\n(1) tls (tcp-only) - Enables TLS on specified port. Ex: \"tcp:443:tls\".\n(2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: \"udp:10001:nginx\".\n(3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: \"udp:10001:maxpktsize=8000\".",
                      "type": "string",
                      "x-go-name": "AccessPorts"
                    },
                    "access_type": {
                      "description": "(Deprecated) Access type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/AccessType"
                        }
                      ],
                      "x-go-name": "AccessType"
                    },
                    "alert_policies": {
                      "description": "Alert Policies",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AlertPolicies"
                    },
                    "allow_serverless": {
                      "description": "App is allowed to deploy as serverless containers",
                      "type": "boolean",
                      "x-go-name": "AllowServerless"
                    },
                    "android_package_name": {
                      "description": "Android package name used to match the App name from the Android package",
                      "type": "string",
                      "x-go-name": "AndroidPackageName"
                    },
                    "annotations": {
                      "description": "Annotations is a comma separated map of arbitrary key value pairs,",
                      "type": "string",
                      "x-go-name": "Annotations",
                      "example": "key1=val1,key2=val2,key3=\"val 3\""
                    },
                    "auth_public_key": {
                      "description": "Public key used for authentication",
                      "type": "string",
                      "x-go-name": "AuthPublicKey"
                    },
                    "auto_prov_policies": {
                      "description": "Auto provisioning policy names, may be specified multiple times",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AutoProvPolicies"
                    },
                    "command": {
                      "description": "Command that the container runs to start service",
                      "type": "string",
                      "x-go-name": "Command"
                    },
                    "default_flavor": {
                      "description": "Default flavor for the App, which may be overridden by the AppInst",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "DefaultFlavor"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes, docker, or vm)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_generator": {
                      "description": "Deployment generator target to generate a basic deployment manifest",
                      "type": "string",
                      "x-go-name": "DeploymentGenerator"
                    },
                    "deployment_manifest": {
                      "description": "Deployment manifest is the deployment specific manifest file/config.\nFor docker deployment, this can be a docker-compose or docker run file.\nFor kubernetes deployment, this can be a kubernetes yaml or helm chart file.",
                      "type": "string",
                      "x-go-name": "DeploymentManifest"
                    },
                    "image_path": {
                      "description": "URI of where image resides",
                      "type": "string",
                      "x-go-name": "ImagePath"
                    },
                    "image_type": {
                      "description": "Image type (see ImageType)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/ImageType"
                        }
                      ],
                      "x-go-name": "ImageType"
                    },
                    "internal_ports": {
                      "description": "Should this app have access to outside world?",
                      "type": "boolean",
                      "x-go-name": "InternalPorts"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "md5sum": {
                      "description": "MD5Sum of the VM-based app image",
                      "type": "string",
                      "x-go-name": "Md5Sum"
                    },
                    "official_fqdn": {
                      "description": "Official FQDN is the FQDN that the app uses to connect by default",
                      "type": "string",
                      "x-go-name": "OfficialFqdn"
                    },
                    "qos_session_duration": {
                      "description": "Session duration in seconds. Maximal value of 24 hours is used if not set",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "QosSessionDuration"
                    },
                    "qos_session_profile": {
                      "description": "Qualifier for the requested latency profile",
                      "allOf": [
                        {
                          "$ref": "#/definitions/QosSessionProfile"
                        }
                      ],
                      "x-go-name": "QosSessionProfile"
                    },
                    "revision": {
                      "description": "Revision can be specified or defaults to current timestamp when app is updated",
                      "type": "string",
                      "x-go-name": "Revision"
                    },
                    "scale_with_cluster": {
                      "description": "Option to run App on all nodes of the cluster",
                      "type": "boolean",
                      "x-go-name": "ScaleWithCluster"
                    },
                    "serverless_config": {
                      "description": "Configuration when deployed as serverless containers",
                      "type": "object",
                      "properties": {
                        "min_replicas": {
                          "description": "Minimum number of replicas when serverless",
                          "type": "integer",
                          "format": "uint32",
                          "x-go-name": "MinReplicas"
                        },
                        "ram": {
                          "description": "RAM allocation in megabytes per container when serverless",
                          "type": "integer",
                          "format": "uint64",
                          "x-go-name": "Ram"
                        },
                        "vcpus": {
                          "description": "Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001",
                          "type": "object",
                          "x-go-name": "Vcpus"
                        }
                      },
                      "x-go-name": "ServerlessConfig"
                    },
                    "skip_hc_ports": {
                      "description": "Comma separated list of protocol:port pairs that we should not run health check on.\nShould be configured in case app does not always listen on these ports.\n\"all\" can be specified if no health check to be run for this app.\nNumerical values must be decimal format.\ni.e. tcp:80,udp:10002",
                      "type": "string",
                      "x-go-name": "SkipHcPorts"
                    },
                    "template_delimiter": {
                      "description": "Delimiter to be used for template parsing, defaults to \"[[ ]]\"",
                      "type": "string",
                      "x-go-name": "TemplateDelimiter"
                    },
                    "trusted": {
                      "description": "Indicates that an instance of this app can be started on a trusted cloudlet",
                      "type": "boolean",
                      "x-go-name": "Trusted"
                    },
                    "vm_app_os_type": {
                      "description": "OS Type for VM Apps",
                      "allOf": [
                        {
                          "$ref": "#/definitions/VmAppOsType"
                        }
                      ],
                      "x-go-name": "VmAppOsType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateAppInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key. Many of the fields here are inherited from the App definition.",
        "tags": [
          "AppInst"
        ],
        "summary": "Create Application Instance",
        "operationId": "CreateAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInst": {
                  "description": "AppInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "dedicated_ip": {
                      "description": "Dedicated IP assigns an IP for this AppInst but requires platform support",
                      "type": "boolean",
                      "x-go-name": "DedicatedIp"
                    },
                    "flavor": {
                      "description": "Flavor defining resource requirements",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "health_check": {
                      "description": "Health Check status",
                      "allOf": [
                        {
                          "$ref": "#/definitions/HealthCheck"
                        }
                      ],
                      "x-go-name": "HealthCheck"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "real_cluster_name": {
                      "description": "Real ClusterInst name",
                      "type": "string",
                      "x-go-name": "RealClusterName"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateAutoProvPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AutoProvPolicy"
        ],
        "summary": "Create an Auto Provisioning Policy",
        "operationId": "CreateAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoProvPolicy": {
                  "description": "AutoProvPolicy in region",
                  "type": "object",
                  "properties": {
                    "deploy_client_count": {
                      "description": "Minimum number of clients within the auto deploy interval to trigger deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployClientCount"
                    },
                    "deploy_interval_count": {
                      "description": "Number of intervals to check before triggering deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployIntervalCount"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_instances": {
                      "description": "Maximum number of instances (active or not)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxInstances"
                    },
                    "min_active_instances": {
                      "description": "Minimum number of active instances for High-Availability",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinActiveInstances"
                    },
                    "undeploy_client_count": {
                      "description": "Number of active clients for the undeploy interval below which trigers undeployment, 0 (default) disables auto undeploy",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployClientCount"
                    },
                    "undeploy_interval_count": {
                      "description": "Number of intervals to check before triggering undeployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployIntervalCount"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateAutoScalePolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AutoScalePolicy"
        ],
        "summary": "Create an Auto Scale Policy",
        "operationId": "CreateAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoScalePolicy": {
                  "description": "AutoScalePolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_nodes": {
                      "description": "Maximum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxNodes"
                    },
                    "min_nodes": {
                      "description": "Minimum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinNodes"
                    },
                    "scale_down_cpu_thresh": {
                      "description": "(Deprecated) Scale down cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleDownCpuThresh"
                    },
                    "scale_up_cpu_thresh": {
                      "description": "(Deprecated) Scale up cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleUpCpuThresh"
                    },
                    "stabilization_window_sec": {
                      "description": "Stabilization window is the time for which past triggers are considered; the largest scale factor is always taken.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "StabilizationWindowSec"
                    },
                    "target_active_connections": {
                      "description": "Target per-node number of active connections, 0 means disabled",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "TargetActiveConnections"
                    },
                    "target_cpu": {
                      "description": "Target per-node cpu utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetCpu"
                    },
                    "target_mem": {
                      "description": "Target per-node memory utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetMem"
                    },
                    "trigger_time_sec": {
                      "description": "(Deprecated) Trigger time defines how long the target must be satified in seconds before acting upon it.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TriggerTimeSec"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Sets up Cloudlet services on the Operators compute resources, and integrated as part of MobiledgeX edge resource portfolio. These resources are managed from the Edge Controller.",
        "tags": [
          "Cloudlet"
        ],
        "summary": "Create Cloudlet",
        "operationId": "CreateCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Cloudlet": {
                  "description": "Cloudlet in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_vars": {
                      "description": "Variables required to access cloudlet",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "AccessVars"
                    },
                    "alliance_orgs": {
                      "description": "This cloudlet will be treated as directly connected to these additional operator organizations for the purposes of FindCloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AllianceOrgs"
                    },
                    "container_version": {
                      "description": "Cloudlet container version",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "default_resource_alert_threshold": {
                      "description": "Default resource alert threshold percentage",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "DefaultResourceAlertThreshold"
                    },
                    "deployment": {
                      "description": "Deployment type to bring up CRM services (docker, kubernetes)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_local": {
                      "description": "Deploy cloudlet services locally",
                      "type": "boolean",
                      "x-go-name": "DeploymentLocal"
                    },
                    "enable_default_serverless_cluster": {
                      "description": "Enable experimental default multitenant (serverless) cluster",
                      "type": "boolean",
                      "x-go-name": "EnableDefaultServerlessCluster"
                    },
                    "env_var": {
                      "description": "Single Key-Value pair of env var to be passed to CRM",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "EnvVar"
                    },
                    "flavor": {
                      "description": "Min system resource requirements for platform",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "gpu_config": {
                      "description": "GPU Configuration associated with cloudlet",
                      "type": "object",
                      "properties": {
                        "driver": {
                          "description": "GPU driver key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the driver",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization to which the driver belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "Driver"
                        },
                        "license_config": {
                          "description": "Cloudlet specific license config to setup license (will be stored in secure storage)",
                          "type": "string",
                          "x-go-name": "LicenseConfig"
                        },
                        "properties": {
                          "description": "Properties to identify specifics of GPU",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-go-name": "Properties"
                        }
                      },
                      "x-go-name": "GpuConfig"
                    },
                    "infra_api_access": {
                      "description": "Infra Access Type is the type of access available to Infra API Endpoint",
                      "allOf": [
                        {
                          "$ref": "#/definitions/InfraApiAccess"
                        }
                      ],
                      "x-go-name": "InfraApiAccess"
                    },
                    "infra_config": {
                      "description": "Infra specific config",
                      "type": "object",
                      "properties": {
                        "external_network_name": {
                          "description": "Infra specific external network name",
                          "type": "string",
                          "x-go-name": "ExternalNetworkName"
                        },
                        "flavor_name": {
                          "description": "Infra specific flavor name",
                          "type": "string",
                          "x-go-name": "FlavorName"
                        }
                      },
                      "x-go-name": "InfraConfig"
                    },
                    "ip_support": {
                      "description": "Type of IP support provided by Cloudlet (see IpSupport)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpSupport"
                        }
                      ],
                      "x-go-name": "IpSupport"
                    },
                    "kafka_cluster": {
                      "description": "Operator provided kafka cluster endpoint to push events to",
                      "type": "string",
                      "x-go-name": "KafkaCluster"
                    },
                    "kafka_password": {
                      "description": "Password for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaPassword"
                    },
                    "kafka_user": {
                      "description": "Username for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaUser"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "location": {
                      "description": "Location of the Cloudlet site",
                      "type": "object",
                      "properties": {
                        "altitude": {
                          "description": "On android only lat and long are guaranteed to be supplied\nAltitude in meters",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Altitude"
                        },
                        "latitude": {
                          "description": "Latitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Latitude"
                        },
                        "longitude": {
                          "description": "Longitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Longitude"
                        }
                      },
                      "x-go-name": "Location"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_srv_addr": {
                      "description": "Address for the CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "NotifySrvAddr"
                    },
                    "num_dynamic_ips": {
                      "description": "Number of dynamic IPs available for dynamic IP support",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "NumDynamicIps"
                    },
                    "override_policy_container_version": {
                      "description": "Override container version from policy file",
                      "type": "boolean",
                      "x-go-name": "OverridePolicyContainerVersion"
                    },
                    "physical_name": {
                      "description": "Physical infrastructure cloudlet name",
                      "type": "string",
                      "x-go-name": "PhysicalName"
                    },
                    "platform_high_availability": {
                      "description": "Enable platform H/A",
                      "type": "boolean",
                      "x-go-name": "PlatformHighAvailability"
                    },
                    "platform_type": {
                      "description": "Platform type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PlatformType"
                        }
                      ],
                      "x-go-name": "PlatformType"
                    },
                    "secondary_notify_srv_addr": {
                      "description": "Address for the secondary CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "SecondaryNotifySrvAddr"
                    },
                    "single_kubernetes_cluster_owner": {
                      "description": "For single kubernetes cluster cloudlet platforms, cluster is owned by this organization instead of multi-tenant",
                      "type": "string",
                      "x-go-name": "SingleKubernetesClusterOwner"
                    },
                    "static_ips": {
                      "description": "List of static IPs for static IP support",
                      "type": "string",
                      "x-go-name": "StaticIps"
                    },
                    "time_limits": {
                      "description": "time limits which override global settings if non-zero",
                      "type": "object",
                      "properties": {
                        "create_app_inst_timeout": {
                          "description": "Override default max time to create an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateAppInstTimeout"
                        },
                        "create_cluster_inst_timeout": {
                          "description": "Override default max time to create a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateClusterInstTimeout"
                        },
                        "delete_app_inst_timeout": {
                          "description": "Override default max time to delete an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteAppInstTimeout"
                        },
                        "delete_cluster_inst_timeout": {
                          "description": "Override default max time to delete a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteClusterInstTimeout"
                        },
                        "update_app_inst_timeout": {
                          "description": "Override default max time to update an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateAppInstTimeout"
                        },
                        "update_cluster_inst_timeout": {
                          "description": "Override default max time to update a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateClusterInstTimeout"
                        }
                      },
                      "x-go-name": "TimeLimits"
                    },
                    "trust_policy": {
                      "description": "Optional Trust Policy",
                      "type": "string",
                      "x-go-name": "TrustPolicy"
                    },
                    "vm_image_version": {
                      "description": "MobiledgeX baseimage version where CRM services reside",
                      "type": "string",
                      "x-go-name": "VmImageVersion"
                    },
                    "vm_pool": {
                      "description": "VM Pool",
                      "type": "string",
                      "x-go-name": "VmPool"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateCloudletPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletPool"
        ],
        "summary": "Create a CloudletPool",
        "operationId": "CreateCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletPool": {
                  "description": "CloudletPool in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "CloudletPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "CloudletPool Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization this pool belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateClusterInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates an instance of a Cluster on a Cloudlet, defined by a Cluster Key and a Cloudlet Key. ClusterInst is a collection of compute resources on a Cloudlet on which AppInsts are deployed.",
        "tags": [
          "ClusterInst"
        ],
        "summary": "Create Cluster Instance",
        "operationId": "CreateClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ClusterInst": {
                  "description": "ClusterInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "auto_scale_policy": {
                      "description": "Auto scale policy name",
                      "type": "string",
                      "x-go-name": "AutoScalePolicy"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes or docker)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "flavor": {
                      "description": "Flavor of the k8s node",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "image_name": {
                      "description": "Optional resource specific image to launch",
                      "type": "string",
                      "x-go-name": "ImageName"
                    },
                    "ip_access": {
                      "description": "IP access type (RootLB Type)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpAccess"
                        }
                      ],
                      "x-go-name": "IpAccess"
                    },
                    "key": {
                      "description": "Unique key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "multi_tenant": {
                      "description": "Multi-tenant kubernetes cluster",
                      "type": "boolean",
                      "x-go-name": "MultiTenant"
                    },
                    "networks": {
                      "description": "networks to connect to",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Networks"
                    },
                    "num_masters": {
                      "description": "Number of k8s masters (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumMasters"
                    },
                    "num_nodes": {
                      "description": "Number of k8s nodes (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumNodes"
                    },
                    "reservable": {
                      "description": "If ClusterInst is reservable",
                      "type": "boolean",
                      "x-go-name": "Reservable"
                    },
                    "shared_volume_size": {
                      "description": "Size of an optional shared volume to be mounted on the master",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "SharedVolumeSize"
                    },
                    "skip_crm_cleanup_on_failure": {
                      "description": "Prevents cleanup of resources on failure within CRM, used for diagnostic purposes",
                      "type": "boolean",
                      "x-go-name": "SkipCrmCleanupOnFailure"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateFlavor": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Flavor"
        ],
        "summary": "Create a Flavor",
        "operationId": "CreateFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Flavor": {
                  "description": "Flavor in region",
                  "type": "object",
                  "properties": {
                    "disk": {
                      "description": "Amount of disk space in gigabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Disk"
                    },
                    "key": {
                      "description": "Unique key for the new flavor.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "opt_res_map": {
                      "description": "Optional Resources request, key = gpu\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "OptResMap"
                    },
                    "ram": {
                      "description": "RAM in megabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Ram"
                    },
                    "vcpus": {
                      "description": "Number of virtual CPUs",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Vcpus"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateFlowRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "FlowRateLimitSettings"
        ],
        "summary": "Create Flow RateLimit settings for an API endpoint and target",
        "operationId": "CreateFlowRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "FlowRateLimitSettings": {
                  "description": "FlowRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "flow_settings_name": {
                          "description": "Unique name for FlowRateLimitSettings (there can be multiple FlowSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "FlowSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "FlowSettings",
                      "type": "object",
                      "properties": {
                        "burst_size": {
                          "description": "Burst size for flow rate limiting (required for TokenBucketAlgorithm)",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "BurstSize"
                        },
                        "flow_algorithm": {
                          "description": "Flow Rate Limit algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/FlowRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "FlowAlgorithm"
                        },
                        "reqs_per_second": {
                          "description": "Requests per second for flow rate limiting",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "ReqsPerSecond"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateGPUDriver": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates GPU driver with all the config required to install it.",
        "tags": [
          "GPUDriver"
        ],
        "summary": "Create GPU Driver",
        "operationId": "CreateGPUDriver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriver": {
                  "description": "GPUDriver in region",
                  "type": "object",
                  "properties": {
                    "ignore_state": {
                      "description": "Ignore state will ignore any action in-progress on the GPU driver",
                      "type": "boolean",
                      "x-go-name": "IgnoreState"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "license_config": {
                      "description": "License config to setup license (will be stored in secure storage)",
                      "type": "string",
                      "x-go-name": "LicenseConfig"
                    },
                    "properties": {
                      "description": "Additional properties associated with GPU driver build",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties",
                      "example": "license server information, driver release date, etc"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateMaxReqsRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "MaxReqsRateLimitSettings"
        ],
        "summary": "Create MaxReqs RateLimit settings for an API endpoint and target",
        "operationId": "CreateMaxReqsRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "MaxReqsRateLimitSettings": {
                  "description": "MaxReqsRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "max_reqs_settings_name": {
                          "description": "Unique name for MaxReqsRateLimitSettings (there can be multiple MaxReqsSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "MaxReqsSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "MaxReqsSettings",
                      "type": "object",
                      "properties": {
                        "interval": {
                          "description": "Time interval",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "Interval"
                        },
                        "max_reqs_algorithm": {
                          "description": "MaxReqs Rate Limit Algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/MaxReqsRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "MaxReqsAlgorithm"
                        },
                        "max_requests": {
                          "description": "Maximum number of requests for the given Interval",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "MaxRequests"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateNetwork": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Network"
        ],
        "summary": "Create a Network",
        "operationId": "CreateNetwork",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Network": {
                  "description": "Network in region",
                  "type": "object",
                  "properties": {
                    "connection_type": {
                      "description": "Network connection type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/NetworkConnectionType"
                        }
                      ],
                      "x-go-name": "ConnectionType"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet that this network can be provisioned on",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Network Name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateOperatorCode": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create a code for an Operator.",
        "tags": [
          "OperatorCode"
        ],
        "summary": "Create Operator Code",
        "operationId": "CreateOperatorCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "OperatorCode": {
                  "description": "OperatorCode in region",
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "MCC plus MNC code, or custom carrier code designation.",
                      "type": "string",
                      "x-go-name": "Code"
                    },
                    "organization": {
                      "description": "Operator Organization name",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateResTagTable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ResTagTable"
        ],
        "summary": "Create TagTable",
        "operationId": "CreateResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTable": {
                  "description": "ResTagTable in region",
                  "type": "object",
                  "properties": {
                    "azone": {
                      "description": "Availability zone(s) of resource if required",
                      "type": "string",
                      "x-go-name": "Azone"
                    },
                    "key": {
                      "description": "Resource tags table key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Resource Table Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Operator organization of the cloudlet site.",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "tags": {
                      "description": "One or more string tags",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateTrustPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "TrustPolicy"
        ],
        "summary": "Create a Trust Policy",
        "operationId": "CreateTrustPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicy": {
                  "description": "TrustPolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateTrustPolicyException": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "TrustPolicyException"
        ],
        "summary": "Create a Trust Policy Exception, by App Developer Organization",
        "operationId": "CreateTrustPolicyException",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicyException": {
                  "description": "TrustPolicyException in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique Key composed of App and CloudletPool key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cloudlet_pool_key": {
                          "description": "CloudletPool Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "CloudletPool Name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Name of the organization this pool belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletPoolKey"
                        },
                        "name": {
                          "description": "TrustPolicyExceptionKey name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/CreateVMPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates VM pool which will have VMs defined.",
        "tags": [
          "VMPool"
        ],
        "summary": "Create VMPool",
        "operationId": "CreateVMPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "VMPool": {
                  "description": "VMPool in region",
                  "type": "object",
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "delete_prepare": {
                      "description": "Preparing to be deleted",
                      "type": "boolean",
                      "x-go-name": "DeletePrepare"
                    },
                    "key": {
                      "description": "VMPool Key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the vmpool",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the vmpool",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteAlertPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AlertPolicy"
        ],
        "summary": "Delete an Alert Policy",
        "operationId": "DeleteAlertPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AlertPolicy": {
                  "description": "AlertPolicy in region",
                  "type": "object",
                  "properties": {
                    "active_conn_limit": {
                      "description": "Active Connections alert threshold. Valid values 1-4294967295",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ActiveConnLimit"
                    },
                    "annotations": {
                      "description": "Additional Annotations for extra information about the alert",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Annotations"
                    },
                    "cpu_utilization_limit": {
                      "description": "Container or pod CPU utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CpuUtilizationLimit"
                    },
                    "description": {
                      "description": "Description of the alert policy",
                      "type": "string",
                      "x-go-name": "Description"
                    },
                    "disk_utilization_limit": {
                      "description": "Container or pod disk utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DiskUtilizationLimit"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Alert Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the app that this alert can be applied to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "labels": {
                      "description": "Additional Labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Labels"
                    },
                    "mem_utilization_limit": {
                      "description": "Container or pod memory utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MemUtilizationLimit"
                    },
                    "severity": {
                      "description": "Alert severity level - one of \"info\", \"warning\", \"error\"",
                      "type": "string",
                      "x-go-name": "Severity"
                    },
                    "trigger_time": {
                      "description": "Duration for which alert interval is active (max 72 hours)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "TriggerTime"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteApp": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes a definition of an Application instance. Make sure no other application instances exist with that definition. If they do exist, you must delete those Application instances first.",
        "tags": [
          "App"
        ],
        "summary": "Delete Application",
        "operationId": "DeleteApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "App": {
                  "description": "App in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_ports": {
                      "description": "Comma separated list of protocol:port pairs that the App listens on.\nEx: \"tcp:80,udp:10002\".\nAlso supports additional configurations per port:\n(1) tls (tcp-only) - Enables TLS on specified port. Ex: \"tcp:443:tls\".\n(2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: \"udp:10001:nginx\".\n(3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: \"udp:10001:maxpktsize=8000\".",
                      "type": "string",
                      "x-go-name": "AccessPorts"
                    },
                    "access_type": {
                      "description": "(Deprecated) Access type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/AccessType"
                        }
                      ],
                      "x-go-name": "AccessType"
                    },
                    "alert_policies": {
                      "description": "Alert Policies",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AlertPolicies"
                    },
                    "allow_serverless": {
                      "description": "App is allowed to deploy as serverless containers",
                      "type": "boolean",
                      "x-go-name": "AllowServerless"
                    },
                    "android_package_name": {
                      "description": "Android package name used to match the App name from the Android package",
                      "type": "string",
                      "x-go-name": "AndroidPackageName"
                    },
                    "annotations": {
                      "description": "Annotations is a comma separated map of arbitrary key value pairs,",
                      "type": "string",
                      "x-go-name": "Annotations",
                      "example": "key1=val1,key2=val2,key3=\"val 3\""
                    },
                    "auth_public_key": {
                      "description": "Public key used for authentication",
                      "type": "string",
                      "x-go-name": "AuthPublicKey"
                    },
                    "auto_prov_policies": {
                      "description": "Auto provisioning policy names, may be specified multiple times",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AutoProvPolicies"
                    },
                    "command": {
                      "description": "Command that the container runs to start service",
                      "type": "string",
                      "x-go-name": "Command"
                    },
                    "default_flavor": {
                      "description": "Default flavor for the App, which may be overridden by the AppInst",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "DefaultFlavor"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes, docker, or vm)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_generator": {
                      "description": "Deployment generator target to generate a basic deployment manifest",
                      "type": "string",
                      "x-go-name": "DeploymentGenerator"
                    },
                    "deployment_manifest": {
                      "description": "Deployment manifest is the deployment specific manifest file/config.\nFor docker deployment, this can be a docker-compose or docker run file.\nFor kubernetes deployment, this can be a kubernetes yaml or helm chart file.",
                      "type": "string",
                      "x-go-name": "DeploymentManifest"
                    },
                    "image_path": {
                      "description": "URI of where image resides",
                      "type": "string",
                      "x-go-name": "ImagePath"
                    },
                    "image_type": {
                      "description": "Image type (see ImageType)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/ImageType"
                        }
                      ],
                      "x-go-name": "ImageType"
                    },
                    "internal_ports": {
                      "description": "Should this app have access to outside world?",
                      "type": "boolean",
                      "x-go-name": "InternalPorts"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "md5sum": {
                      "description": "MD5Sum of the VM-based app image",
                      "type": "string",
                      "x-go-name": "Md5Sum"
                    },
                    "official_fqdn": {
                      "description": "Official FQDN is the FQDN that the app uses to connect by default",
                      "type": "string",
                      "x-go-name": "OfficialFqdn"
                    },
                    "qos_session_duration": {
                      "description": "Session duration in seconds. Maximal value of 24 hours is used if not set",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "QosSessionDuration"
                    },
                    "qos_session_profile": {
                      "description": "Qualifier for the requested latency profile",
                      "allOf": [
                        {
                          "$ref": "#/definitions/QosSessionProfile"
                        }
                      ],
                      "x-go-name": "QosSessionProfile"
                    },
                    "revision": {
                      "description": "Revision can be specified or defaults to current timestamp when app is updated",
                      "type": "string",
                      "x-go-name": "Revision"
                    },
                    "scale_with_cluster": {
                      "description": "Option to run App on all nodes of the cluster",
                      "type": "boolean",
                      "x-go-name": "ScaleWithCluster"
                    },
                    "serverless_config": {
                      "description": "Configuration when deployed as serverless containers",
                      "type": "object",
                      "properties": {
                        "min_replicas": {
                          "description": "Minimum number of replicas when serverless",
                          "type": "integer",
                          "format": "uint32",
                          "x-go-name": "MinReplicas"
                        },
                        "ram": {
                          "description": "RAM allocation in megabytes per container when serverless",
                          "type": "integer",
                          "format": "uint64",
                          "x-go-name": "Ram"
                        },
                        "vcpus": {
                          "description": "Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001",
                          "type": "object",
                          "x-go-name": "Vcpus"
                        }
                      },
                      "x-go-name": "ServerlessConfig"
                    },
                    "skip_hc_ports": {
                      "description": "Comma separated list of protocol:port pairs that we should not run health check on.\nShould be configured in case app does not always listen on these ports.\n\"all\" can be specified if no health check to be run for this app.\nNumerical values must be decimal format.\ni.e. tcp:80,udp:10002",
                      "type": "string",
                      "x-go-name": "SkipHcPorts"
                    },
                    "template_delimiter": {
                      "description": "Delimiter to be used for template parsing, defaults to \"[[ ]]\"",
                      "type": "string",
                      "x-go-name": "TemplateDelimiter"
                    },
                    "trusted": {
                      "description": "Indicates that an instance of this app can be started on a trusted cloudlet",
                      "type": "boolean",
                      "x-go-name": "Trusted"
                    },
                    "vm_app_os_type": {
                      "description": "OS Type for VM Apps",
                      "allOf": [
                        {
                          "$ref": "#/definitions/VmAppOsType"
                        }
                      ],
                      "x-go-name": "VmAppOsType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteAppInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes an instance of the App from the Cloudlet.",
        "tags": [
          "AppInst"
        ],
        "summary": "Delete Application Instance",
        "operationId": "DeleteAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInst": {
                  "description": "AppInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "dedicated_ip": {
                      "description": "Dedicated IP assigns an IP for this AppInst but requires platform support",
                      "type": "boolean",
                      "x-go-name": "DedicatedIp"
                    },
                    "flavor": {
                      "description": "Flavor defining resource requirements",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "force_update": {
                      "description": "Force Appinst refresh even if revision number matches App revision number.",
                      "type": "boolean",
                      "x-go-name": "ForceUpdate"
                    },
                    "health_check": {
                      "description": "Health Check status",
                      "allOf": [
                        {
                          "$ref": "#/definitions/HealthCheck"
                        }
                      ],
                      "x-go-name": "HealthCheck"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "real_cluster_name": {
                      "description": "Real ClusterInst name",
                      "type": "string",
                      "x-go-name": "RealClusterName"
                    },
                    "update_multiple": {
                      "description": "Allow multiple instances to be updated at once",
                      "type": "boolean",
                      "x-go-name": "UpdateMultiple"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteAutoProvPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AutoProvPolicy"
        ],
        "summary": "Delete an Auto Provisioning Policy",
        "operationId": "DeleteAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoProvPolicy": {
                  "description": "AutoProvPolicy in region",
                  "type": "object",
                  "properties": {
                    "deploy_client_count": {
                      "description": "Minimum number of clients within the auto deploy interval to trigger deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployClientCount"
                    },
                    "deploy_interval_count": {
                      "description": "Number of intervals to check before triggering deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployIntervalCount"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_instances": {
                      "description": "Maximum number of instances (active or not)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxInstances"
                    },
                    "min_active_instances": {
                      "description": "Minimum number of active instances for High-Availability",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinActiveInstances"
                    },
                    "undeploy_client_count": {
                      "description": "Number of active clients for the undeploy interval below which trigers undeployment, 0 (default) disables auto undeploy",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployClientCount"
                    },
                    "undeploy_interval_count": {
                      "description": "Number of intervals to check before triggering undeployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployIntervalCount"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteAutoScalePolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AutoScalePolicy"
        ],
        "summary": "Delete an Auto Scale Policy",
        "operationId": "DeleteAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoScalePolicy": {
                  "description": "AutoScalePolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_nodes": {
                      "description": "Maximum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxNodes"
                    },
                    "min_nodes": {
                      "description": "Minimum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinNodes"
                    },
                    "scale_down_cpu_thresh": {
                      "description": "(Deprecated) Scale down cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleDownCpuThresh"
                    },
                    "scale_up_cpu_thresh": {
                      "description": "(Deprecated) Scale up cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleUpCpuThresh"
                    },
                    "stabilization_window_sec": {
                      "description": "Stabilization window is the time for which past triggers are considered; the largest scale factor is always taken.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "StabilizationWindowSec"
                    },
                    "target_active_connections": {
                      "description": "Target per-node number of active connections, 0 means disabled",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "TargetActiveConnections"
                    },
                    "target_cpu": {
                      "description": "Target per-node cpu utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetCpu"
                    },
                    "target_mem": {
                      "description": "Target per-node memory utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetMem"
                    },
                    "trigger_time_sec": {
                      "description": "(Deprecated) Trigger time defines how long the target must be satified in seconds before acting upon it.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TriggerTimeSec"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Removes the Cloudlet services where they are no longer managed from the Edge Controller.",
        "tags": [
          "Cloudlet"
        ],
        "summary": "Delete Cloudlet",
        "operationId": "DeleteCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Cloudlet": {
                  "description": "Cloudlet in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_vars": {
                      "description": "Variables required to access cloudlet",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "AccessVars"
                    },
                    "alliance_orgs": {
                      "description": "This cloudlet will be treated as directly connected to these additional operator organizations for the purposes of FindCloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AllianceOrgs"
                    },
                    "container_version": {
                      "description": "Cloudlet container version",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "default_resource_alert_threshold": {
                      "description": "Default resource alert threshold percentage",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "DefaultResourceAlertThreshold"
                    },
                    "deployment": {
                      "description": "Deployment type to bring up CRM services (docker, kubernetes)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_local": {
                      "description": "Deploy cloudlet services locally",
                      "type": "boolean",
                      "x-go-name": "DeploymentLocal"
                    },
                    "enable_default_serverless_cluster": {
                      "description": "Enable experimental default multitenant (serverless) cluster",
                      "type": "boolean",
                      "x-go-name": "EnableDefaultServerlessCluster"
                    },
                    "env_var": {
                      "description": "Single Key-Value pair of env var to be passed to CRM",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "EnvVar"
                    },
                    "flavor": {
                      "description": "Min system resource requirements for platform",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "gpu_config": {
                      "description": "GPU Configuration associated with cloudlet",
                      "type": "object",
                      "properties": {
                        "driver": {
                          "description": "GPU driver key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the driver",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization to which the driver belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "Driver"
                        },
                        "license_config": {
                          "description": "Cloudlet specific license config to setup license (will be stored in secure storage)",
                          "type": "string",
                          "x-go-name": "LicenseConfig"
                        },
                        "properties": {
                          "description": "Properties to identify specifics of GPU",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-go-name": "Properties"
                        }
                      },
                      "x-go-name": "GpuConfig"
                    },
                    "infra_api_access": {
                      "description": "Infra Access Type is the type of access available to Infra API Endpoint",
                      "allOf": [
                        {
                          "$ref": "#/definitions/InfraApiAccess"
                        }
                      ],
                      "x-go-name": "InfraApiAccess"
                    },
                    "infra_config": {
                      "description": "Infra specific config",
                      "type": "object",
                      "properties": {
                        "external_network_name": {
                          "description": "Infra specific external network name",
                          "type": "string",
                          "x-go-name": "ExternalNetworkName"
                        },
                        "flavor_name": {
                          "description": "Infra specific flavor name",
                          "type": "string",
                          "x-go-name": "FlavorName"
                        }
                      },
                      "x-go-name": "InfraConfig"
                    },
                    "ip_support": {
                      "description": "Type of IP support provided by Cloudlet (see IpSupport)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpSupport"
                        }
                      ],
                      "x-go-name": "IpSupport"
                    },
                    "kafka_cluster": {
                      "description": "Operator provided kafka cluster endpoint to push events to",
                      "type": "string",
                      "x-go-name": "KafkaCluster"
                    },
                    "kafka_password": {
                      "description": "Password for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaPassword"
                    },
                    "kafka_user": {
                      "description": "Username for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaUser"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "location": {
                      "description": "Location of the Cloudlet site",
                      "type": "object",
                      "properties": {
                        "altitude": {
                          "description": "On android only lat and long are guaranteed to be supplied\nAltitude in meters",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Altitude"
                        },
                        "latitude": {
                          "description": "Latitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Latitude"
                        },
                        "longitude": {
                          "description": "Longitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Longitude"
                        }
                      },
                      "x-go-name": "Location"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_srv_addr": {
                      "description": "Address for the CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "NotifySrvAddr"
                    },
                    "num_dynamic_ips": {
                      "description": "Number of dynamic IPs available for dynamic IP support",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "NumDynamicIps"
                    },
                    "override_policy_container_version": {
                      "description": "Override container version from policy file",
                      "type": "boolean",
                      "x-go-name": "OverridePolicyContainerVersion"
                    },
                    "physical_name": {
                      "description": "Physical infrastructure cloudlet name",
                      "type": "string",
                      "x-go-name": "PhysicalName"
                    },
                    "platform_high_availability": {
                      "description": "Enable platform H/A",
                      "type": "boolean",
                      "x-go-name": "PlatformHighAvailability"
                    },
                    "platform_type": {
                      "description": "Platform type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PlatformType"
                        }
                      ],
                      "x-go-name": "PlatformType"
                    },
                    "secondary_notify_srv_addr": {
                      "description": "Address for the secondary CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "SecondaryNotifySrvAddr"
                    },
                    "single_kubernetes_cluster_owner": {
                      "description": "For single kubernetes cluster cloudlet platforms, cluster is owned by this organization instead of multi-tenant",
                      "type": "string",
                      "x-go-name": "SingleKubernetesClusterOwner"
                    },
                    "static_ips": {
                      "description": "List of static IPs for static IP support",
                      "type": "string",
                      "x-go-name": "StaticIps"
                    },
                    "time_limits": {
                      "description": "time limits which override global settings if non-zero",
                      "type": "object",
                      "properties": {
                        "create_app_inst_timeout": {
                          "description": "Override default max time to create an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateAppInstTimeout"
                        },
                        "create_cluster_inst_timeout": {
                          "description": "Override default max time to create a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateClusterInstTimeout"
                        },
                        "delete_app_inst_timeout": {
                          "description": "Override default max time to delete an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteAppInstTimeout"
                        },
                        "delete_cluster_inst_timeout": {
                          "description": "Override default max time to delete a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteClusterInstTimeout"
                        },
                        "update_app_inst_timeout": {
                          "description": "Override default max time to update an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateAppInstTimeout"
                        },
                        "update_cluster_inst_timeout": {
                          "description": "Override default max time to update a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateClusterInstTimeout"
                        }
                      },
                      "x-go-name": "TimeLimits"
                    },
                    "trust_policy": {
                      "description": "Optional Trust Policy",
                      "type": "string",
                      "x-go-name": "TrustPolicy"
                    },
                    "vm_image_version": {
                      "description": "MobiledgeX baseimage version where CRM services reside",
                      "type": "string",
                      "x-go-name": "VmImageVersion"
                    },
                    "vm_pool": {
                      "description": "VM Pool",
                      "type": "string",
                      "x-go-name": "VmPool"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteCloudletPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletPool"
        ],
        "summary": "Delete a CloudletPool",
        "operationId": "DeleteCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletPool": {
                  "description": "CloudletPool in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "CloudletPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "CloudletPool Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization this pool belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteClusterInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes an instance of a Cluster deployed on a Cloudlet.",
        "tags": [
          "ClusterInst"
        ],
        "summary": "Delete Cluster Instance",
        "operationId": "DeleteClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ClusterInst": {
                  "description": "ClusterInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "auto_scale_policy": {
                      "description": "Auto scale policy name",
                      "type": "string",
                      "x-go-name": "AutoScalePolicy"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes or docker)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "flavor": {
                      "description": "Flavor of the k8s node",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "image_name": {
                      "description": "Optional resource specific image to launch",
                      "type": "string",
                      "x-go-name": "ImageName"
                    },
                    "ip_access": {
                      "description": "IP access type (RootLB Type)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpAccess"
                        }
                      ],
                      "x-go-name": "IpAccess"
                    },
                    "key": {
                      "description": "Unique key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "multi_tenant": {
                      "description": "Multi-tenant kubernetes cluster",
                      "type": "boolean",
                      "x-go-name": "MultiTenant"
                    },
                    "networks": {
                      "description": "networks to connect to",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Networks"
                    },
                    "num_masters": {
                      "description": "Number of k8s masters (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumMasters"
                    },
                    "num_nodes": {
                      "description": "Number of k8s nodes (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumNodes"
                    },
                    "reservable": {
                      "description": "If ClusterInst is reservable",
                      "type": "boolean",
                      "x-go-name": "Reservable"
                    },
                    "shared_volume_size": {
                      "description": "Size of an optional shared volume to be mounted on the master",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "SharedVolumeSize"
                    },
                    "skip_crm_cleanup_on_failure": {
                      "description": "Prevents cleanup of resources on failure within CRM, used for diagnostic purposes",
                      "type": "boolean",
                      "x-go-name": "SkipCrmCleanupOnFailure"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteFlavor": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Flavor"
        ],
        "summary": "Delete a Flavor",
        "operationId": "DeleteFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Flavor": {
                  "description": "Flavor in region",
                  "type": "object",
                  "properties": {
                    "disk": {
                      "description": "Amount of disk space in gigabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Disk"
                    },
                    "key": {
                      "description": "Unique key for the new flavor.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "opt_res_map": {
                      "description": "Optional Resources request, key = gpu\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "OptResMap"
                    },
                    "ram": {
                      "description": "RAM in megabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Ram"
                    },
                    "vcpus": {
                      "description": "Number of virtual CPUs",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Vcpus"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteFlowRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "FlowRateLimitSettings"
        ],
        "summary": "Delete Flow RateLimit settings for an API endpoint and target",
        "operationId": "DeleteFlowRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "FlowRateLimitSettings": {
                  "description": "FlowRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "flow_settings_name": {
                          "description": "Unique name for FlowRateLimitSettings (there can be multiple FlowSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "FlowSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "FlowSettings",
                      "type": "object",
                      "properties": {
                        "burst_size": {
                          "description": "Burst size for flow rate limiting (required for TokenBucketAlgorithm)",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "BurstSize"
                        },
                        "flow_algorithm": {
                          "description": "Flow Rate Limit algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/FlowRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "FlowAlgorithm"
                        },
                        "reqs_per_second": {
                          "description": "Requests per second for flow rate limiting",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "ReqsPerSecond"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteGPUDriver": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes GPU driver given that it is not used by any cloudlet.",
        "tags": [
          "GPUDriver"
        ],
        "summary": "Delete GPU Driver",
        "operationId": "DeleteGPUDriver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriver": {
                  "description": "GPUDriver in region",
                  "type": "object",
                  "properties": {
                    "ignore_state": {
                      "description": "Ignore state will ignore any action in-progress on the GPU driver",
                      "type": "boolean",
                      "x-go-name": "IgnoreState"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "license_config": {
                      "description": "License config to setup license (will be stored in secure storage)",
                      "type": "string",
                      "x-go-name": "LicenseConfig"
                    },
                    "properties": {
                      "description": "Additional properties associated with GPU driver build",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties",
                      "example": "license server information, driver release date, etc"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteIdleReservableClusterInsts": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes reservable cluster instances that are not in use.",
        "tags": [
          "IdleReservableClusterInsts"
        ],
        "summary": "Cleanup Reservable Cluster Instances",
        "operationId": "DeleteIdleReservableClusterInsts",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "IdleReservableClusterInsts": {
                  "description": "IdleReservableClusterInsts in region",
                  "type": "object",
                  "properties": {
                    "idle_time": {
                      "description": "Idle time (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "IdleTime"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteMaxReqsRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "MaxReqsRateLimitSettings"
        ],
        "summary": "Delete MaxReqs RateLimit settings for an API endpoint and target",
        "operationId": "DeleteMaxReqsRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "MaxReqsRateLimitSettings": {
                  "description": "MaxReqsRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "max_reqs_settings_name": {
                          "description": "Unique name for MaxReqsRateLimitSettings (there can be multiple MaxReqsSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "MaxReqsSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "MaxReqsSettings",
                      "type": "object",
                      "properties": {
                        "interval": {
                          "description": "Time interval",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "Interval"
                        },
                        "max_reqs_algorithm": {
                          "description": "MaxReqs Rate Limit Algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/MaxReqsRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "MaxReqsAlgorithm"
                        },
                        "max_requests": {
                          "description": "Maximum number of requests for the given Interval",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "MaxRequests"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteNetwork": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Network"
        ],
        "summary": "Delete a Network",
        "operationId": "DeleteNetwork",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Network": {
                  "description": "Network in region",
                  "type": "object",
                  "properties": {
                    "connection_type": {
                      "description": "Network connection type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/NetworkConnectionType"
                        }
                      ],
                      "x-go-name": "ConnectionType"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet that this network can be provisioned on",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Network Name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteOperatorCode": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Delete a code for an Operator.",
        "tags": [
          "OperatorCode"
        ],
        "summary": "Delete Operator Code",
        "operationId": "DeleteOperatorCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "OperatorCode": {
                  "description": "OperatorCode in region",
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "MCC plus MNC code, or custom carrier code designation.",
                      "type": "string",
                      "x-go-name": "Code"
                    },
                    "organization": {
                      "description": "Operator Organization name",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteResTagTable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ResTagTable"
        ],
        "summary": "Delete TagTable",
        "operationId": "DeleteResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTable": {
                  "description": "ResTagTable in region",
                  "type": "object",
                  "properties": {
                    "azone": {
                      "description": "Availability zone(s) of resource if required",
                      "type": "string",
                      "x-go-name": "Azone"
                    },
                    "key": {
                      "description": "Resource tags table key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Resource Table Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Operator organization of the cloudlet site.",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "tags": {
                      "description": "One or more string tags",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteTrustPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "TrustPolicy"
        ],
        "summary": "Delete a Trust policy",
        "operationId": "DeleteTrustPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicy": {
                  "description": "TrustPolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteTrustPolicyException": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "TrustPolicyException"
        ],
        "summary": "Delete a Trust Policy Exception, by App Developer Organization",
        "operationId": "DeleteTrustPolicyException",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicyException": {
                  "description": "TrustPolicyException in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique Key composed of App and CloudletPool key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cloudlet_pool_key": {
                          "description": "CloudletPool Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "CloudletPool Name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Name of the organization this pool belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletPoolKey"
                        },
                        "name": {
                          "description": "TrustPolicyExceptionKey name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DeleteVMPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes VM pool given that none of VMs part of this pool is used.",
        "tags": [
          "VMPool"
        ],
        "summary": "Delete VMPool",
        "operationId": "DeleteVMPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "VMPool": {
                  "description": "VMPool in region",
                  "type": "object",
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "delete_prepare": {
                      "description": "Preparing to be deleted",
                      "type": "boolean",
                      "x-go-name": "DeletePrepare"
                    },
                    "key": {
                      "description": "VMPool Key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the vmpool",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the vmpool",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/DisableDebugLevels": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "DebugRequest"
        ],
        "summary": "Disable debug log levels",
        "operationId": "DisableDebugLevels",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "DebugRequest": {
                  "description": "DebugRequest in region",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Additional arguments for cmd",
                      "type": "string",
                      "x-go-name": "Args"
                    },
                    "levels": {
                      "description": "Comma separated list of debug level names: etcd,api,notify,dmereq,locapi,infra,metrics,upgrade,info,sampled,fedapi",
                      "type": "string",
                      "x-go-name": "Levels"
                    },
                    "node": {
                      "description": "Service node identifier (see NodeShow)",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet on which node is running, or is associated with",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Name or hostname of node",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "region": {
                          "description": "Region the node is in",
                          "type": "string",
                          "x-go-name": "Region"
                        },
                        "type": {
                          "description": "Node type",
                          "type": "string",
                          "x-go-name": "Type"
                        }
                      },
                      "x-go-name": "Node"
                    },
                    "pretty": {
                      "description": "if possible, make output pretty",
                      "type": "boolean",
                      "x-go-name": "Pretty"
                    },
                    "timeout": {
                      "description": "custom timeout (duration, defaults to 10s)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "Timeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/EnableDebugLevels": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "DebugRequest"
        ],
        "summary": "Enable debug log levels",
        "operationId": "EnableDebugLevels",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "DebugRequest": {
                  "description": "DebugRequest in region",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Additional arguments for cmd",
                      "type": "string",
                      "x-go-name": "Args"
                    },
                    "levels": {
                      "description": "Comma separated list of debug level names: etcd,api,notify,dmereq,locapi,infra,metrics,upgrade,info,sampled,fedapi",
                      "type": "string",
                      "x-go-name": "Levels"
                    },
                    "node": {
                      "description": "Service node identifier (see NodeShow)",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet on which node is running, or is associated with",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Name or hostname of node",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "region": {
                          "description": "Region the node is in",
                          "type": "string",
                          "x-go-name": "Region"
                        },
                        "type": {
                          "description": "Node type",
                          "type": "string",
                          "x-go-name": "Type"
                        }
                      },
                      "x-go-name": "Node"
                    },
                    "pretty": {
                      "description": "if possible, make output pretty",
                      "type": "boolean",
                      "x-go-name": "Pretty"
                    },
                    "timeout": {
                      "description": "custom timeout (duration, defaults to 10s)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "Timeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/EvictCloudletInfo": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletInfo"
        ],
        "summary": "Evict (delete) a CloudletInfo for regression testing",
        "operationId": "EvictCloudletInfo",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletInfo": {
                  "description": "CloudletInfo in region",
                  "type": "object",
                  "properties": {
                    "active_crm_instance": {
                      "description": "Active HA instance",
                      "type": "string",
                      "x-go-name": "ActiveCrmInstance"
                    },
                    "compatibility_version": {
                      "description": "Version for compatibility tracking",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CompatibilityVersion"
                    },
                    "container_version": {
                      "description": "Cloudlet container version",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "controller": {
                      "description": "Connected controller unique id",
                      "type": "string",
                      "x-go-name": "Controller"
                    },
                    "controller_cache_received": {
                      "description": "Indicates all controller data has been sent to CRM",
                      "type": "boolean",
                      "x-go-name": "ControllerCacheReceived"
                    },
                    "errors": {
                      "description": "Any errors encountered while making changes to the Cloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Errors"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    },
                    "os_max_ram": {
                      "description": "Maximum Ram in MB on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxRam"
                    },
                    "os_max_vcores": {
                      "description": "Maximum number of VCPU cores on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxVcores"
                    },
                    "os_max_vol_gb": {
                      "description": "Maximum amount of disk in GB on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxVolGb"
                    },
                    "properties": {
                      "description": "Cloudlet properties",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties"
                    },
                    "release_version": {
                      "description": "Cloudlet release version",
                      "type": "string",
                      "x-go-name": "ReleaseVersion"
                    },
                    "standby_crm": {
                      "description": "Denotes if info was reported by inactive",
                      "type": "boolean",
                      "x-go-name": "StandbyCrm"
                    },
                    "state": {
                      "description": "State of cloudlet",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CloudletState"
                        }
                      ],
                      "x-go-name": "State"
                    },
                    "trust_policy_state": {
                      "description": "Trust Policy State",
                      "allOf": [
                        {
                          "$ref": "#/definitions/TrackedState"
                        }
                      ],
                      "x-go-name": "TrustPolicyState"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/EvictDevice": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Device"
        ],
        "summary": "Evict a device",
        "operationId": "EvictDevice",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Device": {
                  "description": "Device in region",
                  "type": "object",
                  "properties": {
                    "first_seen": {
                      "description": "Timestamp when the device was registered",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "FirstSeen"
                    },
                    "key": {
                      "description": "Key",
                      "type": "object",
                      "properties": {
                        "unique_id": {
                          "description": "Unique identification of the client device or user. May be overridden by the server.",
                          "type": "string",
                          "x-go-name": "UniqueId"
                        },
                        "unique_id_type": {
                          "description": "Type of unique ID provided by the client",
                          "type": "string",
                          "x-go-name": "UniqueIdType"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "last_seen": {
                      "description": "Timestamp when the device was last seen(Future use)",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "LastSeen"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/FindFlavorMatch": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "FlavorMatch"
        ],
        "summary": "Discover if flavor produces a matching platform flavor",
        "operationId": "FindFlavorMatch",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "FlavorMatch": {
                  "description": "FlavorMatch in region",
                  "type": "object",
                  "properties": {
                    "availability_zone": {
                      "description": "availability zone for optional resources if any",
                      "type": "string",
                      "x-go-name": "AvailabilityZone"
                    },
                    "flavor_name": {
                      "description": "Flavor name to lookup",
                      "type": "string",
                      "x-go-name": "FlavorName"
                    },
                    "key": {
                      "description": "Cloudlet ctx",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GenerateAccessKey": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletKey"
        ],
        "summary": "Generate new crm access key",
        "operationId": "GenerateAccessKey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetCloudletGPUDriverLicenseConfig": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns the license config associated with the cloudlet",
        "tags": [
          "CloudletKey"
        ],
        "summary": "Get Cloudlet Specific GPU Driver License Config",
        "operationId": "GetCloudletGPUDriverLicenseConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetCloudletManifest": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Shows deployment manifest required to setup cloudlet",
        "tags": [
          "CloudletKey"
        ],
        "summary": "Get Cloudlet Manifest",
        "operationId": "GetCloudletManifest",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetCloudletProps": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Shows all the infra properties used to setup cloudlet",
        "tags": [
          "CloudletProps"
        ],
        "summary": "Get Cloudlet Properties",
        "operationId": "GetCloudletProps",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletProps": {
                  "description": "CloudletProps in region",
                  "type": "object",
                  "properties": {
                    "organization": {
                      "description": "Organization",
                      "type": "string",
                      "x-go-name": "Organization"
                    },
                    "platform_type": {
                      "description": "Platform type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PlatformType"
                        }
                      ],
                      "x-go-name": "PlatformType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetCloudletResourceQuotaProps": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Shows all the resource quota properties of the cloudlet",
        "tags": [
          "CloudletResourceQuotaProps"
        ],
        "summary": "Get Cloudlet Resource Quota Properties",
        "operationId": "GetCloudletResourceQuotaProps",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletResourceQuotaProps": {
                  "description": "CloudletResourceQuotaProps in region",
                  "type": "object",
                  "properties": {
                    "organization": {
                      "description": "Organization",
                      "type": "string",
                      "x-go-name": "Organization"
                    },
                    "platform_type": {
                      "description": "Platform type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PlatformType"
                        }
                      ],
                      "x-go-name": "PlatformType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetCloudletResourceUsage": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Shows cloudlet resources used and their limits",
        "tags": [
          "CloudletResourceUsage"
        ],
        "summary": "Get Cloudlet resource information",
        "operationId": "GetCloudletResourceUsage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletResourceUsage": {
                  "description": "CloudletResourceUsage in region",
                  "type": "object",
                  "properties": {
                    "infra_usage": {
                      "description": "Show Infra based usage",
                      "type": "boolean",
                      "x-go-name": "InfraUsage"
                    },
                    "key": {
                      "description": "Cloudlet Key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetGPUDriverBuildURL": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns a time-limited signed URL to download GPU driver.",
        "tags": [
          "GPUDriverBuildMember"
        ],
        "summary": "Get GPU Driver Build URL",
        "operationId": "GetGPUDriverBuildURL",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriverBuildMember": {
                  "description": "GPUDriverBuildMember in region",
                  "type": "object",
                  "properties": {
                    "build": {
                      "description": "GPU driver build",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Unique identifier key",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "storage_path": {
                          "description": "GPU driver build storage path",
                          "type": "string",
                          "x-go-name": "StoragePath"
                        }
                      },
                      "x-go-name": "Build"
                    },
                    "ignore_state": {
                      "description": "Ignore state will ignore any action in-progress on the GPU driver",
                      "type": "boolean",
                      "x-go-name": "IgnoreState"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetGPUDriverLicenseConfig": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Returns the license config specific to GPU driver",
        "tags": [
          "GPUDriverKey"
        ],
        "summary": "Get GPU Driver License Config",
        "operationId": "GetGPUDriverLicenseConfig",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriverKey": {
                  "description": "GPUDriverKey in region",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the driver",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization to which the driver belongs to",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetOrganizationsOnCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletKey"
        ],
        "summary": "Get organizations of ClusterInsts and AppInsts on cloudlet",
        "operationId": "GetOrganizationsOnCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/GetResTagTable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ResTagTableKey"
        ],
        "summary": "Fetch a copy of the TagTable",
        "operationId": "GetResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTableKey": {
                  "description": "ResTagTableKey in region",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Resource Table Name",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Operator organization of the cloudlet site.",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/InjectCloudletInfo": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletInfo"
        ],
        "summary": "Inject (create) a CloudletInfo for regression testing",
        "operationId": "InjectCloudletInfo",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletInfo": {
                  "description": "CloudletInfo in region",
                  "type": "object",
                  "properties": {
                    "active_crm_instance": {
                      "description": "Active HA instance",
                      "type": "string",
                      "x-go-name": "ActiveCrmInstance"
                    },
                    "compatibility_version": {
                      "description": "Version for compatibility tracking",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CompatibilityVersion"
                    },
                    "container_version": {
                      "description": "Cloudlet container version",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "controller": {
                      "description": "Connected controller unique id",
                      "type": "string",
                      "x-go-name": "Controller"
                    },
                    "controller_cache_received": {
                      "description": "Indicates all controller data has been sent to CRM",
                      "type": "boolean",
                      "x-go-name": "ControllerCacheReceived"
                    },
                    "errors": {
                      "description": "Any errors encountered while making changes to the Cloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Errors"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    },
                    "os_max_ram": {
                      "description": "Maximum Ram in MB on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxRam"
                    },
                    "os_max_vcores": {
                      "description": "Maximum number of VCPU cores on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxVcores"
                    },
                    "os_max_vol_gb": {
                      "description": "Maximum amount of disk in GB on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxVolGb"
                    },
                    "properties": {
                      "description": "Cloudlet properties",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties"
                    },
                    "release_version": {
                      "description": "Cloudlet release version",
                      "type": "string",
                      "x-go-name": "ReleaseVersion"
                    },
                    "standby_crm": {
                      "description": "Denotes if info was reported by inactive",
                      "type": "boolean",
                      "x-go-name": "StandbyCrm"
                    },
                    "state": {
                      "description": "State of cloudlet",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CloudletState"
                        }
                      ],
                      "x-go-name": "State"
                    },
                    "trust_policy_state": {
                      "description": "Trust Policy State",
                      "allOf": [
                        {
                          "$ref": "#/definitions/TrackedState"
                        }
                      ],
                      "x-go-name": "TrustPolicyState"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/InjectDevice": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Device"
        ],
        "summary": "Inject a device",
        "operationId": "InjectDevice",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Device": {
                  "description": "Device in region",
                  "type": "object",
                  "properties": {
                    "first_seen": {
                      "description": "Timestamp when the device was registered",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "FirstSeen"
                    },
                    "key": {
                      "description": "Key",
                      "type": "object",
                      "properties": {
                        "unique_id": {
                          "description": "Unique identification of the client device or user. May be overridden by the server.",
                          "type": "string",
                          "x-go-name": "UniqueId"
                        },
                        "unique_id_type": {
                          "description": "Type of unique ID provided by the client",
                          "type": "string",
                          "x-go-name": "UniqueIdType"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "last_seen": {
                      "description": "Timestamp when the device was last seen(Future use)",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "LastSeen"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RefreshAppInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Restarts an App instance with new App settings or image.",
        "tags": [
          "AppInst"
        ],
        "summary": "Refresh Application Instance",
        "operationId": "RefreshAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInst": {
                  "description": "AppInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "dedicated_ip": {
                      "description": "Dedicated IP assigns an IP for this AppInst but requires platform support",
                      "type": "boolean",
                      "x-go-name": "DedicatedIp"
                    },
                    "force_update": {
                      "description": "Force Appinst refresh even if revision number matches App revision number.",
                      "type": "boolean",
                      "x-go-name": "ForceUpdate"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "real_cluster_name": {
                      "description": "Real ClusterInst name",
                      "type": "string",
                      "x-go-name": "RealClusterName"
                    },
                    "update_multiple": {
                      "description": "Allow multiple instances to be updated at once",
                      "type": "boolean",
                      "x-go-name": "UpdateMultiple"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveAppAlertPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppAlertPolicy"
        ],
        "summary": "Remove an AlertPolicy from the App",
        "operationId": "RemoveAppAlertPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppAlertPolicy": {
                  "description": "AppAlertPolicy in region",
                  "type": "object",
                  "properties": {
                    "alert_policy": {
                      "description": "Alert name",
                      "type": "string",
                      "x-go-name": "AlertPolicy"
                    },
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveAppAutoProvPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppAutoProvPolicy"
        ],
        "summary": "Remove an AutoProvPolicy from the App",
        "operationId": "RemoveAppAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppAutoProvPolicy": {
                  "description": "AppAutoProvPolicy in region",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "auto_prov_policy": {
                      "description": "Auto provisioning policy name",
                      "type": "string",
                      "x-go-name": "AutoProvPolicy"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveAutoProvPolicyCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AutoProvPolicyCloudlet"
        ],
        "summary": "Remove a Cloudlet from the Auto Provisioning Policy",
        "operationId": "RemoveAutoProvPolicyCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoProvPolicyCloudlet": {
                  "description": "AutoProvPolicyCloudlet in region",
                  "type": "object",
                  "properties": {
                    "cloudlet_key": {
                      "description": "Cloudlet identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "CloudletKey"
                    },
                    "key": {
                      "description": "Unique policy identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveCloudletAllianceOrg": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletAllianceOrg"
        ],
        "summary": "Remove alliance organization from the cloudlet",
        "operationId": "RemoveCloudletAllianceOrg",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletAllianceOrg": {
                  "description": "CloudletAllianceOrg in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Cloudlet Key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "organization": {
                      "description": "Alliance organization",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveCloudletPoolMember": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletPoolMember"
        ],
        "summary": "Remove a Cloudlet from a CloudletPool",
        "operationId": "RemoveCloudletPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletPoolMember": {
                  "description": "CloudletPoolMember in region",
                  "type": "object",
                  "properties": {
                    "cloudlet": {
                      "description": "Cloudlet name",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Cloudlet"
                    },
                    "key": {
                      "description": "CloudletPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "CloudletPool Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization this pool belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveCloudletResMapping": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletResMap"
        ],
        "summary": "Remove Optional Resource tag table",
        "operationId": "RemoveCloudletResMapping",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletResMap": {
                  "description": "CloudletResMap in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Resource cloudlet key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "mapping": {
                      "description": "Resource mapping info",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Mapping"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveFlavorRes": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Flavor"
        ],
        "summary": "Remove Optional Resource",
        "operationId": "RemoveFlavorRes",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Flavor": {
                  "description": "Flavor in region",
                  "type": "object",
                  "properties": {
                    "disk": {
                      "description": "Amount of disk space in gigabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Disk"
                    },
                    "key": {
                      "description": "Unique key for the new flavor.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "opt_res_map": {
                      "description": "Optional Resources request, key = gpu\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "OptResMap"
                    },
                    "ram": {
                      "description": "RAM in megabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Ram"
                    },
                    "vcpus": {
                      "description": "Number of virtual CPUs",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Vcpus"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveGPUDriverBuild": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Removes build from GPU driver.",
        "tags": [
          "GPUDriverBuildMember"
        ],
        "summary": "Remove GPU Driver Build",
        "operationId": "RemoveGPUDriverBuild",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriverBuildMember": {
                  "description": "GPUDriverBuildMember in region",
                  "type": "object",
                  "properties": {
                    "build": {
                      "description": "GPU driver build",
                      "type": "object",
                      "properties": {
                        "driver_path_creds": {
                          "description": "Optional credentials (username:password) to access driver path",
                          "type": "string",
                          "x-go-name": "DriverPathCreds"
                        },
                        "md5sum": {
                          "description": "Driver package md5sum to ensure package is not corrupted",
                          "type": "string",
                          "x-go-name": "Md5Sum"
                        },
                        "name": {
                          "description": "Unique identifier key",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "storage_path": {
                          "description": "GPU driver build storage path",
                          "type": "string",
                          "x-go-name": "StoragePath"
                        }
                      },
                      "x-go-name": "Build"
                    },
                    "ignore_state": {
                      "description": "Ignore state will ignore any action in-progress on the GPU driver",
                      "type": "boolean",
                      "x-go-name": "IgnoreState"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveResTag": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ResTagTable"
        ],
        "summary": "Remove existing tag(s) from TagTable",
        "operationId": "RemoveResTag",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTable": {
                  "description": "ResTagTable in region",
                  "type": "object",
                  "properties": {
                    "azone": {
                      "description": "Availability zone(s) of resource if required",
                      "type": "string",
                      "x-go-name": "Azone"
                    },
                    "key": {
                      "description": "Resource tags table key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Resource Table Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Operator organization of the cloudlet site.",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "tags": {
                      "description": "One or more string tags",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RemoveVMPoolMember": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Removes a VM from existing VM Pool.",
        "tags": [
          "VMPoolMember"
        ],
        "summary": "Remove VMPoolMember",
        "operationId": "RemoveVMPoolMember",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "VMPoolMember": {
                  "description": "VMPoolMember in region",
                  "type": "object",
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "key": {
                      "description": "VMPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the vmpool",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the vmpool",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "vm": {
                      "description": "VM part of VM Pool",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "VM Name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Vm"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RequestAppInstLatency": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppInstLatency"
        ],
        "summary": "Request Latency measurements for clients connected to AppInst",
        "operationId": "RequestAppInstLatency",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInstLatency": {
                  "description": "AppInstLatency in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ResetSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Settings"
        ],
        "summary": "Reset all settings to their defaults",
        "operationId": "ResetSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Settings": {
                  "description": "Settings in region",
                  "type": "object",
                  "properties": {
                    "alert_policy_min_trigger_time": {
                      "description": "Minimmum trigger time for alert policies",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "AlertPolicyMinTriggerTime"
                    },
                    "appinst_client_cleanup_interval": {
                      "description": "AppInstClient cleanup thread run interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "AppinstClientCleanupInterval"
                    },
                    "auto_deploy_interval_sec": {
                      "description": "Auto Provisioning Stats push and analysis interval (seconds)",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "AutoDeployIntervalSec"
                    },
                    "auto_deploy_max_intervals": {
                      "description": "Auto Provisioning Policy max allowed intervals",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "AutoDeployMaxIntervals"
                    },
                    "auto_deploy_offset_sec": {
                      "description": "Auto Provisioning analysis offset from interval (seconds)",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "AutoDeployOffsetSec"
                    },
                    "chef_client_interval": {
                      "description": "Default chef client interval (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ChefClientInterval"
                    },
                    "cleanup_reservable_auto_cluster_idletime": {
                      "description": "Idle reservable ClusterInst clean up time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CleanupReservableAutoClusterIdletime"
                    },
                    "cloudlet_maintenance_timeout": {
                      "description": "Default Cloudlet Maintenance timeout (used twice for AutoProv and Cloudlet)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CloudletMaintenanceTimeout"
                    },
                    "cluster_auto_scale_averaging_duration_sec": {
                      "description": "Cluster auto scale averaging duration for stats to avoid spikes (seconds), avoid setting below 30s or it will not capture any measurements to average",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "ClusterAutoScaleAveragingDurationSec"
                    },
                    "cluster_auto_scale_retry_delay": {
                      "description": "Cluster auto scale retry delay if scaling failed",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ClusterAutoScaleRetryDelay"
                    },
                    "create_app_inst_timeout": {
                      "description": "Create AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateAppInstTimeout"
                    },
                    "create_cloudlet_timeout": {
                      "description": "Create Cloudlet timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateCloudletTimeout"
                    },
                    "create_cluster_inst_timeout": {
                      "description": "Create ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateClusterInstTimeout"
                    },
                    "delete_app_inst_timeout": {
                      "description": "Delete AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DeleteAppInstTimeout"
                    },
                    "delete_cluster_inst_timeout": {
                      "description": "Delete ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DeleteClusterInstTimeout"
                    },
                    "disable_rate_limit": {
                      "description": "Disable rate limiting for APIs (default is false)",
                      "type": "boolean",
                      "x-go-name": "DisableRateLimit"
                    },
                    "dme_api_metrics_collection_interval": {
                      "description": "Metrics collection interval for DME API counts (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DmeApiMetricsCollectionInterval"
                    },
                    "edge_events_metrics_collection_interval": {
                      "description": "Collection interval for edgeevents metrics (latency, device, and custom)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "EdgeEventsMetricsCollectionInterval"
                    },
                    "influx_db_cloudlet_usage_metrics_retention": {
                      "description": "Default influxDB cloudlet usage metrics retention policy (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbCloudletUsageMetricsRetention"
                    },
                    "influx_db_downsampled_metrics_retention": {
                      "description": "Default retention policy for downsampled influx db (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbDownsampledMetricsRetention"
                    },
                    "influx_db_edge_events_metrics_retention": {
                      "description": "Default retention policy for edgeevents metrics influx db (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbEdgeEventsMetricsRetention"
                    },
                    "influx_db_metrics_retention": {
                      "description": "Default influxDB metrics retention policy (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbMetricsRetention"
                    },
                    "location_tile_side_length_km": {
                      "description": "Length of location tiles side for latency metrics (km)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "LocationTileSideLengthKm"
                    },
                    "master_node_flavor": {
                      "description": "Default flavor for k8s master VM and \u003e 0  workers",
                      "type": "string",
                      "x-go-name": "MasterNodeFlavor"
                    },
                    "max_tracked_dme_clients": {
                      "description": "Max DME clients to be tracked at the same time.",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "MaxTrackedDmeClients"
                    },
                    "platform_ha_instance_active_expire_time": {
                      "description": "Platform HA instance active time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "PlatformHaInstanceActiveExpireTime"
                    },
                    "platform_ha_instance_poll_interval": {
                      "description": "Platform HA instance poll interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "PlatformHaInstancePollInterval"
                    },
                    "rate_limit_max_tracked_ips": {
                      "description": "Maximum number of IPs to track for rate limiting",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "RateLimitMaxTrackedIps"
                    },
                    "resource_snapshot_thread_interval": {
                      "description": "ResourceSnapshot Refresh thread run interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ResourceSnapshotThreadInterval"
                    },
                    "shepherd_alert_evaluation_interval": {
                      "description": "Shepherd alert evaluation interval for k8s and docker appInstances (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdAlertEvaluationInterval"
                    },
                    "shepherd_health_check_interval": {
                      "description": "Health Checking probing frequency (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdHealthCheckInterval"
                    },
                    "shepherd_health_check_retries": {
                      "description": "Number of times Shepherd Health Check fails before we mark appInst down",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "ShepherdHealthCheckRetries"
                    },
                    "shepherd_metrics_collection_interval": {
                      "description": "Shepherd metrics collection interval for k8s and docker appInstances (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdMetricsCollectionInterval"
                    },
                    "shepherd_metrics_scrape_interval": {
                      "description": "Shepherd metrics scraping interval (how often metrics are pulled by prometheus, vs pushed to Controller by Shepherd collection)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdMetricsScrapeInterval"
                    },
                    "update_app_inst_timeout": {
                      "description": "Update AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateAppInstTimeout"
                    },
                    "update_cloudlet_timeout": {
                      "description": "Update Cloudlet timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateCloudletTimeout"
                    },
                    "update_cluster_inst_timeout": {
                      "description": "Update ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateClusterInstTimeout"
                    },
                    "update_trust_policy_timeout": {
                      "description": "Update Trust Policy timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateTrustPolicyTimeout"
                    },
                    "update_vm_pool_timeout": {
                      "description": "Update VM pool timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateVmPoolTimeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RevokeAccessKey": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletKey"
        ],
        "summary": "Revoke crm access key",
        "operationId": "RevokeAccessKey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RunCommand": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ExecRequest"
        ],
        "summary": "Run a Command or Shell on a container",
        "operationId": "RunCommand",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ExecRequest": {
                  "description": "ExecRequest in region",
                  "type": "object",
                  "properties": {
                    "app_inst_key": {
                      "description": "Target AppInst",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "AppInstKey"
                    },
                    "cmd": {
                      "description": "Command to run (one of)",
                      "type": "object",
                      "properties": {
                        "command": {
                          "description": "Command or Shell",
                          "type": "string",
                          "x-go-name": "Command"
                        }
                      },
                      "x-go-name": "Cmd"
                    },
                    "container_id": {
                      "description": "ContainerId is the name or ID of the target container, if applicable",
                      "type": "string",
                      "x-go-name": "ContainerId"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RunConsole": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ExecRequest"
        ],
        "summary": "Run console on a VM",
        "operationId": "RunConsole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ExecRequest": {
                  "description": "ExecRequest in region",
                  "type": "object",
                  "properties": {
                    "app_inst_key": {
                      "description": "Target AppInst",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "AppInstKey"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/RunDebug": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "DebugRequest"
        ],
        "summary": "Run debug command",
        "operationId": "RunDebug",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "DebugRequest": {
                  "description": "DebugRequest in region",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Additional arguments for cmd",
                      "type": "string",
                      "x-go-name": "Args"
                    },
                    "cmd": {
                      "description": "Debug command (use \"help\" to see available commands)",
                      "type": "string",
                      "x-go-name": "Cmd"
                    },
                    "node": {
                      "description": "Service node identifier (see NodeShow)",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet on which node is running, or is associated with",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Name or hostname of node",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "region": {
                          "description": "Region the node is in",
                          "type": "string",
                          "x-go-name": "Region"
                        },
                        "type": {
                          "description": "Node type",
                          "type": "string",
                          "x-go-name": "Type"
                        }
                      },
                      "x-go-name": "Node"
                    },
                    "pretty": {
                      "description": "if possible, make output pretty",
                      "type": "boolean",
                      "x-go-name": "Pretty"
                    },
                    "timeout": {
                      "description": "custom timeout (duration, defaults to 10s)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "Timeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAlert": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Show alerts",
        "operationId": "ShowAlert",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Alert": {
                  "description": "Alert in region",
                  "type": "object",
                  "properties": {
                    "active_at": {
                      "description": "When alert became active",
                      "type": "object",
                      "x-go-name": "ActiveAt"
                    },
                    "annotations": {
                      "description": "Annotations are extra information about the alert",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Annotations"
                    },
                    "controller": {
                      "description": "Connected controller unique id",
                      "type": "string",
                      "x-go-name": "Controller"
                    },
                    "labels": {
                      "description": "Labels uniquely define the alert",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Labels"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    },
                    "state": {
                      "description": "State of the alert",
                      "type": "string",
                      "x-go-name": "State"
                    },
                    "value": {
                      "description": "Any value associated with alert",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "Value"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAlertPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Any fields specified will be used to filter results.",
        "tags": [
          "AlertPolicy"
        ],
        "summary": "Show Alert Policies",
        "operationId": "ShowAlertPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AlertPolicy": {
                  "description": "AlertPolicy in region",
                  "type": "object",
                  "properties": {
                    "active_conn_limit": {
                      "description": "Active Connections alert threshold. Valid values 1-4294967295",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ActiveConnLimit"
                    },
                    "annotations": {
                      "description": "Additional Annotations for extra information about the alert",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Annotations"
                    },
                    "cpu_utilization_limit": {
                      "description": "Container or pod CPU utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CpuUtilizationLimit"
                    },
                    "description": {
                      "description": "Description of the alert policy",
                      "type": "string",
                      "x-go-name": "Description"
                    },
                    "disk_utilization_limit": {
                      "description": "Container or pod disk utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DiskUtilizationLimit"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Alert Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the app that this alert can be applied to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "labels": {
                      "description": "Additional Labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Labels"
                    },
                    "mem_utilization_limit": {
                      "description": "Container or pod memory utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MemUtilizationLimit"
                    },
                    "severity": {
                      "description": "Alert severity level - one of \"info\", \"warning\", \"error\"",
                      "type": "string",
                      "x-go-name": "Severity"
                    },
                    "trigger_time": {
                      "description": "Duration for which alert interval is active (max 72 hours)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "TriggerTime"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowApp": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Lists all Application definitions managed from the Edge Controller. Any fields specified will be used to filter results.",
        "tags": [
          "App"
        ],
        "summary": "Show Applications",
        "operationId": "ShowApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "App": {
                  "description": "App in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_ports": {
                      "description": "Comma separated list of protocol:port pairs that the App listens on.\nEx: \"tcp:80,udp:10002\".\nAlso supports additional configurations per port:\n(1) tls (tcp-only) - Enables TLS on specified port. Ex: \"tcp:443:tls\".\n(2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: \"udp:10001:nginx\".\n(3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: \"udp:10001:maxpktsize=8000\".",
                      "type": "string",
                      "x-go-name": "AccessPorts"
                    },
                    "access_type": {
                      "description": "(Deprecated) Access type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/AccessType"
                        }
                      ],
                      "x-go-name": "AccessType"
                    },
                    "alert_policies": {
                      "description": "Alert Policies",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AlertPolicies"
                    },
                    "allow_serverless": {
                      "description": "App is allowed to deploy as serverless containers",
                      "type": "boolean",
                      "x-go-name": "AllowServerless"
                    },
                    "android_package_name": {
                      "description": "Android package name used to match the App name from the Android package",
                      "type": "string",
                      "x-go-name": "AndroidPackageName"
                    },
                    "annotations": {
                      "description": "Annotations is a comma separated map of arbitrary key value pairs,",
                      "type": "string",
                      "x-go-name": "Annotations",
                      "example": "key1=val1,key2=val2,key3=\"val 3\""
                    },
                    "auth_public_key": {
                      "description": "Public key used for authentication",
                      "type": "string",
                      "x-go-name": "AuthPublicKey"
                    },
                    "auto_prov_policies": {
                      "description": "Auto provisioning policy names, may be specified multiple times",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AutoProvPolicies"
                    },
                    "command": {
                      "description": "Command that the container runs to start service",
                      "type": "string",
                      "x-go-name": "Command"
                    },
                    "default_flavor": {
                      "description": "Default flavor for the App, which may be overridden by the AppInst",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "DefaultFlavor"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes, docker, or vm)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_generator": {
                      "description": "Deployment generator target to generate a basic deployment manifest",
                      "type": "string",
                      "x-go-name": "DeploymentGenerator"
                    },
                    "deployment_manifest": {
                      "description": "Deployment manifest is the deployment specific manifest file/config.\nFor docker deployment, this can be a docker-compose or docker run file.\nFor kubernetes deployment, this can be a kubernetes yaml or helm chart file.",
                      "type": "string",
                      "x-go-name": "DeploymentManifest"
                    },
                    "image_path": {
                      "description": "URI of where image resides",
                      "type": "string",
                      "x-go-name": "ImagePath"
                    },
                    "image_type": {
                      "description": "Image type (see ImageType)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/ImageType"
                        }
                      ],
                      "x-go-name": "ImageType"
                    },
                    "internal_ports": {
                      "description": "Should this app have access to outside world?",
                      "type": "boolean",
                      "x-go-name": "InternalPorts"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "md5sum": {
                      "description": "MD5Sum of the VM-based app image",
                      "type": "string",
                      "x-go-name": "Md5Sum"
                    },
                    "official_fqdn": {
                      "description": "Official FQDN is the FQDN that the app uses to connect by default",
                      "type": "string",
                      "x-go-name": "OfficialFqdn"
                    },
                    "qos_session_duration": {
                      "description": "Session duration in seconds. Maximal value of 24 hours is used if not set",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "QosSessionDuration"
                    },
                    "qos_session_profile": {
                      "description": "Qualifier for the requested latency profile",
                      "allOf": [
                        {
                          "$ref": "#/definitions/QosSessionProfile"
                        }
                      ],
                      "x-go-name": "QosSessionProfile"
                    },
                    "revision": {
                      "description": "Revision can be specified or defaults to current timestamp when app is updated",
                      "type": "string",
                      "x-go-name": "Revision"
                    },
                    "scale_with_cluster": {
                      "description": "Option to run App on all nodes of the cluster",
                      "type": "boolean",
                      "x-go-name": "ScaleWithCluster"
                    },
                    "serverless_config": {
                      "description": "Configuration when deployed as serverless containers",
                      "type": "object",
                      "properties": {
                        "min_replicas": {
                          "description": "Minimum number of replicas when serverless",
                          "type": "integer",
                          "format": "uint32",
                          "x-go-name": "MinReplicas"
                        },
                        "ram": {
                          "description": "RAM allocation in megabytes per container when serverless",
                          "type": "integer",
                          "format": "uint64",
                          "x-go-name": "Ram"
                        },
                        "vcpus": {
                          "description": "Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001",
                          "type": "object",
                          "x-go-name": "Vcpus"
                        }
                      },
                      "x-go-name": "ServerlessConfig"
                    },
                    "skip_hc_ports": {
                      "description": "Comma separated list of protocol:port pairs that we should not run health check on.\nShould be configured in case app does not always listen on these ports.\n\"all\" can be specified if no health check to be run for this app.\nNumerical values must be decimal format.\ni.e. tcp:80,udp:10002",
                      "type": "string",
                      "x-go-name": "SkipHcPorts"
                    },
                    "template_delimiter": {
                      "description": "Delimiter to be used for template parsing, defaults to \"[[ ]]\"",
                      "type": "string",
                      "x-go-name": "TemplateDelimiter"
                    },
                    "trusted": {
                      "description": "Indicates that an instance of this app can be started on a trusted cloudlet",
                      "type": "boolean",
                      "x-go-name": "Trusted"
                    },
                    "vm_app_os_type": {
                      "description": "OS Type for VM Apps",
                      "allOf": [
                        {
                          "$ref": "#/definitions/VmAppOsType"
                        }
                      ],
                      "x-go-name": "VmAppOsType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAppInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Lists all the Application instances managed by the Edge Controller. Any fields specified will be used to filter results.",
        "tags": [
          "AppInst"
        ],
        "summary": "Show Application Instances",
        "operationId": "ShowAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInst": {
                  "description": "AppInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "dedicated_ip": {
                      "description": "Dedicated IP assigns an IP for this AppInst but requires platform support",
                      "type": "boolean",
                      "x-go-name": "DedicatedIp"
                    },
                    "flavor": {
                      "description": "Flavor defining resource requirements",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "force_update": {
                      "description": "Force Appinst refresh even if revision number matches App revision number.",
                      "type": "boolean",
                      "x-go-name": "ForceUpdate"
                    },
                    "health_check": {
                      "description": "Health Check status",
                      "allOf": [
                        {
                          "$ref": "#/definitions/HealthCheck"
                        }
                      ],
                      "x-go-name": "HealthCheck"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "power_state": {
                      "description": "Power State of the AppInst",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PowerState"
                        }
                      ],
                      "x-go-name": "PowerState"
                    },
                    "real_cluster_name": {
                      "description": "Real ClusterInst name",
                      "type": "string",
                      "x-go-name": "RealClusterName"
                    },
                    "update_multiple": {
                      "description": "Allow multiple instances to be updated at once",
                      "type": "boolean",
                      "x-go-name": "UpdateMultiple"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAppInstClient": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppInstClientKey"
        ],
        "summary": "Show application instance clients",
        "operationId": "ShowAppInstClient",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInstClientKey": {
                  "description": "AppInstClientKey in region",
                  "type": "object",
                  "properties": {
                    "app_inst_key": {
                      "description": "AppInst Key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "AppInstKey"
                    },
                    "unique_id": {
                      "description": "AppInstClient Unique Id",
                      "type": "string",
                      "x-go-name": "UniqueId"
                    },
                    "unique_id_type": {
                      "description": "AppInstClient Unique Id Type",
                      "type": "string",
                      "x-go-name": "UniqueIdType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAppInstRefs": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppInstRefs"
        ],
        "summary": "Show AppInstRefs (debug only)",
        "operationId": "ShowAppInstRefs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInstRefs": {
                  "description": "AppInstRefs in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAutoProvPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Any fields specified will be used to filter results.",
        "tags": [
          "AutoProvPolicy"
        ],
        "summary": "Show Auto Provisioning Policies",
        "operationId": "ShowAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoProvPolicy": {
                  "description": "AutoProvPolicy in region",
                  "type": "object",
                  "properties": {
                    "deploy_client_count": {
                      "description": "Minimum number of clients within the auto deploy interval to trigger deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployClientCount"
                    },
                    "deploy_interval_count": {
                      "description": "Number of intervals to check before triggering deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployIntervalCount"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_instances": {
                      "description": "Maximum number of instances (active or not)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxInstances"
                    },
                    "min_active_instances": {
                      "description": "Minimum number of active instances for High-Availability",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinActiveInstances"
                    },
                    "undeploy_client_count": {
                      "description": "Number of active clients for the undeploy interval below which trigers undeployment, 0 (default) disables auto undeploy",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployClientCount"
                    },
                    "undeploy_interval_count": {
                      "description": "Number of intervals to check before triggering undeployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployIntervalCount"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowAutoScalePolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Any fields specified will be used to filter results.",
        "tags": [
          "AutoScalePolicy"
        ],
        "summary": "Show Auto Scale Policies",
        "operationId": "ShowAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoScalePolicy": {
                  "description": "AutoScalePolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_nodes": {
                      "description": "Maximum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxNodes"
                    },
                    "min_nodes": {
                      "description": "Minimum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinNodes"
                    },
                    "scale_down_cpu_thresh": {
                      "description": "(Deprecated) Scale down cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleDownCpuThresh"
                    },
                    "scale_up_cpu_thresh": {
                      "description": "(Deprecated) Scale up cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleUpCpuThresh"
                    },
                    "stabilization_window_sec": {
                      "description": "Stabilization window is the time for which past triggers are considered; the largest scale factor is always taken.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "StabilizationWindowSec"
                    },
                    "target_active_connections": {
                      "description": "Target per-node number of active connections, 0 means disabled",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "TargetActiveConnections"
                    },
                    "target_cpu": {
                      "description": "Target per-node cpu utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetCpu"
                    },
                    "target_mem": {
                      "description": "Target per-node memory utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetMem"
                    },
                    "trigger_time_sec": {
                      "description": "(Deprecated) Trigger time defines how long the target must be satified in seconds before acting upon it.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TriggerTimeSec"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Lists all the cloudlets managed from Edge Controller.",
        "tags": [
          "Cloudlet"
        ],
        "summary": "Show Cloudlets",
        "operationId": "ShowCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Cloudlet": {
                  "description": "Cloudlet in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_vars": {
                      "description": "Variables required to access cloudlet",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "AccessVars"
                    },
                    "alliance_orgs": {
                      "description": "This cloudlet will be treated as directly connected to these additional operator organizations for the purposes of FindCloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AllianceOrgs"
                    },
                    "container_version": {
                      "description": "Cloudlet container version",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "default_resource_alert_threshold": {
                      "description": "Default resource alert threshold percentage",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "DefaultResourceAlertThreshold"
                    },
                    "deployment": {
                      "description": "Deployment type to bring up CRM services (docker, kubernetes)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_local": {
                      "description": "Deploy cloudlet services locally",
                      "type": "boolean",
                      "x-go-name": "DeploymentLocal"
                    },
                    "enable_default_serverless_cluster": {
                      "description": "Enable experimental default multitenant (serverless) cluster",
                      "type": "boolean",
                      "x-go-name": "EnableDefaultServerlessCluster"
                    },
                    "env_var": {
                      "description": "Single Key-Value pair of env var to be passed to CRM",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "EnvVar"
                    },
                    "flavor": {
                      "description": "Min system resource requirements for platform",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "gpu_config": {
                      "description": "GPU Configuration associated with cloudlet",
                      "type": "object",
                      "properties": {
                        "driver": {
                          "description": "GPU driver key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the driver",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization to which the driver belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "Driver"
                        },
                        "license_config": {
                          "description": "Cloudlet specific license config to setup license (will be stored in secure storage)",
                          "type": "string",
                          "x-go-name": "LicenseConfig"
                        },
                        "properties": {
                          "description": "Properties to identify specifics of GPU",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-go-name": "Properties"
                        }
                      },
                      "x-go-name": "GpuConfig"
                    },
                    "infra_api_access": {
                      "description": "Infra Access Type is the type of access available to Infra API Endpoint",
                      "allOf": [
                        {
                          "$ref": "#/definitions/InfraApiAccess"
                        }
                      ],
                      "x-go-name": "InfraApiAccess"
                    },
                    "infra_config": {
                      "description": "Infra specific config",
                      "type": "object",
                      "properties": {
                        "external_network_name": {
                          "description": "Infra specific external network name",
                          "type": "string",
                          "x-go-name": "ExternalNetworkName"
                        },
                        "flavor_name": {
                          "description": "Infra specific flavor name",
                          "type": "string",
                          "x-go-name": "FlavorName"
                        }
                      },
                      "x-go-name": "InfraConfig"
                    },
                    "ip_support": {
                      "description": "Type of IP support provided by Cloudlet (see IpSupport)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpSupport"
                        }
                      ],
                      "x-go-name": "IpSupport"
                    },
                    "kafka_cluster": {
                      "description": "Operator provided kafka cluster endpoint to push events to",
                      "type": "string",
                      "x-go-name": "KafkaCluster"
                    },
                    "kafka_password": {
                      "description": "Password for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaPassword"
                    },
                    "kafka_user": {
                      "description": "Username for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaUser"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "location": {
                      "description": "Location of the Cloudlet site",
                      "type": "object",
                      "properties": {
                        "altitude": {
                          "description": "On android only lat and long are guaranteed to be supplied\nAltitude in meters",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Altitude"
                        },
                        "latitude": {
                          "description": "Latitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Latitude"
                        },
                        "longitude": {
                          "description": "Longitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Longitude"
                        }
                      },
                      "x-go-name": "Location"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_srv_addr": {
                      "description": "Address for the CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "NotifySrvAddr"
                    },
                    "num_dynamic_ips": {
                      "description": "Number of dynamic IPs available for dynamic IP support",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "NumDynamicIps"
                    },
                    "override_policy_container_version": {
                      "description": "Override container version from policy file",
                      "type": "boolean",
                      "x-go-name": "OverridePolicyContainerVersion"
                    },
                    "physical_name": {
                      "description": "Physical infrastructure cloudlet name",
                      "type": "string",
                      "x-go-name": "PhysicalName"
                    },
                    "platform_high_availability": {
                      "description": "Enable platform H/A",
                      "type": "boolean",
                      "x-go-name": "PlatformHighAvailability"
                    },
                    "platform_type": {
                      "description": "Platform type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PlatformType"
                        }
                      ],
                      "x-go-name": "PlatformType"
                    },
                    "secondary_notify_srv_addr": {
                      "description": "Address for the secondary CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "SecondaryNotifySrvAddr"
                    },
                    "single_kubernetes_cluster_owner": {
                      "description": "For single kubernetes cluster cloudlet platforms, cluster is owned by this organization instead of multi-tenant",
                      "type": "string",
                      "x-go-name": "SingleKubernetesClusterOwner"
                    },
                    "static_ips": {
                      "description": "List of static IPs for static IP support",
                      "type": "string",
                      "x-go-name": "StaticIps"
                    },
                    "time_limits": {
                      "description": "time limits which override global settings if non-zero",
                      "type": "object",
                      "properties": {
                        "create_app_inst_timeout": {
                          "description": "Override default max time to create an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateAppInstTimeout"
                        },
                        "create_cluster_inst_timeout": {
                          "description": "Override default max time to create a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateClusterInstTimeout"
                        },
                        "delete_app_inst_timeout": {
                          "description": "Override default max time to delete an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteAppInstTimeout"
                        },
                        "delete_cluster_inst_timeout": {
                          "description": "Override default max time to delete a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteClusterInstTimeout"
                        },
                        "update_app_inst_timeout": {
                          "description": "Override default max time to update an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateAppInstTimeout"
                        },
                        "update_cluster_inst_timeout": {
                          "description": "Override default max time to update a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateClusterInstTimeout"
                        }
                      },
                      "x-go-name": "TimeLimits"
                    },
                    "trust_policy": {
                      "description": "Optional Trust Policy",
                      "type": "string",
                      "x-go-name": "TrustPolicy"
                    },
                    "vm_image_version": {
                      "description": "MobiledgeX baseimage version where CRM services reside",
                      "type": "string",
                      "x-go-name": "VmImageVersion"
                    },
                    "vm_pool": {
                      "description": "VM Pool",
                      "type": "string",
                      "x-go-name": "VmPool"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowCloudletInfo": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletInfo"
        ],
        "summary": "Show CloudletInfos",
        "operationId": "ShowCloudletInfo",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletInfo": {
                  "description": "CloudletInfo in region",
                  "type": "object",
                  "properties": {
                    "active_crm_instance": {
                      "description": "Active HA instance",
                      "type": "string",
                      "x-go-name": "ActiveCrmInstance"
                    },
                    "compatibility_version": {
                      "description": "Version for compatibility tracking",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CompatibilityVersion"
                    },
                    "container_version": {
                      "description": "Cloudlet container version",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "controller": {
                      "description": "Connected controller unique id",
                      "type": "string",
                      "x-go-name": "Controller"
                    },
                    "controller_cache_received": {
                      "description": "Indicates all controller data has been sent to CRM",
                      "type": "boolean",
                      "x-go-name": "ControllerCacheReceived"
                    },
                    "errors": {
                      "description": "Any errors encountered while making changes to the Cloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Errors"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    },
                    "os_max_ram": {
                      "description": "Maximum Ram in MB on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxRam"
                    },
                    "os_max_vcores": {
                      "description": "Maximum number of VCPU cores on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxVcores"
                    },
                    "os_max_vol_gb": {
                      "description": "Maximum amount of disk in GB on the Cloudlet",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "OsMaxVolGb"
                    },
                    "properties": {
                      "description": "Cloudlet properties",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties"
                    },
                    "release_version": {
                      "description": "Cloudlet release version",
                      "type": "string",
                      "x-go-name": "ReleaseVersion"
                    },
                    "standby_crm": {
                      "description": "Denotes if info was reported by inactive",
                      "type": "boolean",
                      "x-go-name": "StandbyCrm"
                    },
                    "state": {
                      "description": "State of cloudlet",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CloudletState"
                        }
                      ],
                      "x-go-name": "State"
                    },
                    "trust_policy_state": {
                      "description": "Trust Policy State",
                      "allOf": [
                        {
                          "$ref": "#/definitions/TrackedState"
                        }
                      ],
                      "x-go-name": "TrustPolicyState"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowCloudletPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletPool"
        ],
        "summary": "Show CloudletPools",
        "operationId": "ShowCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletPool": {
                  "description": "CloudletPool in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "CloudletPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "CloudletPool Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization this pool belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowCloudletRefs": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletRefs"
        ],
        "summary": "Show CloudletRefs (debug only)",
        "operationId": "ShowCloudletRefs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletRefs": {
                  "description": "CloudletRefs in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Cloudlet key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "reserved_auto_cluster_ids": {
                      "description": "Track reservable autoclusterinsts ids in use. This is a bitmap.",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "ReservedAutoClusterIds"
                    },
                    "used_dynamic_ips": {
                      "description": "Used dynamic IPs",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "UsedDynamicIps"
                    },
                    "used_static_ips": {
                      "description": "Used static IPs",
                      "type": "string",
                      "x-go-name": "UsedStaticIps"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowCloudletsForAppDeployment": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "DefaultFlavor",
        "tags": [
          "DeploymentCloudletRequest"
        ],
        "summary": "Discover cloudlets supporting deployments of App",
        "operationId": "ShowCloudletsForAppDeployment",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "DeploymentCloudletRequest": {
                  "description": "DeploymentCloudletRequest in region",
                  "type": "object",
                  "properties": {
                    "app": {
                      "description": "Discover potential App Cloudlets",
                      "type": "object",
                      "required": [
                        "key"
                      ],
                      "properties": {
                        "access_ports": {
                          "description": "Comma separated list of protocol:port pairs that the App listens on.\nEx: \"tcp:80,udp:10002\".\nAlso supports additional configurations per port:\n(1) tls (tcp-only) - Enables TLS on specified port. Ex: \"tcp:443:tls\".\n(2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: \"udp:10001:nginx\".\n(3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: \"udp:10001:maxpktsize=8000\".",
                          "type": "string",
                          "x-go-name": "AccessPorts"
                        },
                        "access_type": {
                          "description": "(Deprecated) Access type",
                          "allOf": [
                            {
                              "$ref": "#/definitions/AccessType"
                            }
                          ],
                          "x-go-name": "AccessType"
                        },
                        "alert_policies": {
                          "description": "Alert Policies",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-go-name": "AlertPolicies"
                        },
                        "allow_serverless": {
                          "description": "App is allowed to deploy as serverless containers",
                          "type": "boolean",
                          "x-go-name": "AllowServerless"
                        },
                        "android_package_name": {
                          "description": "Android package name used to match the App name from the Android package",
                          "type": "string",
                          "x-go-name": "AndroidPackageName"
                        },
                        "annotations": {
                          "description": "Annotations is a comma separated map of arbitrary key value pairs,",
                          "type": "string",
                          "x-go-name": "Annotations",
                          "example": "key1=val1,key2=val2,key3=\"val 3\""
                        },
                        "auth_public_key": {
                          "description": "Public key used for authentication",
                          "type": "string",
                          "x-go-name": "AuthPublicKey"
                        },
                        "auto_prov_policies": {
                          "description": "Auto provisioning policy names, may be specified multiple times",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-go-name": "AutoProvPolicies"
                        },
                        "command": {
                          "description": "Command that the container runs to start service",
                          "type": "string",
                          "x-go-name": "Command"
                        },
                        "default_flavor": {
                          "description": "Default flavor for the App, which may be overridden by the AppInst",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Flavor name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "DefaultFlavor"
                        },
                        "deployment": {
                          "description": "Deployment type (kubernetes, docker, or vm)",
                          "type": "string",
                          "x-go-name": "Deployment"
                        },
                        "deployment_generator": {
                          "description": "Deployment generator target to generate a basic deployment manifest",
                          "type": "string",
                          "x-go-name": "DeploymentGenerator"
                        },
                        "deployment_manifest": {
                          "description": "Deployment manifest is the deployment specific manifest file/config.\nFor docker deployment, this can be a docker-compose or docker run file.\nFor kubernetes deployment, this can be a kubernetes yaml or helm chart file.",
                          "type": "string",
                          "x-go-name": "DeploymentManifest"
                        },
                        "fields": {
                          "description": "Fields are used for the Update API to specify which fields to apply",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-go-name": "Fields"
                        },
                        "image_path": {
                          "description": "URI of where image resides",
                          "type": "string",
                          "x-go-name": "ImagePath"
                        },
                        "image_type": {
                          "description": "Image type (see ImageType)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/ImageType"
                            }
                          ],
                          "x-go-name": "ImageType"
                        },
                        "internal_ports": {
                          "description": "Should this app have access to outside world?",
                          "type": "boolean",
                          "x-go-name": "InternalPorts"
                        },
                        "key": {
                          "description": "Unique identifier key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "Key"
                        },
                        "md5sum": {
                          "description": "MD5Sum of the VM-based app image",
                          "type": "string",
                          "x-go-name": "Md5Sum"
                        },
                        "official_fqdn": {
                          "description": "Official FQDN is the FQDN that the app uses to connect by default",
                          "type": "string",
                          "x-go-name": "OfficialFqdn"
                        },
                        "qos_session_duration": {
                          "description": "Session duration in seconds. Maximal value of 24 hours is used if not set",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "QosSessionDuration"
                        },
                        "qos_session_profile": {
                          "description": "Qualifier for the requested latency profile",
                          "allOf": [
                            {
                              "$ref": "#/definitions/QosSessionProfile"
                            }
                          ],
                          "x-go-name": "QosSessionProfile"
                        },
                        "revision": {
                          "description": "Revision can be specified or defaults to current timestamp when app is updated",
                          "type": "string",
                          "x-go-name": "Revision"
                        },
                        "scale_with_cluster": {
                          "description": "Option to run App on all nodes of the cluster",
                          "type": "boolean",
                          "x-go-name": "ScaleWithCluster"
                        },
                        "serverless_config": {
                          "description": "Configuration when deployed as serverless containers",
                          "type": "object",
                          "properties": {
                            "min_replicas": {
                              "description": "Minimum number of replicas when serverless",
                              "type": "integer",
                              "format": "uint32",
                              "x-go-name": "MinReplicas"
                            },
                            "ram": {
                              "description": "RAM allocation in megabytes per container when serverless",
                              "type": "integer",
                              "format": "uint64",
                              "x-go-name": "Ram"
                            },
                            "vcpus": {
                              "description": "Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001",
                              "type": "object",
                              "x-go-name": "Vcpus"
                            }
                          },
                          "x-go-name": "ServerlessConfig"
                        },
                        "skip_hc_ports": {
                          "description": "Comma separated list of protocol:port pairs that we should not run health check on.\nShould be configured in case app does not always listen on these ports.\n\"all\" can be specified if no health check to be run for this app.\nNumerical values must be decimal format.\ni.e. tcp:80,udp:10002",
                          "type": "string",
                          "x-go-name": "SkipHcPorts"
                        },
                        "template_delimiter": {
                          "description": "Delimiter to be used for template parsing, defaults to \"[[ ]]\"",
                          "type": "string",
                          "x-go-name": "TemplateDelimiter"
                        },
                        "trusted": {
                          "description": "Indicates that an instance of this app can be started on a trusted cloudlet",
                          "type": "boolean",
                          "x-go-name": "Trusted"
                        },
                        "vm_app_os_type": {
                          "description": "OS Type for VM Apps",
                          "allOf": [
                            {
                              "$ref": "#/definitions/VmAppOsType"
                            }
                          ],
                          "x-go-name": "VmAppOsType"
                        }
                      },
                      "x-go-name": "App"
                    },
                    "dry_run_deploy": {
                      "description": "Attempt to qualify cloudlet resources for deployment",
                      "type": "boolean",
                      "x-go-name": "DryRunDeploy"
                    },
                    "num_nodes": {
                      "description": "Optional number of worker VMs in dry run K8s Cluster, default = 2",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumNodes"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowClusterInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Lists all the cluster instances managed by Edge Controller.",
        "tags": [
          "ClusterInst"
        ],
        "summary": "Show Cluster Instances",
        "operationId": "ShowClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ClusterInst": {
                  "description": "ClusterInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "auto_scale_policy": {
                      "description": "Auto scale policy name",
                      "type": "string",
                      "x-go-name": "AutoScalePolicy"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes or docker)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "flavor": {
                      "description": "Flavor of the k8s node",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Flavor"
                    },
                    "image_name": {
                      "description": "Optional resource specific image to launch",
                      "type": "string",
                      "x-go-name": "ImageName"
                    },
                    "ip_access": {
                      "description": "IP access type (RootLB Type)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpAccess"
                        }
                      ],
                      "x-go-name": "IpAccess"
                    },
                    "key": {
                      "description": "Unique key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "multi_tenant": {
                      "description": "Multi-tenant kubernetes cluster",
                      "type": "boolean",
                      "x-go-name": "MultiTenant"
                    },
                    "networks": {
                      "description": "networks to connect to",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Networks"
                    },
                    "num_masters": {
                      "description": "Number of k8s masters (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumMasters"
                    },
                    "num_nodes": {
                      "description": "Number of k8s nodes (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumNodes"
                    },
                    "reservable": {
                      "description": "If ClusterInst is reservable",
                      "type": "boolean",
                      "x-go-name": "Reservable"
                    },
                    "shared_volume_size": {
                      "description": "Size of an optional shared volume to be mounted on the master",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "SharedVolumeSize"
                    },
                    "skip_crm_cleanup_on_failure": {
                      "description": "Prevents cleanup of resources on failure within CRM, used for diagnostic purposes",
                      "type": "boolean",
                      "x-go-name": "SkipCrmCleanupOnFailure"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowClusterRefs": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ClusterRefs"
        ],
        "summary": "Show ClusterRefs (debug only)",
        "operationId": "ShowClusterRefs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ClusterRefs": {
                  "description": "ClusterRefs in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Cluster Instance key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowDebugLevels": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "DebugRequest"
        ],
        "summary": "Show debug log levels",
        "operationId": "ShowDebugLevels",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "DebugRequest": {
                  "description": "DebugRequest in region",
                  "type": "object",
                  "properties": {
                    "args": {
                      "description": "Additional arguments for cmd",
                      "type": "string",
                      "x-go-name": "Args"
                    },
                    "node": {
                      "description": "Service node identifier (see NodeShow)",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet on which node is running, or is associated with",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Name or hostname of node",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "region": {
                          "description": "Region the node is in",
                          "type": "string",
                          "x-go-name": "Region"
                        },
                        "type": {
                          "description": "Node type",
                          "type": "string",
                          "x-go-name": "Type"
                        }
                      },
                      "x-go-name": "Node"
                    },
                    "pretty": {
                      "description": "if possible, make output pretty",
                      "type": "boolean",
                      "x-go-name": "Pretty"
                    },
                    "timeout": {
                      "description": "custom timeout (duration, defaults to 10s)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "Timeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowDevice": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Device"
        ],
        "summary": "Show devices",
        "operationId": "ShowDevice",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Device": {
                  "description": "Device in region",
                  "type": "object",
                  "properties": {
                    "first_seen": {
                      "description": "Timestamp when the device was registered",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "FirstSeen"
                    },
                    "key": {
                      "description": "Key",
                      "type": "object",
                      "properties": {
                        "unique_id": {
                          "description": "Unique identification of the client device or user. May be overridden by the server.",
                          "type": "string",
                          "x-go-name": "UniqueId"
                        },
                        "unique_id_type": {
                          "description": "Type of unique ID provided by the client",
                          "type": "string",
                          "x-go-name": "UniqueIdType"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "last_seen": {
                      "description": "Timestamp when the device was last seen(Future use)",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "LastSeen"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowDeviceReport": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "DeviceReport"
        ],
        "summary": "Device Reports API",
        "operationId": "ShowDeviceReport",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "DeviceReport": {
                  "description": "DeviceReport in region",
                  "type": "object",
                  "properties": {
                    "begin": {
                      "description": "Timestamp of the beginning of the report",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "Begin"
                    },
                    "end": {
                      "description": "Timestamp of the beginning of the report",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Nanos"
                        },
                        "seconds": {
                          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "Seconds"
                        }
                      },
                      "x-go-name": "End"
                    },
                    "key": {
                      "description": "Device Key",
                      "type": "object",
                      "properties": {
                        "unique_id": {
                          "description": "Unique identification of the client device or user. May be overridden by the server.",
                          "type": "string",
                          "x-go-name": "UniqueId"
                        },
                        "unique_id_type": {
                          "description": "Type of unique ID provided by the client",
                          "type": "string",
                          "x-go-name": "UniqueIdType"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowFlavor": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Flavor"
        ],
        "summary": "Show Flavors",
        "operationId": "ShowFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Flavor": {
                  "description": "Flavor in region",
                  "type": "object",
                  "properties": {
                    "disk": {
                      "description": "Amount of disk space in gigabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Disk"
                    },
                    "key": {
                      "description": "Unique key for the new flavor.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "opt_res_map": {
                      "description": "Optional Resources request, key = gpu\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "OptResMap"
                    },
                    "ram": {
                      "description": "RAM in megabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Ram"
                    },
                    "vcpus": {
                      "description": "Number of virtual CPUs",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Vcpus"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowFlavorsForCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletKey"
        ],
        "summary": "Find all meta flavors viable on cloudlet",
        "operationId": "ShowFlavorsForCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowFlowRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "FlowRateLimitSettings"
        ],
        "summary": "Show Flow RateLimit settings for an API endpoint and target",
        "operationId": "ShowFlowRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "FlowRateLimitSettings": {
                  "description": "FlowRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "flow_settings_name": {
                          "description": "Unique name for FlowRateLimitSettings (there can be multiple FlowSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "FlowSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "FlowSettings",
                      "type": "object",
                      "properties": {
                        "burst_size": {
                          "description": "Burst size for flow rate limiting (required for TokenBucketAlgorithm)",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "BurstSize"
                        },
                        "flow_algorithm": {
                          "description": "Flow Rate Limit algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/FlowRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "FlowAlgorithm"
                        },
                        "reqs_per_second": {
                          "description": "Requests per second for flow rate limiting",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "ReqsPerSecond"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowGPUDriver": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Lists all the MobiledgeX created GPU drivers and operator created GPU drivers.",
        "tags": [
          "GPUDriver"
        ],
        "summary": "Show GPU Drivers",
        "operationId": "ShowGPUDriver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriver": {
                  "description": "GPUDriver in region",
                  "type": "object",
                  "properties": {
                    "ignore_state": {
                      "description": "Ignore state will ignore any action in-progress on the GPU driver",
                      "type": "boolean",
                      "x-go-name": "IgnoreState"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "license_config": {
                      "description": "License config to setup license (will be stored in secure storage)",
                      "type": "string",
                      "x-go-name": "LicenseConfig"
                    },
                    "properties": {
                      "description": "Additional properties associated with GPU driver build",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties",
                      "example": "license server information, driver release date, etc"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowLogs": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ExecRequest"
        ],
        "summary": "View logs for AppInst",
        "operationId": "ShowLogs",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ExecRequest": {
                  "description": "ExecRequest in region",
                  "type": "object",
                  "properties": {
                    "app_inst_key": {
                      "description": "Target AppInst",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "AppInstKey"
                    },
                    "container_id": {
                      "description": "ContainerId is the name or ID of the target container, if applicable",
                      "type": "string",
                      "x-go-name": "ContainerId"
                    },
                    "log": {
                      "description": "Show log (one of)",
                      "type": "object",
                      "properties": {
                        "follow": {
                          "description": "Stream data",
                          "type": "boolean",
                          "x-go-name": "Follow"
                        },
                        "since": {
                          "description": "Show logs since either a duration ago (5s, 2m, 3h) or a timestamp (RFC3339)",
                          "type": "string",
                          "x-go-name": "Since"
                        },
                        "tail": {
                          "description": "Show only a recent number of lines",
                          "type": "integer",
                          "format": "int32",
                          "x-go-name": "Tail"
                        },
                        "timestamps": {
                          "description": "Show timestamps",
                          "type": "boolean",
                          "x-go-name": "Timestamps"
                        }
                      },
                      "x-go-name": "Log"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowMaxReqsRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "MaxReqsRateLimitSettings"
        ],
        "summary": "Show MaxReqs RateLimit settings for an API endpoint and target",
        "operationId": "ShowMaxReqsRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "MaxReqsRateLimitSettings": {
                  "description": "MaxReqsRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "max_reqs_settings_name": {
                          "description": "Unique name for MaxReqsRateLimitSettings (there can be multiple MaxReqsSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "MaxReqsSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "MaxReqsSettings",
                      "type": "object",
                      "properties": {
                        "interval": {
                          "description": "Time interval",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "Interval"
                        },
                        "max_reqs_algorithm": {
                          "description": "MaxReqs Rate Limit Algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/MaxReqsRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "MaxReqsAlgorithm"
                        },
                        "max_requests": {
                          "description": "Maximum number of requests for the given Interval",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "MaxRequests"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowNetwork": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Any fields specified will be used to filter results.",
        "tags": [
          "Network"
        ],
        "summary": "Show Networks",
        "operationId": "ShowNetwork",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Network": {
                  "description": "Network in region",
                  "type": "object",
                  "properties": {
                    "connection_type": {
                      "description": "Network connection type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/NetworkConnectionType"
                        }
                      ],
                      "x-go-name": "ConnectionType"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet that this network can be provisioned on",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Network Name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowNode": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Node"
        ],
        "summary": "Show all Nodes connected to all Controllers",
        "operationId": "ShowNode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Node": {
                  "description": "Node in region",
                  "type": "object",
                  "properties": {
                    "build_author": {
                      "description": "Build Author",
                      "type": "string",
                      "x-go-name": "BuildAuthor"
                    },
                    "build_date": {
                      "description": "Build Date",
                      "type": "string",
                      "x-go-name": "BuildDate"
                    },
                    "build_head": {
                      "description": "Build Head Version",
                      "type": "string",
                      "x-go-name": "BuildHead"
                    },
                    "build_master": {
                      "description": "Build Master Version",
                      "type": "string",
                      "x-go-name": "BuildMaster"
                    },
                    "container_version": {
                      "description": "Docker edge-cloud container version which node instance use",
                      "type": "string",
                      "x-go-name": "ContainerVersion"
                    },
                    "hostname": {
                      "description": "Hostname",
                      "type": "string",
                      "x-go-name": "Hostname"
                    },
                    "internal_pki": {
                      "description": "Internal PKI Config",
                      "type": "string",
                      "x-go-name": "InternalPki"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet on which node is running, or is associated with",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Name or hostname of node",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "region": {
                          "description": "Region the node is in",
                          "type": "string",
                          "x-go-name": "Region"
                        },
                        "type": {
                          "description": "Node type",
                          "type": "string",
                          "x-go-name": "Type"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "notify_id": {
                      "description": "Id of client assigned by server (internal use only)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "NotifyId"
                    },
                    "properties": {
                      "description": "Additional properties",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowOperatorCode": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Show Codes for an Operator.",
        "tags": [
          "OperatorCode"
        ],
        "summary": "Show Operator Code",
        "operationId": "ShowOperatorCode",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "OperatorCode": {
                  "description": "OperatorCode in region",
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "MCC plus MNC code, or custom carrier code designation.",
                      "type": "string",
                      "x-go-name": "Code"
                    },
                    "organization": {
                      "description": "Operator Organization name",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "RateLimitSettings"
        ],
        "summary": "Show RateLimit settings for an API endpoint and target",
        "operationId": "ShowRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "RateLimitSettings": {
                  "description": "RateLimitSettings in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Key that identifies api and rate limit target for settings",
                      "type": "object",
                      "properties": {
                        "api_endpoint_type": {
                          "description": "API Endpoint type",
                          "allOf": [
                            {
                              "$ref": "#/definitions/ApiEndpointType"
                            }
                          ],
                          "x-go-name": "ApiEndpointType"
                        },
                        "api_name": {
                          "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                          "type": "string",
                          "x-go-name": "ApiName"
                        },
                        "rate_limit_target": {
                          "description": "Target to rate limit",
                          "allOf": [
                            {
                              "$ref": "#/definitions/RateLimitTarget"
                            }
                          ],
                          "x-go-name": "RateLimitTarget"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowResTagTable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ResTagTable"
        ],
        "summary": "Show TagTable",
        "operationId": "ShowResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTable": {
                  "description": "ResTagTable in region",
                  "type": "object",
                  "properties": {
                    "azone": {
                      "description": "Availability zone(s) of resource if required",
                      "type": "string",
                      "x-go-name": "Azone"
                    },
                    "key": {
                      "description": "Resource tags table key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Resource Table Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Operator organization of the cloudlet site.",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "tags": {
                      "description": "One or more string tags",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Settings"
        ],
        "summary": "Show settings",
        "operationId": "ShowSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Settings": {
                  "description": "Settings in region",
                  "type": "object",
                  "properties": {
                    "alert_policy_min_trigger_time": {
                      "description": "Minimmum trigger time for alert policies",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "AlertPolicyMinTriggerTime"
                    },
                    "appinst_client_cleanup_interval": {
                      "description": "AppInstClient cleanup thread run interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "AppinstClientCleanupInterval"
                    },
                    "auto_deploy_interval_sec": {
                      "description": "Auto Provisioning Stats push and analysis interval (seconds)",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "AutoDeployIntervalSec"
                    },
                    "auto_deploy_max_intervals": {
                      "description": "Auto Provisioning Policy max allowed intervals",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "AutoDeployMaxIntervals"
                    },
                    "auto_deploy_offset_sec": {
                      "description": "Auto Provisioning analysis offset from interval (seconds)",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "AutoDeployOffsetSec"
                    },
                    "chef_client_interval": {
                      "description": "Default chef client interval (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ChefClientInterval"
                    },
                    "cleanup_reservable_auto_cluster_idletime": {
                      "description": "Idle reservable ClusterInst clean up time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CleanupReservableAutoClusterIdletime"
                    },
                    "cloudlet_maintenance_timeout": {
                      "description": "Default Cloudlet Maintenance timeout (used twice for AutoProv and Cloudlet)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CloudletMaintenanceTimeout"
                    },
                    "cluster_auto_scale_averaging_duration_sec": {
                      "description": "Cluster auto scale averaging duration for stats to avoid spikes (seconds), avoid setting below 30s or it will not capture any measurements to average",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "ClusterAutoScaleAveragingDurationSec"
                    },
                    "cluster_auto_scale_retry_delay": {
                      "description": "Cluster auto scale retry delay if scaling failed",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ClusterAutoScaleRetryDelay"
                    },
                    "create_app_inst_timeout": {
                      "description": "Create AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateAppInstTimeout"
                    },
                    "create_cloudlet_timeout": {
                      "description": "Create Cloudlet timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateCloudletTimeout"
                    },
                    "create_cluster_inst_timeout": {
                      "description": "Create ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateClusterInstTimeout"
                    },
                    "delete_app_inst_timeout": {
                      "description": "Delete AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DeleteAppInstTimeout"
                    },
                    "delete_cluster_inst_timeout": {
                      "description": "Delete ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DeleteClusterInstTimeout"
                    },
                    "disable_rate_limit": {
                      "description": "Disable rate limiting for APIs (default is false)",
                      "type": "boolean",
                      "x-go-name": "DisableRateLimit"
                    },
                    "dme_api_metrics_collection_interval": {
                      "description": "Metrics collection interval for DME API counts (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DmeApiMetricsCollectionInterval"
                    },
                    "edge_events_metrics_collection_interval": {
                      "description": "Collection interval for edgeevents metrics (latency, device, and custom)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "EdgeEventsMetricsCollectionInterval"
                    },
                    "influx_db_cloudlet_usage_metrics_retention": {
                      "description": "Default influxDB cloudlet usage metrics retention policy (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbCloudletUsageMetricsRetention"
                    },
                    "influx_db_downsampled_metrics_retention": {
                      "description": "Default retention policy for downsampled influx db (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbDownsampledMetricsRetention"
                    },
                    "influx_db_edge_events_metrics_retention": {
                      "description": "Default retention policy for edgeevents metrics influx db (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbEdgeEventsMetricsRetention"
                    },
                    "influx_db_metrics_retention": {
                      "description": "Default influxDB metrics retention policy (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbMetricsRetention"
                    },
                    "location_tile_side_length_km": {
                      "description": "Length of location tiles side for latency metrics (km)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "LocationTileSideLengthKm"
                    },
                    "master_node_flavor": {
                      "description": "Default flavor for k8s master VM and \u003e 0  workers",
                      "type": "string",
                      "x-go-name": "MasterNodeFlavor"
                    },
                    "max_tracked_dme_clients": {
                      "description": "Max DME clients to be tracked at the same time.",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "MaxTrackedDmeClients"
                    },
                    "platform_ha_instance_active_expire_time": {
                      "description": "Platform HA instance active time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "PlatformHaInstanceActiveExpireTime"
                    },
                    "platform_ha_instance_poll_interval": {
                      "description": "Platform HA instance poll interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "PlatformHaInstancePollInterval"
                    },
                    "rate_limit_max_tracked_ips": {
                      "description": "Maximum number of IPs to track for rate limiting",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "RateLimitMaxTrackedIps"
                    },
                    "resource_snapshot_thread_interval": {
                      "description": "ResourceSnapshot Refresh thread run interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ResourceSnapshotThreadInterval"
                    },
                    "shepherd_alert_evaluation_interval": {
                      "description": "Shepherd alert evaluation interval for k8s and docker appInstances (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdAlertEvaluationInterval"
                    },
                    "shepherd_health_check_interval": {
                      "description": "Health Checking probing frequency (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdHealthCheckInterval"
                    },
                    "shepherd_health_check_retries": {
                      "description": "Number of times Shepherd Health Check fails before we mark appInst down",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "ShepherdHealthCheckRetries"
                    },
                    "shepherd_metrics_collection_interval": {
                      "description": "Shepherd metrics collection interval for k8s and docker appInstances (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdMetricsCollectionInterval"
                    },
                    "shepherd_metrics_scrape_interval": {
                      "description": "Shepherd metrics scraping interval (how often metrics are pulled by prometheus, vs pushed to Controller by Shepherd collection)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdMetricsScrapeInterval"
                    },
                    "update_app_inst_timeout": {
                      "description": "Update AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateAppInstTimeout"
                    },
                    "update_cloudlet_timeout": {
                      "description": "Update Cloudlet timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateCloudletTimeout"
                    },
                    "update_cluster_inst_timeout": {
                      "description": "Update ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateClusterInstTimeout"
                    },
                    "update_trust_policy_timeout": {
                      "description": "Update Trust Policy timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateTrustPolicyTimeout"
                    },
                    "update_vm_pool_timeout": {
                      "description": "Update VM pool timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateVmPoolTimeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowTrustPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Any fields specified will be used to filter results.",
        "tags": [
          "TrustPolicy"
        ],
        "summary": "Show Trust Policies",
        "operationId": "ShowTrustPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicy": {
                  "description": "TrustPolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowTrustPolicyException": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Any fields specified will be used to filter results.",
        "tags": [
          "TrustPolicyException"
        ],
        "summary": "Show Trust Policy Exceptions",
        "operationId": "ShowTrustPolicyException",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicyException": {
                  "description": "TrustPolicyException in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique Key composed of App and CloudletPool key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cloudlet_pool_key": {
                          "description": "CloudletPool Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "CloudletPool Name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Name of the organization this pool belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletPoolKey"
                        },
                        "name": {
                          "description": "TrustPolicyExceptionKey name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "state": {
                      "description": "State of the exception within the approval process",
                      "allOf": [
                        {
                          "$ref": "#/definitions/TrustPolicyExceptionState"
                        }
                      ],
                      "x-go-name": "State"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/ShowVMPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Lists all the VMs part of the VM pool.",
        "tags": [
          "VMPool"
        ],
        "summary": "Show VMPools",
        "operationId": "ShowVMPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "VMPool": {
                  "description": "VMPool in region",
                  "type": "object",
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "delete_prepare": {
                      "description": "Preparing to be deleted",
                      "type": "boolean",
                      "x-go-name": "DeletePrepare"
                    },
                    "key": {
                      "description": "VMPool Key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the vmpool",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the vmpool",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/StreamAppInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "AppInstKey"
        ],
        "summary": "Stream Application Instance current progress",
        "operationId": "StreamAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInstKey": {
                  "description": "AppInstKey in region",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/StreamCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "CloudletKey"
        ],
        "summary": "Stream Cloudlet current progress",
        "operationId": "StreamCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletKey": {
                  "description": "CloudletKey in region",
                  "type": "object",
                  "properties": {
                    "federated_organization": {
                      "description": "Federated operator organization who shared this cloudlet",
                      "type": "string",
                      "x-go-name": "FederatedOrganization"
                    },
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/StreamClusterInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "ClusterInstKey"
        ],
        "summary": "Stream Cluster Instance current progress",
        "operationId": "StreamClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ClusterInstKey": {
                  "description": "ClusterInstKey in region",
                  "type": "object",
                  "properties": {
                    "cloudlet_key": {
                      "description": "Name of Cloudlet on which the Cluster is instantiated",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "CloudletKey"
                    },
                    "cluster_key": {
                      "description": "Name of Cluster",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Cluster name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "ClusterKey"
                    },
                    "organization": {
                      "description": "Name of Developer organization that this cluster belongs to",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/StreamGPUDriver": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "GPUDriverKey"
        ],
        "summary": "Stream GPU driver current progress",
        "operationId": "StreamGPUDriver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriverKey": {
                  "description": "GPUDriverKey in region",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the driver",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization to which the driver belongs to",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateAlertPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `AlertPolicy.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nCpuUtilizationLimit: 3\nMemUtilizationLimit: 4\nDiskUtilizationLimit: 5\nActiveConnLimit: 6\nSeverity: 7\nTriggerTime: 8\nLabels: 9\nLabelsKey: 9.1\nLabelsValue: 9.2\nAnnotations: 10\nAnnotationsKey: 10.1\nAnnotationsValue: 10.2\nDescription: 11\nDeletePrepare: 12\n```",
        "tags": [
          "AlertPolicy"
        ],
        "summary": "Update an Alert Policy",
        "operationId": "UpdateAlertPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AlertPolicy": {
                  "description": "AlertPolicy in region",
                  "type": "object",
                  "properties": {
                    "active_conn_limit": {
                      "description": "Active Connections alert threshold. Valid values 1-4294967295",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ActiveConnLimit"
                    },
                    "annotations": {
                      "description": "Additional Annotations for extra information about the alert",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Annotations"
                    },
                    "cpu_utilization_limit": {
                      "description": "Container or pod CPU utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "CpuUtilizationLimit"
                    },
                    "description": {
                      "description": "Description of the alert policy",
                      "type": "string",
                      "x-go-name": "Description"
                    },
                    "disk_utilization_limit": {
                      "description": "Container or pod disk utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DiskUtilizationLimit"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Alert Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the app that this alert can be applied to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "labels": {
                      "description": "Additional Labels",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Labels"
                    },
                    "mem_utilization_limit": {
                      "description": "Container or pod memory utilization rate(percentage) across all nodes. Valid values 1-100",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MemUtilizationLimit"
                    },
                    "severity": {
                      "description": "Alert severity level - one of \"info\", \"warning\", \"error\"",
                      "type": "string",
                      "x-go-name": "Severity"
                    },
                    "trigger_time": {
                      "description": "Duration for which alert interval is active (max 72 hours)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "TriggerTime"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateApp": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates the definition of an Application instance.\nThe following values should be added to `App.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nKeyVersion: 2.3\nImagePath: 4\nImageType: 5\nAccessPorts: 7\nDefaultFlavor: 9\nDefaultFlavorName: 9.1\nAuthPublicKey: 12\nCommand: 13\nAnnotations: 14\nDeployment: 15\nDeploymentManifest: 16\nDeploymentGenerator: 17\nAndroidPackageName: 18\nDelOpt: 20\nConfigs: 21\nConfigsKind: 21.1\nConfigsConfig: 21.2\nScaleWithCluster: 22\nInternalPorts: 23\nRevision: 24\nOfficialFqdn: 25\nMd5Sum: 26\nAutoProvPolicy: 28\nAccessType: 29\nDeletePrepare: 31\nAutoProvPolicies: 32\nTemplateDelimiter: 33\nSkipHcPorts: 34\nCreatedAt: 35\nCreatedAtSeconds: 35.1\nCreatedAtNanos: 35.2\nUpdatedAt: 36\nUpdatedAtSeconds: 36.1\nUpdatedAtNanos: 36.2\nTrusted: 37\nRequiredOutboundConnections: 38\nRequiredOutboundConnectionsProtocol: 38.1\nRequiredOutboundConnectionsPortRangeMin: 38.2\nRequiredOutboundConnectionsPortRangeMax: 38.3\nRequiredOutboundConnectionsRemoteCidr: 38.4\nAllowServerless: 39\nServerlessConfig: 40\nServerlessConfigVcpus: 40.1\nServerlessConfigVcpusWhole: 40.1.1\nServerlessConfigVcpusNanos: 40.1.2\nServerlessConfigRam: 40.2\nServerlessConfigMinReplicas: 40.3\nVmAppOsType: 41\nAlertPolicies: 42\nQosSessionProfile: 43\nQosSessionDuration: 44\n```",
        "tags": [
          "App"
        ],
        "summary": "Update Application",
        "operationId": "UpdateApp",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "App": {
                  "description": "App in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_ports": {
                      "description": "Comma separated list of protocol:port pairs that the App listens on.\nEx: \"tcp:80,udp:10002\".\nAlso supports additional configurations per port:\n(1) tls (tcp-only) - Enables TLS on specified port. Ex: \"tcp:443:tls\".\n(2) nginx (udp-only) - Use NGINX LB instead of envoy for specified port. Ex: \"udp:10001:nginx\".\n(3) maxpktsize (udp-only) - Configures maximum UDP datagram size allowed on port for both upstream/downstream traffic. Ex: \"udp:10001:maxpktsize=8000\".",
                      "type": "string",
                      "x-go-name": "AccessPorts"
                    },
                    "access_type": {
                      "description": "(Deprecated) Access type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/AccessType"
                        }
                      ],
                      "x-go-name": "AccessType"
                    },
                    "alert_policies": {
                      "description": "Alert Policies",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AlertPolicies"
                    },
                    "allow_serverless": {
                      "description": "App is allowed to deploy as serverless containers",
                      "type": "boolean",
                      "x-go-name": "AllowServerless"
                    },
                    "android_package_name": {
                      "description": "Android package name used to match the App name from the Android package",
                      "type": "string",
                      "x-go-name": "AndroidPackageName"
                    },
                    "annotations": {
                      "description": "Annotations is a comma separated map of arbitrary key value pairs,",
                      "type": "string",
                      "x-go-name": "Annotations",
                      "example": "key1=val1,key2=val2,key3=\"val 3\""
                    },
                    "auth_public_key": {
                      "description": "Public key used for authentication",
                      "type": "string",
                      "x-go-name": "AuthPublicKey"
                    },
                    "auto_prov_policies": {
                      "description": "Auto provisioning policy names, may be specified multiple times",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AutoProvPolicies"
                    },
                    "command": {
                      "description": "Command that the container runs to start service",
                      "type": "string",
                      "x-go-name": "Command"
                    },
                    "default_flavor": {
                      "description": "Default flavor for the App, which may be overridden by the AppInst",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "DefaultFlavor"
                    },
                    "deployment": {
                      "description": "Deployment type (kubernetes, docker, or vm)",
                      "type": "string",
                      "x-go-name": "Deployment"
                    },
                    "deployment_generator": {
                      "description": "Deployment generator target to generate a basic deployment manifest",
                      "type": "string",
                      "x-go-name": "DeploymentGenerator"
                    },
                    "deployment_manifest": {
                      "description": "Deployment manifest is the deployment specific manifest file/config.\nFor docker deployment, this can be a docker-compose or docker run file.\nFor kubernetes deployment, this can be a kubernetes yaml or helm chart file.",
                      "type": "string",
                      "x-go-name": "DeploymentManifest"
                    },
                    "image_path": {
                      "description": "URI of where image resides",
                      "type": "string",
                      "x-go-name": "ImagePath"
                    },
                    "image_type": {
                      "description": "Image type (see ImageType)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/ImageType"
                        }
                      ],
                      "x-go-name": "ImageType"
                    },
                    "internal_ports": {
                      "description": "Should this app have access to outside world?",
                      "type": "boolean",
                      "x-go-name": "InternalPorts"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "md5sum": {
                      "description": "MD5Sum of the VM-based app image",
                      "type": "string",
                      "x-go-name": "Md5Sum"
                    },
                    "official_fqdn": {
                      "description": "Official FQDN is the FQDN that the app uses to connect by default",
                      "type": "string",
                      "x-go-name": "OfficialFqdn"
                    },
                    "qos_session_duration": {
                      "description": "Session duration in seconds. Maximal value of 24 hours is used if not set",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "QosSessionDuration"
                    },
                    "qos_session_profile": {
                      "description": "Qualifier for the requested latency profile",
                      "allOf": [
                        {
                          "$ref": "#/definitions/QosSessionProfile"
                        }
                      ],
                      "x-go-name": "QosSessionProfile"
                    },
                    "revision": {
                      "description": "Revision can be specified or defaults to current timestamp when app is updated",
                      "type": "string",
                      "x-go-name": "Revision"
                    },
                    "scale_with_cluster": {
                      "description": "Option to run App on all nodes of the cluster",
                      "type": "boolean",
                      "x-go-name": "ScaleWithCluster"
                    },
                    "serverless_config": {
                      "description": "Configuration when deployed as serverless containers",
                      "type": "object",
                      "properties": {
                        "min_replicas": {
                          "description": "Minimum number of replicas when serverless",
                          "type": "integer",
                          "format": "uint32",
                          "x-go-name": "MinReplicas"
                        },
                        "ram": {
                          "description": "RAM allocation in megabytes per container when serverless",
                          "type": "integer",
                          "format": "uint64",
                          "x-go-name": "Ram"
                        },
                        "vcpus": {
                          "description": "Virtual CPUs allocation per container when serverless, may be decimal in increments of 0.001",
                          "type": "object",
                          "x-go-name": "Vcpus"
                        }
                      },
                      "x-go-name": "ServerlessConfig"
                    },
                    "skip_hc_ports": {
                      "description": "Comma separated list of protocol:port pairs that we should not run health check on.\nShould be configured in case app does not always listen on these ports.\n\"all\" can be specified if no health check to be run for this app.\nNumerical values must be decimal format.\ni.e. tcp:80,udp:10002",
                      "type": "string",
                      "x-go-name": "SkipHcPorts"
                    },
                    "template_delimiter": {
                      "description": "Delimiter to be used for template parsing, defaults to \"[[ ]]\"",
                      "type": "string",
                      "x-go-name": "TemplateDelimiter"
                    },
                    "trusted": {
                      "description": "Indicates that an instance of this app can be started on a trusted cloudlet",
                      "type": "boolean",
                      "x-go-name": "Trusted"
                    },
                    "vm_app_os_type": {
                      "description": "OS Type for VM Apps",
                      "allOf": [
                        {
                          "$ref": "#/definitions/VmAppOsType"
                        }
                      ],
                      "x-go-name": "VmAppOsType"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateAppInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates an Application instance and then refreshes it.\nThe following values should be added to `AppInst.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyAppKey: 2.1\nKeyAppKeyOrganization: 2.1.1\nKeyAppKeyName: 2.1.2\nKeyAppKeyVersion: 2.1.3\nKeyClusterInstKey: 2.4\nKeyClusterInstKeyClusterKey: 2.4.1\nKeyClusterInstKeyClusterKeyName: 2.4.1.1\nKeyClusterInstKeyCloudletKey: 2.4.2\nKeyClusterInstKeyCloudletKeyOrganization: 2.4.2.1\nKeyClusterInstKeyCloudletKeyName: 2.4.2.2\nKeyClusterInstKeyCloudletKeyFederatedOrganization: 2.4.2.3\nKeyClusterInstKeyOrganization: 2.4.3\nCloudletLoc: 3\nCloudletLocLatitude: 3.1\nCloudletLocLongitude: 3.2\nCloudletLocHorizontalAccuracy: 3.3\nCloudletLocVerticalAccuracy: 3.4\nCloudletLocAltitude: 3.5\nCloudletLocCourse: 3.6\nCloudletLocSpeed: 3.7\nCloudletLocTimestamp: 3.8\nCloudletLocTimestampSeconds: 3.8.1\nCloudletLocTimestampNanos: 3.8.2\nUri: 4\nLiveness: 6\nMappedPorts: 9\nMappedPortsProto: 9.1\nMappedPortsInternalPort: 9.2\nMappedPortsPublicPort: 9.3\nMappedPortsFqdnPrefix: 9.5\nMappedPortsEndPort: 9.6\nMappedPortsTls: 9.7\nMappedPortsNginx: 9.8\nMappedPortsMaxPktSize: 9.9\nFlavor: 12\nFlavorName: 12.1\nState: 14\nErrors: 15\nCrmOverride: 16\nRuntimeInfo: 17\nRuntimeInfoContainerIds: 17.1\nCreatedAt: 21\nCreatedAtSeconds: 21.1\nCreatedAtNanos: 21.2\nAutoClusterIpAccess: 22\nRevision: 24\nForceUpdate: 25\nUpdateMultiple: 26\nConfigs: 27\nConfigsKind: 27.1\nConfigsConfig: 27.2\nHealthCheck: 29\nPowerState: 31\nExternalVolumeSize: 32\nAvailabilityZone: 33\nVmFlavor: 34\nOptRes: 35\nUpdatedAt: 36\nUpdatedAtSeconds: 36.1\nUpdatedAtNanos: 36.2\nRealClusterName: 37\nInternalPortToLbIp: 38\nInternalPortToLbIpKey: 38.1\nInternalPortToLbIpValue: 38.2\nDedicatedIp: 39\nUniqueId: 40\nDnsLabel: 41\n```",
        "tags": [
          "AppInst"
        ],
        "summary": "Update Application Instance",
        "operationId": "UpdateAppInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AppInst": {
                  "description": "AppInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "dedicated_ip": {
                      "description": "Dedicated IP assigns an IP for this AppInst but requires platform support",
                      "type": "boolean",
                      "x-go-name": "DedicatedIp"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cluster_inst_key": {
                          "description": "Cluster instance on which this is instantiated",
                          "type": "object",
                          "properties": {
                            "cloudlet_key": {
                              "description": "Name of Cloudlet on which the Cluster is instantiated",
                              "type": "object",
                              "properties": {
                                "federated_organization": {
                                  "description": "Federated operator organization who shared this cloudlet",
                                  "type": "string",
                                  "x-go-name": "FederatedOrganization"
                                },
                                "name": {
                                  "description": "Name of the cloudlet",
                                  "type": "string",
                                  "x-go-name": "Name"
                                },
                                "organization": {
                                  "description": "Organization of the cloudlet site",
                                  "type": "string",
                                  "x-go-name": "Organization"
                                }
                              },
                              "x-go-name": "CloudletKey"
                            },
                            "cluster_key": {
                              "description": "Name of Cluster",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "description": "Cluster name",
                                  "type": "string",
                                  "x-go-name": "Name"
                                }
                              },
                              "x-go-name": "ClusterKey"
                            },
                            "organization": {
                              "description": "Name of Developer organization that this cluster belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "ClusterInstKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "power_state": {
                      "description": "Power State of the AppInst",
                      "allOf": [
                        {
                          "$ref": "#/definitions/PowerState"
                        }
                      ],
                      "x-go-name": "PowerState"
                    },
                    "real_cluster_name": {
                      "description": "Real ClusterInst name",
                      "type": "string",
                      "x-go-name": "RealClusterName"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateAutoProvPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `AutoProvPolicy.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nDeployClientCount: 3\nDeployIntervalCount: 4\nCloudlets: 5\nCloudletsKey: 5.1\nCloudletsKeyOrganization: 5.1.1\nCloudletsKeyName: 5.1.2\nCloudletsKeyFederatedOrganization: 5.1.3\nCloudletsLoc: 5.2\nCloudletsLocLatitude: 5.2.1\nCloudletsLocLongitude: 5.2.2\nCloudletsLocHorizontalAccuracy: 5.2.3\nCloudletsLocVerticalAccuracy: 5.2.4\nCloudletsLocAltitude: 5.2.5\nCloudletsLocCourse: 5.2.6\nCloudletsLocSpeed: 5.2.7\nCloudletsLocTimestamp: 5.2.8\nCloudletsLocTimestampSeconds: 5.2.8.1\nCloudletsLocTimestampNanos: 5.2.8.2\nMinActiveInstances: 6\nMaxInstances: 7\nUndeployClientCount: 8\nUndeployIntervalCount: 9\nDeletePrepare: 10\n```",
        "tags": [
          "AutoProvPolicy"
        ],
        "summary": "Update an Auto Provisioning Policy",
        "operationId": "UpdateAutoProvPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoProvPolicy": {
                  "description": "AutoProvPolicy in region",
                  "type": "object",
                  "properties": {
                    "deploy_client_count": {
                      "description": "Minimum number of clients within the auto deploy interval to trigger deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployClientCount"
                    },
                    "deploy_interval_count": {
                      "description": "Number of intervals to check before triggering deployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "DeployIntervalCount"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_instances": {
                      "description": "Maximum number of instances (active or not)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxInstances"
                    },
                    "min_active_instances": {
                      "description": "Minimum number of active instances for High-Availability",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinActiveInstances"
                    },
                    "undeploy_client_count": {
                      "description": "Number of active clients for the undeploy interval below which trigers undeployment, 0 (default) disables auto undeploy",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployClientCount"
                    },
                    "undeploy_interval_count": {
                      "description": "Number of intervals to check before triggering undeployment",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "UndeployIntervalCount"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateAutoScalePolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `AutoScalePolicy.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nMinNodes: 3\nMaxNodes: 4\nScaleUpCpuThresh: 5\nScaleDownCpuThresh: 6\nTriggerTimeSec: 7\nStabilizationWindowSec: 8\nTargetCpu: 9\nTargetMem: 10\nTargetActiveConnections: 11\nDeletePrepare: 12\n```",
        "tags": [
          "AutoScalePolicy"
        ],
        "summary": "Update an Auto Scale Policy",
        "operationId": "UpdateAutoScalePolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "AutoScalePolicy": {
                  "description": "AutoScalePolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "max_nodes": {
                      "description": "Maximum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MaxNodes"
                    },
                    "min_nodes": {
                      "description": "Minimum number of cluster nodes",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "MinNodes"
                    },
                    "scale_down_cpu_thresh": {
                      "description": "(Deprecated) Scale down cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleDownCpuThresh"
                    },
                    "scale_up_cpu_thresh": {
                      "description": "(Deprecated) Scale up cpu threshold (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "ScaleUpCpuThresh"
                    },
                    "stabilization_window_sec": {
                      "description": "Stabilization window is the time for which past triggers are considered; the largest scale factor is always taken.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "StabilizationWindowSec"
                    },
                    "target_active_connections": {
                      "description": "Target per-node number of active connections, 0 means disabled",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "TargetActiveConnections"
                    },
                    "target_cpu": {
                      "description": "Target per-node cpu utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetCpu"
                    },
                    "target_mem": {
                      "description": "Target per-node memory utilization (percentage 1 to 100), 0 means disabled",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TargetMem"
                    },
                    "trigger_time_sec": {
                      "description": "(Deprecated) Trigger time defines how long the target must be satified in seconds before acting upon it.",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "TriggerTimeSec"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateCloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates the Cloudlet configuration and manages the upgrade of Cloudlet services.\nThe following values should be added to `Cloudlet.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nKeyFederatedOrganization: 2.3\nLocation: 5\nLocationLatitude: 5.1\nLocationLongitude: 5.2\nLocationHorizontalAccuracy: 5.3\nLocationVerticalAccuracy: 5.4\nLocationAltitude: 5.5\nLocationCourse: 5.6\nLocationSpeed: 5.7\nLocationTimestamp: 5.8\nLocationTimestampSeconds: 5.8.1\nLocationTimestampNanos: 5.8.2\nIpSupport: 6\nStaticIps: 7\nNumDynamicIps: 8\nTimeLimits: 9\nTimeLimitsCreateClusterInstTimeout: 9.1\nTimeLimitsUpdateClusterInstTimeout: 9.2\nTimeLimitsDeleteClusterInstTimeout: 9.3\nTimeLimitsCreateAppInstTimeout: 9.4\nTimeLimitsUpdateAppInstTimeout: 9.5\nTimeLimitsDeleteAppInstTimeout: 9.6\nErrors: 10\nState: 12\nCrmOverride: 13\nDeploymentLocal: 14\nPlatformType: 15\nNotifySrvAddr: 16\nFlavor: 17\nFlavorName: 17.1\nPhysicalName: 18\nEnvVar: 19\nEnvVarKey: 19.1\nEnvVarValue: 19.2\nContainerVersion: 20\nConfig: 21\nConfigContainerRegistryPath: 21.1\nConfigCloudletVmImagePath: 21.2\nConfigNotifyCtrlAddrs: 21.3\nConfigTlsCertFile: 21.5\nConfigTlsKeyFile: 21.20\nConfigTlsCaFile: 21.21\nConfigEnvVar: 21.6\nConfigEnvVarKey: 21.6.1\nConfigEnvVarValue: 21.6.2\nConfigPlatformTag: 21.8\nConfigTestMode: 21.9\nConfigSpan: 21.10\nConfigCleanupMode: 21.11\nConfigRegion: 21.12\nConfigCommercialCerts: 21.13\nConfigUseVaultPki: 21.14\nConfigAppDnsRoot: 21.16\nConfigChefServerPath: 21.17\nConfigChefClientInterval: 21.18\nConfigDeploymentTag: 21.19\nConfigCrmAccessPrivateKey: 21.22\nConfigAccessApiAddr: 21.23\nConfigCacheDir: 21.24\nConfigSecondaryCrmAccessPrivateKey: 21.25\nConfigThanosRecvAddr: 21.26\nResTagMap: 22\nResTagMapKey: 22.1\nResTagMapValue: 22.2\nResTagMapValueName: 22.2.1\nResTagMapValueOrganization: 22.2.2\nAccessVars: 23\nAccessVarsKey: 23.1\nAccessVarsValue: 23.2\nVmImageVersion: 24\nDeployment: 26\nInfraApiAccess: 27\nInfraConfig: 28\nInfraConfigExternalNetworkName: 28.1\nInfraConfigFlavorName: 28.2\nChefClientKey: 29\nChefClientKeyKey: 29.1\nChefClientKeyValue: 29.2\nMaintenanceState: 30\nOverridePolicyContainerVersion: 31\nVmPool: 32\nCrmAccessPublicKey: 33\nCrmAccessKeyUpgradeRequired: 34\nCreatedAt: 35\nCreatedAtSeconds: 35.1\nCreatedAtNanos: 35.2\nUpdatedAt: 36\nUpdatedAtSeconds: 36.1\nUpdatedAtNanos: 36.2\nTrustPolicy: 37\nTrustPolicyState: 38\nResourceQuotas: 39\nResourceQuotasName: 39.1\nResourceQuotasValue: 39.2\nResourceQuotasAlertThreshold: 39.3\nDefaultResourceAlertThreshold: 40\nHostController: 41\nKafkaCluster: 42\nKafkaUser: 43\nKafkaPassword: 44\nGpuConfig: 45\nGpuConfigDriver: 45.1\nGpuConfigDriverName: 45.1.1\nGpuConfigDriverOrganization: 45.1.2\nGpuConfigProperties: 45.2\nGpuConfigPropertiesKey: 45.2.1\nGpuConfigPropertiesValue: 45.2.2\nGpuConfigLicenseConfig: 45.3\nGpuConfigLicenseConfigMd5Sum: 45.4\nEnableDefaultServerlessCluster: 46\nAllianceOrgs: 47\nSingleKubernetesClusterOwner: 48\nDeletePrepare: 49\nPlatformHighAvailability: 50\nSecondaryCrmAccessPublicKey: 51\nSecondaryCrmAccessKeyUpgradeRequired: 52\nSecondaryNotifySrvAddr: 53\nDnsLabel: 54\nRootLbFqdn: 55\nFederationConfig: 56\nFederationConfigFederationName: 56.1\nFederationConfigSelfFederationId: 56.2\nFederationConfigPartnerFederationId: 56.3\nFederationConfigZoneCountryCode: 56.4\nFederationConfigPartnerFederationAddr: 56.5\nLicenseConfigStoragePath: 57\n```",
        "tags": [
          "Cloudlet"
        ],
        "summary": "Update Cloudlet",
        "operationId": "UpdateCloudlet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Cloudlet": {
                  "description": "Cloudlet in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "access_vars": {
                      "description": "Variables required to access cloudlet",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "AccessVars"
                    },
                    "alliance_orgs": {
                      "description": "This cloudlet will be treated as directly connected to these additional operator organizations for the purposes of FindCloudlet",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "AllianceOrgs"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "default_resource_alert_threshold": {
                      "description": "Default resource alert threshold percentage",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "DefaultResourceAlertThreshold"
                    },
                    "enable_default_serverless_cluster": {
                      "description": "Enable experimental default multitenant (serverless) cluster",
                      "type": "boolean",
                      "x-go-name": "EnableDefaultServerlessCluster"
                    },
                    "env_var": {
                      "description": "Single Key-Value pair of env var to be passed to CRM",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "EnvVar"
                    },
                    "gpu_config": {
                      "description": "GPU Configuration associated with cloudlet",
                      "type": "object",
                      "properties": {
                        "driver": {
                          "description": "GPU driver key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the driver",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization to which the driver belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "Driver"
                        },
                        "license_config": {
                          "description": "Cloudlet specific license config to setup license (will be stored in secure storage)",
                          "type": "string",
                          "x-go-name": "LicenseConfig"
                        },
                        "properties": {
                          "description": "Properties to identify specifics of GPU",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "x-go-name": "Properties"
                        }
                      },
                      "x-go-name": "GpuConfig"
                    },
                    "ip_support": {
                      "description": "Type of IP support provided by Cloudlet (see IpSupport)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/IpSupport"
                        }
                      ],
                      "x-go-name": "IpSupport"
                    },
                    "kafka_cluster": {
                      "description": "Operator provided kafka cluster endpoint to push events to",
                      "type": "string",
                      "x-go-name": "KafkaCluster"
                    },
                    "kafka_password": {
                      "description": "Password for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaPassword"
                    },
                    "kafka_user": {
                      "description": "Username for kafka SASL/PLAIN authentification, stored securely in secret storage and never visible externally",
                      "type": "string",
                      "x-go-name": "KafkaUser"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "federated_organization": {
                          "description": "Federated operator organization who shared this cloudlet",
                          "type": "string",
                          "x-go-name": "FederatedOrganization"
                        },
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "location": {
                      "description": "Location of the Cloudlet site",
                      "type": "object",
                      "properties": {
                        "altitude": {
                          "description": "On android only lat and long are guaranteed to be supplied\nAltitude in meters",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Altitude"
                        },
                        "latitude": {
                          "description": "Latitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Latitude"
                        },
                        "longitude": {
                          "description": "Longitude in WGS 84 coordinates",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "Longitude"
                        }
                      },
                      "x-go-name": "Location"
                    },
                    "maintenance_state": {
                      "description": "State for maintenance",
                      "allOf": [
                        {
                          "$ref": "#/definitions/MaintenanceState"
                        }
                      ],
                      "x-go-name": "MaintenanceState"
                    },
                    "notify_srv_addr": {
                      "description": "Address for the CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "NotifySrvAddr"
                    },
                    "num_dynamic_ips": {
                      "description": "Number of dynamic IPs available for dynamic IP support",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "NumDynamicIps"
                    },
                    "platform_high_availability": {
                      "description": "Enable platform H/A",
                      "type": "boolean",
                      "x-go-name": "PlatformHighAvailability"
                    },
                    "secondary_notify_srv_addr": {
                      "description": "Address for the secondary CRM notify listener to run on",
                      "type": "string",
                      "x-go-name": "SecondaryNotifySrvAddr"
                    },
                    "single_kubernetes_cluster_owner": {
                      "description": "For single kubernetes cluster cloudlet platforms, cluster is owned by this organization instead of multi-tenant",
                      "type": "string",
                      "x-go-name": "SingleKubernetesClusterOwner"
                    },
                    "static_ips": {
                      "description": "List of static IPs for static IP support",
                      "type": "string",
                      "x-go-name": "StaticIps"
                    },
                    "time_limits": {
                      "description": "time limits which override global settings if non-zero",
                      "type": "object",
                      "properties": {
                        "create_app_inst_timeout": {
                          "description": "Override default max time to create an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateAppInstTimeout"
                        },
                        "create_cluster_inst_timeout": {
                          "description": "Override default max time to create a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "CreateClusterInstTimeout"
                        },
                        "delete_app_inst_timeout": {
                          "description": "Override default max time to delete an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteAppInstTimeout"
                        },
                        "delete_cluster_inst_timeout": {
                          "description": "Override default max time to delete a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "DeleteClusterInstTimeout"
                        },
                        "update_app_inst_timeout": {
                          "description": "Override default max time to update an app instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateAppInstTimeout"
                        },
                        "update_cluster_inst_timeout": {
                          "description": "Override default max time to update a cluster instance (duration)",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "UpdateClusterInstTimeout"
                        }
                      },
                      "x-go-name": "TimeLimits"
                    },
                    "trust_policy": {
                      "description": "Optional Trust Policy",
                      "type": "string",
                      "x-go-name": "TrustPolicy"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateCloudletPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `CloudletPool.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nCloudlets: 3\nCloudletsOrganization: 3.1\nCloudletsName: 3.2\nCloudletsFederatedOrganization: 3.3\nCreatedAt: 4\nCreatedAtSeconds: 4.1\nCreatedAtNanos: 4.2\nUpdatedAt: 5\nUpdatedAtSeconds: 5.1\nUpdatedAtNanos: 5.2\nDeletePrepare: 6\n```",
        "tags": [
          "CloudletPool"
        ],
        "summary": "Update a CloudletPool",
        "operationId": "UpdateCloudletPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "CloudletPool": {
                  "description": "CloudletPool in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "CloudletPool key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "CloudletPool Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization this pool belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateClusterInst": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates an instance of a Cluster deployed on a Cloudlet.\nThe following values should be added to `ClusterInst.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyClusterKey: 2.1\nKeyClusterKeyName: 2.1.1\nKeyCloudletKey: 2.2\nKeyCloudletKeyOrganization: 2.2.1\nKeyCloudletKeyName: 2.2.2\nKeyCloudletKeyFederatedOrganization: 2.2.3\nKeyOrganization: 2.3\nFlavor: 3\nFlavorName: 3.1\nLiveness: 9\nAuto: 10\nState: 4\nErrors: 5\nCrmOverride: 6\nIpAccess: 7\nAllocatedIp: 8\nNodeFlavor: 11\nDeployment: 15\nNumMasters: 13\nNumNodes: 14\nExternalVolumeSize: 17\nAutoScalePolicy: 18\nAvailabilityZone: 19\nImageName: 20\nReservable: 21\nReservedBy: 22\nSharedVolumeSize: 23\nMasterNodeFlavor: 25\nSkipCrmCleanupOnFailure: 26\nOptRes: 27\nResources: 28\nResourcesVms: 28.1\nResourcesVmsName: 28.1.1\nResourcesVmsType: 28.1.2\nResourcesVmsStatus: 28.1.3\nResourcesVmsInfraFlavor: 28.1.4\nResourcesVmsIpaddresses: 28.1.5\nResourcesVmsIpaddressesExternalIp: 28.1.5.1\nResourcesVmsIpaddressesInternalIp: 28.1.5.2\nResourcesVmsContainers: 28.1.6\nResourcesVmsContainersName: 28.1.6.1\nResourcesVmsContainersType: 28.1.6.2\nResourcesVmsContainersStatus: 28.1.6.3\nResourcesVmsContainersClusterip: 28.1.6.4\nResourcesVmsContainersRestarts: 28.1.6.5\nCreatedAt: 29\nCreatedAtSeconds: 29.1\nCreatedAtNanos: 29.2\nUpdatedAt: 30\nUpdatedAtSeconds: 30.1\nUpdatedAtNanos: 30.2\nReservationEndedAt: 31\nReservationEndedAtSeconds: 31.1\nReservationEndedAtNanos: 31.2\nMultiTenant: 32\nNetworks: 33\nDeletePrepare: 34\nDnsLabel: 35\nFqdn: 36\n```",
        "tags": [
          "ClusterInst"
        ],
        "summary": "Update Cluster Instance",
        "operationId": "UpdateClusterInst",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "ClusterInst": {
                  "description": "ClusterInst in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "auto_scale_policy": {
                      "description": "Auto scale policy name",
                      "type": "string",
                      "x-go-name": "AutoScalePolicy"
                    },
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "key": {
                      "description": "Unique key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "multi_tenant": {
                      "description": "Multi-tenant kubernetes cluster",
                      "type": "boolean",
                      "x-go-name": "MultiTenant"
                    },
                    "num_nodes": {
                      "description": "Number of k8s nodes (In case of docker deployment, this field is not required)",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "NumNodes"
                    },
                    "skip_crm_cleanup_on_failure": {
                      "description": "Prevents cleanup of resources on failure within CRM, used for diagnostic purposes",
                      "type": "boolean",
                      "x-go-name": "SkipCrmCleanupOnFailure"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateFlavor": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `Flavor.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyName: 2.1\nRam: 3\nVcpus: 4\nDisk: 5\nOptResMap: 6\nOptResMapKey: 6.1\nOptResMapValue: 6.2\nDeletePrepare: 7\n```",
        "tags": [
          "Flavor"
        ],
        "summary": "Update a Flavor",
        "operationId": "UpdateFlavor",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Flavor": {
                  "description": "Flavor in region",
                  "type": "object",
                  "properties": {
                    "disk": {
                      "description": "Amount of disk space in gigabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Disk"
                    },
                    "key": {
                      "description": "Unique key for the new flavor.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Flavor name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "opt_res_map": {
                      "description": "Optional Resources request, key = gpu\nform: $resource=$kind:[$alias]$count ex: optresmap=gpu=vgpu:nvidia-63:1",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "OptResMap"
                    },
                    "ram": {
                      "description": "RAM in megabytes",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Ram"
                    },
                    "vcpus": {
                      "description": "Number of virtual CPUs",
                      "type": "integer",
                      "format": "uint64",
                      "x-go-name": "Vcpus"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateFlowRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `FlowRateLimitSettings.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyFlowSettingsName: 2.1\nKeyRateLimitKey: 2.2\nKeyRateLimitKeyApiName: 2.2.1\nKeyRateLimitKeyApiEndpointType: 2.2.2\nKeyRateLimitKeyRateLimitTarget: 2.2.3\nSettings: 3\nSettingsFlowAlgorithm: 3.1\nSettingsReqsPerSecond: 3.2\nSettingsBurstSize: 3.3\n```",
        "tags": [
          "FlowRateLimitSettings"
        ],
        "summary": "Update Flow RateLimit settings for an API endpoint and target",
        "operationId": "UpdateFlowRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "FlowRateLimitSettings": {
                  "description": "FlowRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "flow_settings_name": {
                          "description": "Unique name for FlowRateLimitSettings (there can be multiple FlowSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "FlowSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "FlowSettings",
                      "type": "object",
                      "properties": {
                        "burst_size": {
                          "description": "Burst size for flow rate limiting (required for TokenBucketAlgorithm)",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "BurstSize"
                        },
                        "flow_algorithm": {
                          "description": "Flow Rate Limit algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/FlowRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "FlowAlgorithm"
                        },
                        "reqs_per_second": {
                          "description": "Requests per second for flow rate limiting",
                          "type": "number",
                          "format": "double",
                          "x-go-name": "ReqsPerSecond"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateGPUDriver": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates GPU driver config.\nThe following values should be added to `GPUDriver.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyName: 2.1\nKeyOrganization: 2.2\nBuilds: 3\nBuildsName: 3.1\nBuildsDriverPath: 3.2\nBuildsDriverPathCreds: 3.3\nBuildsOperatingSystem: 3.4\nBuildsKernelVersion: 3.5\nBuildsHypervisorInfo: 3.6\nBuildsMd5Sum: 3.7\nBuildsStoragePath: 3.8\nLicenseConfig: 4\nLicenseConfigMd5Sum: 5\nProperties: 6\nPropertiesKey: 6.1\nPropertiesValue: 6.2\nState: 7\nIgnoreState: 8\nDeletePrepare: 9\nStorageBucketName: 10\nLicenseConfigStoragePath: 11\n```",
        "tags": [
          "GPUDriver"
        ],
        "summary": "Update GPU Driver",
        "operationId": "UpdateGPUDriver",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "GPUDriver": {
                  "description": "GPUDriver in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the driver",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization to which the driver belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "license_config": {
                      "description": "License config to setup license (will be stored in secure storage)",
                      "type": "string",
                      "x-go-name": "LicenseConfig"
                    },
                    "properties": {
                      "description": "Additional properties associated with GPU driver build",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Properties",
                      "example": "license server information, driver release date, etc"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateMaxReqsRateLimitSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `MaxReqsRateLimitSettings.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyMaxReqsSettingsName: 2.1\nKeyRateLimitKey: 2.2\nKeyRateLimitKeyApiName: 2.2.1\nKeyRateLimitKeyApiEndpointType: 2.2.2\nKeyRateLimitKeyRateLimitTarget: 2.2.3\nSettings: 3\nSettingsMaxReqsAlgorithm: 3.1\nSettingsMaxRequests: 3.2\nSettingsInterval: 3.3\n```",
        "tags": [
          "MaxReqsRateLimitSettings"
        ],
        "summary": "Update MaxReqs RateLimit settings for an API endpoint and target",
        "operationId": "UpdateMaxReqsRateLimitSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "MaxReqsRateLimitSettings": {
                  "description": "MaxReqsRateLimitSettings in region",
                  "type": "object",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "max_reqs_settings_name": {
                          "description": "Unique name for MaxReqsRateLimitSettings (there can be multiple MaxReqsSettings per RateLimitSettingsKey)",
                          "type": "string",
                          "x-go-name": "MaxReqsSettingsName"
                        },
                        "rate_limit_key": {
                          "description": "Key that identifies api and rate limit target for settings",
                          "type": "object",
                          "properties": {
                            "api_endpoint_type": {
                              "description": "API Endpoint type",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ApiEndpointType"
                                }
                              ],
                              "x-go-name": "ApiEndpointType"
                            },
                            "api_name": {
                              "description": "Name of API (eg. CreateApp or RegisterClient) (Use \"Global\" if not a specific API)",
                              "type": "string",
                              "x-go-name": "ApiName"
                            },
                            "rate_limit_target": {
                              "description": "Target to rate limit",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/RateLimitTarget"
                                }
                              ],
                              "x-go-name": "RateLimitTarget"
                            }
                          },
                          "x-go-name": "RateLimitKey"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "settings": {
                      "description": "MaxReqsSettings",
                      "type": "object",
                      "properties": {
                        "interval": {
                          "description": "Time interval",
                          "allOf": [
                            {
                              "$ref": "#/definitions/Duration"
                            }
                          ],
                          "x-go-name": "Interval"
                        },
                        "max_reqs_algorithm": {
                          "description": "MaxReqs Rate Limit Algorithm",
                          "allOf": [
                            {
                              "$ref": "#/definitions/MaxReqsRateLimitAlgorithm"
                            }
                          ],
                          "x-go-name": "MaxReqsAlgorithm"
                        },
                        "max_requests": {
                          "description": "Maximum number of requests for the given Interval",
                          "type": "integer",
                          "format": "int64",
                          "x-go-name": "MaxRequests"
                        }
                      },
                      "x-go-name": "Settings"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateNetwork": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `Network.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyCloudletKey: 2.1\nKeyCloudletKeyOrganization: 2.1.1\nKeyCloudletKeyName: 2.1.2\nKeyCloudletKeyFederatedOrganization: 2.1.3\nKeyName: 2.2\nRoutes: 3\nRoutesDestinationCidr: 3.1\nRoutesNextHopIp: 3.2\nConnectionType: 4\nDeletePrepare: 5\n```",
        "tags": [
          "Network"
        ],
        "summary": "Update a Network",
        "operationId": "UpdateNetwork",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Network": {
                  "description": "Network in region",
                  "type": "object",
                  "properties": {
                    "connection_type": {
                      "description": "Network connection type",
                      "allOf": [
                        {
                          "$ref": "#/definitions/NetworkConnectionType"
                        }
                      ],
                      "x-go-name": "ConnectionType"
                    },
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Cloudlet that this network can be provisioned on",
                          "type": "object",
                          "properties": {
                            "federated_organization": {
                              "description": "Federated operator organization who shared this cloudlet",
                              "type": "string",
                              "x-go-name": "FederatedOrganization"
                            },
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "name": {
                          "description": "Network Name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateResTagTable": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `ResTagTable.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyName: 2.1\nKeyOrganization: 2.2\nTags: 3\nTagsKey: 3.1\nTagsValue: 3.2\nAzone: 4\nDeletePrepare: 5\n```",
        "tags": [
          "ResTagTable"
        ],
        "summary": "Update TagTable",
        "operationId": "UpdateResTagTable",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ResTagTable": {
                  "description": "ResTagTable in region",
                  "type": "object",
                  "properties": {
                    "azone": {
                      "description": "Availability zone(s) of resource if required",
                      "type": "string",
                      "x-go-name": "Azone"
                    },
                    "key": {
                      "description": "Resource tags table key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Resource Table Name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Operator organization of the cloudlet site.",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "tags": {
                      "description": "One or more string tags",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateSettings": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `Settings.fields` field array to specify which fields will be updated.\n```\nShepherdMetricsCollectionInterval: 2\nShepherdAlertEvaluationInterval: 20\nShepherdMetricsScrapeInterval: 40\nShepherdHealthCheckRetries: 3\nShepherdHealthCheckInterval: 4\nAutoDeployIntervalSec: 5\nAutoDeployOffsetSec: 6\nAutoDeployMaxIntervals: 7\nCreateAppInstTimeout: 8\nUpdateAppInstTimeout: 9\nDeleteAppInstTimeout: 10\nCreateClusterInstTimeout: 11\nUpdateClusterInstTimeout: 12\nDeleteClusterInstTimeout: 13\nMasterNodeFlavor: 14\nMaxTrackedDmeClients: 16\nChefClientInterval: 17\nInfluxDbMetricsRetention: 18\nCloudletMaintenanceTimeout: 19\nUpdateVmPoolTimeout: 21\nUpdateTrustPolicyTimeout: 22\nDmeApiMetricsCollectionInterval: 23\nEdgeEventsMetricsCollectionInterval: 24\nCleanupReservableAutoClusterIdletime: 25\nInfluxDbCloudletUsageMetricsRetention: 26\nCreateCloudletTimeout: 27\nUpdateCloudletTimeout: 28\nLocationTileSideLengthKm: 29\nEdgeEventsMetricsContinuousQueriesCollectionIntervals: 30\nEdgeEventsMetricsContinuousQueriesCollectionIntervalsInterval: 30.1\nEdgeEventsMetricsContinuousQueriesCollectionIntervalsRetention: 30.2\nInfluxDbDownsampledMetricsRetention: 31\nInfluxDbEdgeEventsMetricsRetention: 32\nAppinstClientCleanupInterval: 33\nClusterAutoScaleAveragingDurationSec: 34\nClusterAutoScaleRetryDelay: 35\nAlertPolicyMinTriggerTime: 36\nDisableRateLimit: 37\nRateLimitMaxTrackedIps: 39\nResourceSnapshotThreadInterval: 41\nPlatformHaInstancePollInterval: 42\nPlatformHaInstanceActiveExpireTime: 43\n```",
        "tags": [
          "Settings"
        ],
        "summary": "Update settings",
        "operationId": "UpdateSettings",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Settings": {
                  "description": "Settings in region",
                  "type": "object",
                  "properties": {
                    "alert_policy_min_trigger_time": {
                      "description": "Minimmum trigger time for alert policies",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "AlertPolicyMinTriggerTime"
                    },
                    "appinst_client_cleanup_interval": {
                      "description": "AppInstClient cleanup thread run interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "AppinstClientCleanupInterval"
                    },
                    "auto_deploy_interval_sec": {
                      "description": "Auto Provisioning Stats push and analysis interval (seconds)",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "AutoDeployIntervalSec"
                    },
                    "auto_deploy_max_intervals": {
                      "description": "Auto Provisioning Policy max allowed intervals",
                      "type": "integer",
                      "format": "uint32",
                      "x-go-name": "AutoDeployMaxIntervals"
                    },
                    "auto_deploy_offset_sec": {
                      "description": "Auto Provisioning analysis offset from interval (seconds)",
                      "type": "number",
                      "format": "double",
                      "x-go-name": "AutoDeployOffsetSec"
                    },
                    "chef_client_interval": {
                      "description": "Default chef client interval (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ChefClientInterval"
                    },
                    "cleanup_reservable_auto_cluster_idletime": {
                      "description": "Idle reservable ClusterInst clean up time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CleanupReservableAutoClusterIdletime"
                    },
                    "cloudlet_maintenance_timeout": {
                      "description": "Default Cloudlet Maintenance timeout (used twice for AutoProv and Cloudlet)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CloudletMaintenanceTimeout"
                    },
                    "cluster_auto_scale_averaging_duration_sec": {
                      "description": "Cluster auto scale averaging duration for stats to avoid spikes (seconds), avoid setting below 30s or it will not capture any measurements to average",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "ClusterAutoScaleAveragingDurationSec"
                    },
                    "cluster_auto_scale_retry_delay": {
                      "description": "Cluster auto scale retry delay if scaling failed",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ClusterAutoScaleRetryDelay"
                    },
                    "create_app_inst_timeout": {
                      "description": "Create AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateAppInstTimeout"
                    },
                    "create_cloudlet_timeout": {
                      "description": "Create Cloudlet timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateCloudletTimeout"
                    },
                    "create_cluster_inst_timeout": {
                      "description": "Create ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "CreateClusterInstTimeout"
                    },
                    "delete_app_inst_timeout": {
                      "description": "Delete AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DeleteAppInstTimeout"
                    },
                    "delete_cluster_inst_timeout": {
                      "description": "Delete ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DeleteClusterInstTimeout"
                    },
                    "disable_rate_limit": {
                      "description": "Disable rate limiting for APIs (default is false)",
                      "type": "boolean",
                      "x-go-name": "DisableRateLimit"
                    },
                    "dme_api_metrics_collection_interval": {
                      "description": "Metrics collection interval for DME API counts (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "DmeApiMetricsCollectionInterval"
                    },
                    "edge_events_metrics_collection_interval": {
                      "description": "Collection interval for edgeevents metrics (latency, device, and custom)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "EdgeEventsMetricsCollectionInterval"
                    },
                    "influx_db_cloudlet_usage_metrics_retention": {
                      "description": "Default influxDB cloudlet usage metrics retention policy (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbCloudletUsageMetricsRetention"
                    },
                    "influx_db_downsampled_metrics_retention": {
                      "description": "Default retention policy for downsampled influx db (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbDownsampledMetricsRetention"
                    },
                    "influx_db_edge_events_metrics_retention": {
                      "description": "Default retention policy for edgeevents metrics influx db (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbEdgeEventsMetricsRetention"
                    },
                    "influx_db_metrics_retention": {
                      "description": "Default influxDB metrics retention policy (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "InfluxDbMetricsRetention"
                    },
                    "location_tile_side_length_km": {
                      "description": "Length of location tiles side for latency metrics (km)",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "LocationTileSideLengthKm"
                    },
                    "master_node_flavor": {
                      "description": "Default flavor for k8s master VM and \u003e 0  workers",
                      "type": "string",
                      "x-go-name": "MasterNodeFlavor"
                    },
                    "max_tracked_dme_clients": {
                      "description": "Max DME clients to be tracked at the same time.",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "MaxTrackedDmeClients"
                    },
                    "platform_ha_instance_active_expire_time": {
                      "description": "Platform HA instance active time",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "PlatformHaInstanceActiveExpireTime"
                    },
                    "platform_ha_instance_poll_interval": {
                      "description": "Platform HA instance poll interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "PlatformHaInstancePollInterval"
                    },
                    "rate_limit_max_tracked_ips": {
                      "description": "Maximum number of IPs to track for rate limiting",
                      "type": "integer",
                      "format": "int64",
                      "x-go-name": "RateLimitMaxTrackedIps"
                    },
                    "resource_snapshot_thread_interval": {
                      "description": "ResourceSnapshot Refresh thread run interval",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ResourceSnapshotThreadInterval"
                    },
                    "shepherd_alert_evaluation_interval": {
                      "description": "Shepherd alert evaluation interval for k8s and docker appInstances (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdAlertEvaluationInterval"
                    },
                    "shepherd_health_check_interval": {
                      "description": "Health Checking probing frequency (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdHealthCheckInterval"
                    },
                    "shepherd_health_check_retries": {
                      "description": "Number of times Shepherd Health Check fails before we mark appInst down",
                      "type": "integer",
                      "format": "int32",
                      "x-go-name": "ShepherdHealthCheckRetries"
                    },
                    "shepherd_metrics_collection_interval": {
                      "description": "Shepherd metrics collection interval for k8s and docker appInstances (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdMetricsCollectionInterval"
                    },
                    "shepherd_metrics_scrape_interval": {
                      "description": "Shepherd metrics scraping interval (how often metrics are pulled by prometheus, vs pushed to Controller by Shepherd collection)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "ShepherdMetricsScrapeInterval"
                    },
                    "update_app_inst_timeout": {
                      "description": "Update AppInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateAppInstTimeout"
                    },
                    "update_cloudlet_timeout": {
                      "description": "Update Cloudlet timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateCloudletTimeout"
                    },
                    "update_cluster_inst_timeout": {
                      "description": "Update ClusterInst timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateClusterInstTimeout"
                    },
                    "update_trust_policy_timeout": {
                      "description": "Update Trust Policy timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateTrustPolicyTimeout"
                    },
                    "update_vm_pool_timeout": {
                      "description": "Update VM pool timeout (duration)",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Duration"
                        }
                      ],
                      "x-go-name": "UpdateVmPoolTimeout"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateTrustPolicy": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `TrustPolicy.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nOutboundSecurityRules: 3\nOutboundSecurityRulesProtocol: 3.1\nOutboundSecurityRulesPortRangeMin: 3.2\nOutboundSecurityRulesPortRangeMax: 3.3\nOutboundSecurityRulesRemoteCidr: 3.4\nDeletePrepare: 4\n```",
        "tags": [
          "TrustPolicy"
        ],
        "summary": "Update a Trust policy",
        "operationId": "UpdateTrustPolicy",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicy": {
                  "description": "TrustPolicy in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique identifier key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Policy name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Name of the organization for the cluster that this policy will apply to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateTrustPolicyException": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The following values should be added to `TrustPolicyException.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyAppKey: 2.1\nKeyAppKeyOrganization: 2.1.1\nKeyAppKeyName: 2.1.2\nKeyAppKeyVersion: 2.1.3\nKeyCloudletPoolKey: 2.2\nKeyCloudletPoolKeyOrganization: 2.2.1\nKeyCloudletPoolKeyName: 2.2.2\nKeyName: 2.3\nState: 3\nOutboundSecurityRules: 4\nOutboundSecurityRulesProtocol: 4.1\nOutboundSecurityRulesPortRangeMin: 4.2\nOutboundSecurityRulesPortRangeMax: 4.3\nOutboundSecurityRulesRemoteCidr: 4.4\n```",
        "tags": [
          "TrustPolicyException"
        ],
        "summary": "Update a Trust Policy Exception, by Operator Organization",
        "operationId": "UpdateTrustPolicyException",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "TrustPolicyException": {
                  "description": "TrustPolicyException in region",
                  "type": "object",
                  "properties": {
                    "key": {
                      "description": "Unique Key composed of App and CloudletPool key",
                      "type": "object",
                      "properties": {
                        "app_key": {
                          "description": "App Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "App name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "App developer organization",
                              "type": "string",
                              "x-go-name": "Organization"
                            },
                            "version": {
                              "description": "App version",
                              "type": "string",
                              "x-go-name": "Version"
                            }
                          },
                          "x-go-name": "AppKey"
                        },
                        "cloudlet_pool_key": {
                          "description": "CloudletPool Key",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "CloudletPool Name",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Name of the organization this pool belongs to",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletPoolKey"
                        },
                        "name": {
                          "description": "TrustPolicyExceptionKey name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "Key"
                    },
                    "state": {
                      "description": "State of the exception within the approval process",
                      "allOf": [
                        {
                          "$ref": "#/definitions/TrustPolicyExceptionState"
                        }
                      ],
                      "x-go-name": "State"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/ctrl/UpdateVMPool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates a VM pools VMs.\nThe following values should be added to `VMPool.fields` field array to specify which fields will be updated.\n```\nKey: 2\nKeyOrganization: 2.1\nKeyName: 2.2\nVms: 3\nVmsName: 3.1\nVmsNetInfo: 3.2\nVmsNetInfoExternalIp: 3.2.1\nVmsNetInfoInternalIp: 3.2.2\nVmsGroupName: 3.3\nVmsState: 3.4\nVmsUpdatedAt: 3.5\nVmsUpdatedAtSeconds: 3.5.1\nVmsUpdatedAtNanos: 3.5.2\nVmsInternalName: 3.6\nVmsFlavor: 3.7\nVmsFlavorName: 3.7.1\nVmsFlavorVcpus: 3.7.2\nVmsFlavorRam: 3.7.3\nVmsFlavorDisk: 3.7.4\nVmsFlavorPropMap: 3.7.5\nVmsFlavorPropMapKey: 3.7.5.1\nVmsFlavorPropMapValue: 3.7.5.2\nState: 4\nErrors: 5\nCrmOverride: 7\nDeletePrepare: 8\n```",
        "tags": [
          "VMPool"
        ],
        "summary": "Update VMPool",
        "operationId": "UpdateVMPool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Region"
              ],
              "properties": {
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "VMPool": {
                  "description": "VMPool in region",
                  "type": "object",
                  "properties": {
                    "crm_override": {
                      "description": "Override actions to CRM",
                      "allOf": [
                        {
                          "$ref": "#/definitions/CRMOverride"
                        }
                      ],
                      "x-go-name": "CrmOverride"
                    },
                    "delete_prepare": {
                      "description": "Preparing to be deleted",
                      "type": "boolean",
                      "x-go-name": "DeletePrepare"
                    },
                    "key": {
                      "description": "VMPool Key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the vmpool",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the vmpool",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "Key"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/events/find": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Find events\nDisplay events based on find filter.",
        "tags": [
          "Events"
        ],
        "operationId": "FindEvents",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "from": {
                  "description": "Start offset if paging through results",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "From"
                },
                "limit": {
                  "description": "Display the last X events",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Limit"
                },
                "match": {
                  "description": "Fields that must match the event",
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "Error substring to match",
                      "type": "string",
                      "x-go-name": "Error"
                    },
                    "failed": {
                      "description": "Failure status on event to match",
                      "type": "boolean",
                      "x-go-name": "Failed"
                    },
                    "names": {
                      "description": "Names of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Names"
                    },
                    "orgs": {
                      "description": "Organizations on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Orgs"
                    },
                    "regions": {
                      "description": "Regions on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Regions"
                    },
                    "tags": {
                      "description": "Tags on events to match",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    },
                    "types": {
                      "description": "Types of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Types"
                    }
                  },
                  "x-go-name": "Match"
                },
                "notmatch": {
                  "description": "Fields that must not match the event",
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "Error substring to match",
                      "type": "string",
                      "x-go-name": "Error"
                    },
                    "failed": {
                      "description": "Failure status on event to match",
                      "type": "boolean",
                      "x-go-name": "Failed"
                    },
                    "names": {
                      "description": "Names of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Names"
                    },
                    "orgs": {
                      "description": "Organizations on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Orgs"
                    },
                    "regions": {
                      "description": "Regions on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Regions"
                    },
                    "tags": {
                      "description": "Tags on events to match",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    },
                    "types": {
                      "description": "Types of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Types"
                    }
                  },
                  "x-go-name": "NotMatch"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/events/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Search events\nDisplay events based on search filter.",
        "tags": [
          "Events"
        ],
        "operationId": "SearchEvents",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "from": {
                  "description": "Start offset if paging through results",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "From"
                },
                "limit": {
                  "description": "Display the last X events",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Limit"
                },
                "match": {
                  "description": "Fields that must match the event",
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "Error substring to match",
                      "type": "string",
                      "x-go-name": "Error"
                    },
                    "failed": {
                      "description": "Failure status on event to match",
                      "type": "boolean",
                      "x-go-name": "Failed"
                    },
                    "names": {
                      "description": "Names of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Names"
                    },
                    "orgs": {
                      "description": "Organizations on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Orgs"
                    },
                    "regions": {
                      "description": "Regions on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Regions"
                    },
                    "tags": {
                      "description": "Tags on events to match",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    },
                    "types": {
                      "description": "Types of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Types"
                    }
                  },
                  "x-go-name": "Match"
                },
                "notmatch": {
                  "description": "Fields that must not match the event",
                  "type": "object",
                  "properties": {
                    "error": {
                      "description": "Error substring to match",
                      "type": "string",
                      "x-go-name": "Error"
                    },
                    "failed": {
                      "description": "Failure status on event to match",
                      "type": "boolean",
                      "x-go-name": "Failed"
                    },
                    "names": {
                      "description": "Names of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Names"
                    },
                    "orgs": {
                      "description": "Organizations on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Orgs"
                    },
                    "regions": {
                      "description": "Regions on events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Regions"
                    },
                    "tags": {
                      "description": "Tags on events to match",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    },
                    "types": {
                      "description": "Types of events to match",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Types"
                    }
                  },
                  "x-go-name": "NotMatch"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/events/terms": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Terms Events\nDisplay events terms.",
        "tags": [
          "Events"
        ],
        "operationId": "TermsEvents",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/app": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display app related metrics.",
        "tags": [
          "DeveloperMetrics"
        ],
        "summary": "App related metrics",
        "operationId": "AppMetrics",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "Application instance to filter for metrics",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Selector": {
                  "description": "Comma separated list of metrics to view. Available metrics: utilization, network, ipusage",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/clientapiusage": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display client api usage related metrics.",
        "tags": [
          "DeveloperMetrics"
        ],
        "summary": "Client api usage related metrics",
        "operationId": "ClientApiUsageMetrics",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "Application instance key for usage",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "DmeCloudlet": {
                  "description": "Cloudlet name where DME is running",
                  "type": "string"
                },
                "DmeCloudletOrg": {
                  "description": "Operator organization where DME is running",
                  "type": "string"
                },
                "Method": {
                  "description": "API call method, one of: FindCloudlet, PlatformFindCloudlet, RegisterClient, VerifyLocation",
                  "type": "string"
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Selector": {
                  "description": "Comma separated list of metrics to view. Available metrics: utilization, network, ipusage",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/clientappusage": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display client app usage related metrics.",
        "tags": [
          "DeveloperMetrics"
        ],
        "summary": "Client app usage related metrics",
        "operationId": "ClientAppUsageMetrics",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "Application instance key for usage",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        },
                        "organization": {
                          "description": "Name of Developer organization that this cluster belongs to",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "DataNetworkType": {
                  "description": "Data network type used by client device. Can be used for selectors: latency",
                  "type": "string"
                },
                "DeviceCarrier": {
                  "description": "Device carrier. Can be used for selectors: latency, deviceinfo",
                  "type": "string"
                },
                "DeviceModel": {
                  "description": "Device model. Can be used for selectors: deviceinfo",
                  "type": "string"
                },
                "DeviceOs": {
                  "description": "Device operating system. Can be used for selectors: deviceinfo",
                  "type": "string"
                },
                "LocationTile": {
                  "description": "Provides the range of GPS coordinates for the location tile/square.\nFormat is: 'LocationUnderLongitude,LocationUnderLatitude_LocationOverLongitude,LocationOverLatitude_LocationTileLength'.\nLocationUnder are the GPS coordinates of the corner closest to (0,0) of the location tile.\nLocationOver are the GPS coordinates of the corner farthest from (0,0) of the location tile.\nLocationTileLength is the length (in kilometers) of one side of the location tile square",
                  "type": "string"
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Selector": {
                  "description": "Comma separated list of metrics to view. Available metrics: utilization, network, ipusage",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/clientcloudletusage": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display client cloudlet usage related metrics.",
        "tags": [
          "DeveloperMetrics"
        ],
        "summary": "Client cloudlet usage related metrics",
        "operationId": "ClientCloudletUsageMetrics",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Cloudlet": {
                  "description": "Cloudlet key for metrics",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "DataNetworkType": {
                  "description": "Data network type used by client device. Can be used for selectors: latency",
                  "type": "string"
                },
                "DeviceCarrier": {
                  "description": "Device carrier. Can be used for selectors: latency, deviceinfo",
                  "type": "string"
                },
                "DeviceModel": {
                  "description": "Device model. Can be used for selectors: deviceinfo",
                  "type": "string"
                },
                "DeviceOs": {
                  "description": "Device operating system. Can be used for selectors: deviceinfo",
                  "type": "string"
                },
                "LocationTile": {
                  "description": "Provides the range of GPS coordinates for the location tile/square.\nFormat is: 'LocationUnderLongitude,LocationUnderLatitude_LocationOverLongitude,LocationOverLatitude_LocationTileLength'.\nLocationUnder are the GPS coordinates of the corner closest to (0,0) of the location tile.\nLocationOver are the GPS coordinates of the corner farthest from (0,0) of the location tile.\nLocationTileLength is the length (in kilometers) of one side of the location tile square",
                  "type": "string"
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Selector": {
                  "description": "Comma separated list of metrics to view. Available metrics: utilization, network, ipusage",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/cloudlet": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display cloudlet related metrics.",
        "tags": [
          "OperatorMetrics"
        ],
        "summary": "Cloudlet related metrics",
        "operationId": "CloudletMetrics",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "Cloudlet": {
                  "description": "Cloudlet key for metrics",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "Name of the cloudlet",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Organization of the cloudlet site",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Selector": {
                  "description": "Comma separated list of metrics to view. Available metrics: utilization, network, ipusage",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/cloudlet/usage": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display cloudlet usage related metrics.",
        "tags": [
          "OperatorMetrics"
        ],
        "summary": "Cloudlet usage related metrics",
        "operationId": "CloudletUsageMetrics",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/metrics/cluster": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Display cluster related metrics.",
        "tags": [
          "DeveloperMetrics"
        ],
        "summary": "Cluster related metrics",
        "operationId": "ClusterMetrics",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ClusterInst": {
                  "description": "Cluster instance key for metrics",
                  "type": "object",
                  "properties": {
                    "cloudlet_key": {
                      "description": "Name of Cloudlet on which the Cluster is instantiated",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "CloudletKey"
                    },
                    "cluster_key": {
                      "description": "Name of Cluster",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Cluster name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "ClusterKey"
                    },
                    "organization": {
                      "description": "Name of Developer organization that this cluster belongs to",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "Selector": {
                  "description": "Comma separated list of metrics to view. Available metrics: utilization, network, ipusage",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/org/create": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create an Organization to access operator/cloudlet APIs.",
        "tags": [
          "Organization"
        ],
        "summary": "Create Organization",
        "operationId": "CreateOrg",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Name"
              ],
              "properties": {
                "Address": {
                  "description": "Organization address",
                  "type": "string"
                },
                "Name": {
                  "description": "Organization name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
                  "type": "string"
                },
                "Phone": {
                  "description": "Organization phone number",
                  "type": "string"
                },
                "PublicImages": {
                  "description": "Images are made available to other organization",
                  "type": "boolean",
                  "readOnly": true
                },
                "Type": {
                  "description": "Organization type: \"developer\" or \"operator\"",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/org/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes an existing Organization.",
        "tags": [
          "Organization"
        ],
        "summary": "Delete Organization",
        "operationId": "DeleteOrg",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Name"
              ],
              "properties": {
                "Name": {
                  "description": "Organization name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/org/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Displays existing Organizations in which you are authorized to access.",
        "tags": [
          "Organization"
        ],
        "summary": "Show Organizations",
        "operationId": "ShowOrg",
        "responses": {
          "200": {
            "$ref": "#/responses/listOrgs"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/org/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "API to update an existing Organization.",
        "tags": [
          "Organization"
        ],
        "summary": "Update Organization",
        "operationId": "UpdateOrg",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Name"
              ],
              "properties": {
                "Address": {
                  "description": "Organization address",
                  "type": "string"
                },
                "Name": {
                  "description": "Organization name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
                  "type": "string"
                },
                "Phone": {
                  "description": "Organization phone number",
                  "type": "string"
                },
                "PublicImages": {
                  "description": "Images are made available to other organization",
                  "type": "boolean",
                  "readOnly": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/role/adduser": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Add a role for the organization to the user.",
        "tags": [
          "Role"
        ],
        "summary": "Add User Role",
        "operationId": "AddUserRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "org": {
                  "description": "Organization name",
                  "type": "string",
                  "x-go-name": "Org"
                },
                "role": {
                  "description": "Role which defines the set of permissions",
                  "type": "string",
                  "x-go-name": "Role"
                },
                "username": {
                  "description": "User name",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/role/assignment/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Show roles for the current user.",
        "tags": [
          "Role"
        ],
        "summary": "Show Role Assignment",
        "operationId": "ShowRoleAssignment",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "org": {
                  "description": "Organization name",
                  "type": "string",
                  "x-go-name": "Org"
                },
                "role": {
                  "description": "Role which defines the set of permissions",
                  "type": "string",
                  "x-go-name": "Role"
                },
                "username": {
                  "description": "User name",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listRoles"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/role/perms/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Show permissions associated with each role.",
        "tags": [
          "Role"
        ],
        "summary": "Show Role Permissions",
        "operationId": "ShowRolePerm",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "description": "Action defines what type of action can be performed on a resource",
                  "type": "string",
                  "x-go-name": "Action"
                },
                "resource": {
                  "description": "Resource defines a resource to act upon",
                  "type": "string",
                  "x-go-name": "Resource"
                },
                "role": {
                  "description": "Role defines a collection of permissions, which are resource-action pairs",
                  "type": "string",
                  "x-go-name": "Role"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listPerms"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/role/removeuser": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Remove the role for the organization from the user.",
        "tags": [
          "Role"
        ],
        "summary": "Remove User Role",
        "operationId": "RemoveUserRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "org": {
                  "description": "Organization name",
                  "type": "string",
                  "x-go-name": "Org"
                },
                "role": {
                  "description": "Role which defines the set of permissions",
                  "type": "string",
                  "x-go-name": "Role"
                },
                "username": {
                  "description": "User name",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/role/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Show role names.",
        "tags": [
          "Role"
        ],
        "summary": "Show Role Names",
        "operationId": "ShowRoleNames",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/role/showuser": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Show roles for the organizations the current user can add or remove roles to",
        "tags": [
          "Role"
        ],
        "summary": "Show User Role",
        "operationId": "ShowUserRole",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "org": {
                  "description": "Organization name",
                  "type": "string",
                  "x-go-name": "Org"
                },
                "role": {
                  "description": "Role which defines the set of permissions",
                  "type": "string",
                  "x-go-name": "Role"
                },
                "username": {
                  "description": "User name",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listRoles"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/usage/app": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "App Usage\nDisplay app usage.",
        "tags": [
          "DeveloperUsage"
        ],
        "operationId": "AppUsage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "AppInst": {
                  "description": "Application instance key for usage",
                  "type": "object",
                  "properties": {
                    "app_key": {
                      "description": "App key",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "App name",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "App developer organization",
                          "type": "string",
                          "x-go-name": "Organization"
                        },
                        "version": {
                          "description": "App version",
                          "type": "string",
                          "x-go-name": "Version"
                        }
                      },
                      "x-go-name": "AppKey"
                    },
                    "cluster_inst_key": {
                      "description": "Cluster instance on which this is instantiated",
                      "type": "object",
                      "properties": {
                        "cloudlet_key": {
                          "description": "Name of Cloudlet on which the Cluster is instantiated",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Name of the cloudlet",
                              "type": "string",
                              "x-go-name": "Name"
                            },
                            "organization": {
                              "description": "Organization of the cloudlet site",
                              "type": "string",
                              "x-go-name": "Organization"
                            }
                          },
                          "x-go-name": "CloudletKey"
                        },
                        "cluster_key": {
                          "description": "Name of Cluster",
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "Cluster name",
                              "type": "string",
                              "x-go-name": "Name"
                            }
                          },
                          "x-go-name": "ClusterKey"
                        }
                      },
                      "x-go-name": "ClusterInstKey"
                    }
                  }
                },
                "EndTime": {
                  "description": "Time up to which to display stats",
                  "type": "string",
                  "format": "date-time"
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "StartTime": {
                  "description": "Time to start displaying stats from",
                  "type": "string",
                  "format": "date-time"
                },
                "VmOnly": {
                  "description": "Show only VM-based apps",
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/usage/cloudletpool": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "CloudletPool Usage\nDisplay cloudletpool usage.",
        "tags": [
          "OperatorUsage"
        ],
        "operationId": "CloudletPoolUsage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "CloudletPool": {
                  "description": "Cloudlet pool key for usage",
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "CloudletPool Name",
                      "type": "string",
                      "x-go-name": "Name"
                    },
                    "organization": {
                      "description": "Name of the organization this pool belongs to",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "EndTime": {
                  "description": "Time up to which to display stats",
                  "type": "string",
                  "format": "date-time"
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "ShowVmAppsOnly": {
                  "description": "Show only VM-based apps",
                  "type": "boolean"
                },
                "StartTime": {
                  "description": "Time to start displaying stats from",
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/usage/cluster": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Cluster Usage\nDisplay cluster usage.",
        "tags": [
          "DeveloperUsage"
        ],
        "operationId": "ClusterUsage",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ClusterInst": {
                  "description": "Cluster instances key for usage",
                  "type": "object",
                  "properties": {
                    "cloudlet_key": {
                      "description": "Name of Cloudlet on which the Cluster is instantiated",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Name of the cloudlet",
                          "type": "string",
                          "x-go-name": "Name"
                        },
                        "organization": {
                          "description": "Organization of the cloudlet site",
                          "type": "string",
                          "x-go-name": "Organization"
                        }
                      },
                      "x-go-name": "CloudletKey"
                    },
                    "cluster_key": {
                      "description": "Name of Cluster",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Cluster name",
                          "type": "string",
                          "x-go-name": "Name"
                        }
                      },
                      "x-go-name": "ClusterKey"
                    },
                    "organization": {
                      "description": "Name of Developer organization that this cluster belongs to",
                      "type": "string",
                      "x-go-name": "Organization"
                    }
                  }
                },
                "EndTime": {
                  "description": "Time up to which to display stats",
                  "type": "string",
                  "format": "date-time"
                },
                "Region": {
                  "description": "Region name",
                  "type": "string"
                },
                "StartTime": {
                  "description": "Time to start displaying stats from",
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/user/delete": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes existing user.",
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Name"
              ],
              "properties": {
                "Name": {
                  "description": "User name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/user/show": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Displays existing users to which you are authorized to access.",
        "tags": [
          "User"
        ],
        "summary": "Show Users",
        "operationId": "ShowUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listUsers"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/auth/user/update": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates current user.",
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Log in to the MC to acquire a temporary bearer token for access to other APIs.\nAuthentication can be via a username and password, or an API key ID and API key if created. If two-factor authentication (2FA) is enabled on the account, an additional temporary one-time password (TOTP) from a mobile authenticator will also be required.\n",
        "tags": [
          "Security"
        ],
        "summary": "Login",
        "operationId": "Login",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "apikey": {
                  "description": "API key if logging in using API key",
                  "type": "string",
                  "x-go-name": "ApiKey"
                },
                "apikeyid": {
                  "description": "API key ID if logging in using API key",
                  "type": "string",
                  "x-go-name": "ApiKeyId"
                },
                "password": {
                  "description": "User's password",
                  "type": "string",
                  "x-go-name": "Password"
                },
                "totp": {
                  "description": "Temporary one-time password if 2-factor authentication is enabled",
                  "type": "string",
                  "x-go-name": "TOTP"
                },
                "username": {
                  "description": "User's name or email address",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/authToken"
          },
          "400": {
            "$ref": "#/responses/loginBadRequest"
          }
        }
      }
    },
    "/passwordreset": {
      "post": {
        "description": "This resets your login password.",
        "tags": [
          "Security"
        ],
        "summary": "Reset Login Password",
        "operationId": "PasswdReset",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "token": {
                  "description": "Authentication token",
                  "type": "string",
                  "x-go-name": "Token"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          }
        }
      }
    },
    "/publicconfig": {
      "post": {
        "description": "Show Public Configuration for UI",
        "tags": [
          "Config"
        ],
        "summary": "Show Public Configuration",
        "operationId": "PublicConfig",
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    },
    "/usercreate": {
      "post": {
        "description": "Creates a new user and allows them to access and manage resources.",
        "tags": [
          "User"
        ],
        "summary": "Create User",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "Name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/success"
          },
          "400": {
            "$ref": "#/responses/badRequest"
          },
          "403": {
            "$ref": "#/responses/forbidden"
          },
          "404": {
            "$ref": "#/responses/notFound"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessType": {
      "description": "AccessType indicates how to access the app\n\n0: `ACCESS_TYPE_DEFAULT_FOR_DEPLOYMENT`\n1: `ACCESS_TYPE_DIRECT`\n2: `ACCESS_TYPE_LOAD_BALANCER`",
      "type": "integer",
      "format": "int32",
      "title": "(Deprecated) AccessType",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "ApiEndpointType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CRMOverride": {
      "description": "CRMOverride can be applied to commands that issue requests to the CRM.\nIt should only be used by administrators when bugs have caused the\nController and CRM to get out of sync. It allows commands from the\nController to ignore errors from the CRM, or ignore the CRM completely\n(messages will not be sent to CRM).\n\n0: `NO_OVERRIDE`\n1: `IGNORE_CRM_ERRORS`\n2: `IGNORE_CRM`\n3: `IGNORE_TRANSIENT_STATE`\n4: `IGNORE_CRM_AND_TRANSIENT_STATE`",
      "type": "integer",
      "format": "int32",
      "title": "Overrides default CRM behaviour",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "CloudletState": {
      "type": "integer",
      "format": "int32",
      "title": "CloudletState is the state of the Cloudlet.",
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "DateTime": {
      "description": "DateTime is a time but it serializes to ISO8601 format with millis\nIt knows how to read 3 different variations of a RFC3339 date time.\nMost APIs we encounter want either millisecond or second precision times.\nThis just tries to make it worry-free.",
      "type": "string",
      "format": "date-time",
      "x-go-package": "github.com/go-openapi/strfmt"
    },
    "DeleteType": {
      "description": "DeleteType specifies if AppInst can be auto deleted or not\n\n0: `NO_AUTO_DELETE`\n1: `AUTO_DELETE`",
      "type": "integer",
      "format": "int32",
      "title": "DeleteType",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "Duration": {
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "FlowRateLimitAlgorithm": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "HealthCheck": {
      "description": "Health check status gets set by external, or rootLB health check",
      "type": "integer",
      "format": "int32",
      "title": "Health check status",
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "ImageType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "InfraApiAccess": {
      "description": "InfraApiAccess is the type of access available to Infra API endpoint\n\n0: `DIRECT_ACCESS`\n1: `RESTRICTED_ACCESS`",
      "type": "integer",
      "format": "int32",
      "title": "Infra API Access",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "IpAccess": {
      "description": "IpAccess indicates the type of RootLB that Developer requires for their App\n\n0: `IP_ACCESS_UNKNOWN`\n1: `IP_ACCESS_DEDICATED`\n3: `IP_ACCESS_SHARED`",
      "type": "integer",
      "format": "int32",
      "title": "IpAccess Options",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "IpSupport": {
      "description": "Static IP support indicates a set of static public IPs are available for use, and managed by the Controller. Dynamic indicates the Cloudlet uses a DHCP server to provide public IP addresses, and the controller has no control over which IPs are assigned.\n\n0: `IP_SUPPORT_UNKNOWN`\n1: `IP_SUPPORT_STATIC`\n2: `IP_SUPPORT_DYNAMIC`",
      "type": "integer",
      "format": "int32",
      "title": "Type of public IP support",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "LProto": {
      "description": "LProto indicates which protocol to use for accessing an application on a particular port. This is required by Kubernetes for port mapping.\n\n0: `L_PROTO_UNKNOWN`\n1: `L_PROTO_TCP`\n2: `L_PROTO_UDP`",
      "type": "integer",
      "format": "int32",
      "title": "Layer4 Protocol",
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "Liveness": {
      "description": "Liveness indicates if an object was created statically via an external API call, or dynamically via an internal algorithm.\n\n0: `LIVENESS_UNKNOWN`\n1: `LIVENESS_STATIC`\n2: `LIVENESS_DYNAMIC`\n3: `LIVENESS_AUTOPROV`",
      "type": "integer",
      "format": "int32",
      "title": "Liveness Options",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "MaintenanceState": {
      "description": "Maintenance allows for planned downtimes of Cloudlets.\nThese states involve message exchanges between the Controller,\nthe AutoProv service, and the CRM. Certain states are only set\nby certain actors.",
      "type": "integer",
      "format": "int32",
      "title": "Cloudlet Maintenance States",
      "x-go-package": "github.com/mobiledgex/edge-cloud/d-match-engine/dme-proto"
    },
    "MaxReqsRateLimitAlgorithm": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "NetworkConnectionType": {
      "description": "NetworkConnectionType is the supported list of network types to be optionally added to a cluster instance\n\n0: `UNDEFINED`\n1: `CONNECT_TO_LOAD_BALANCER`\n2: `CONNECT_TO_CLUSTER_NODES`\n3: `CONNECT_TO_ALL`",
      "type": "integer",
      "format": "int32",
      "title": "Network Connection Type",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "OSType": {
      "description": "OSType is the type of the Operator System\n\n0: `Linux`\n1: `Windows`\n20: `Others`",
      "type": "integer",
      "format": "int32",
      "title": "Operating System Type",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "PlatformType": {
      "description": "PlatformType is the supported list of cloudlet types\n\n0: `PLATFORM_TYPE_FAKE`\n1: `PLATFORM_TYPE_DIND`\n2: `PLATFORM_TYPE_OPENSTACK`\n3: `PLATFORM_TYPE_AZURE`\n4: `PLATFORM_TYPE_GCP`\n5: `PLATFORM_TYPE_EDGEBOX`\n6: `PLATFORM_TYPE_FAKEINFRA`\n7: `PLATFORM_TYPE_VSPHERE`\n8: `PLATFORM_TYPE_AWS_EKS`\n9: `PLATFORM_TYPE_VM_POOL`\n10: `PLATFORM_TYPE_AWS_EC2`\n11: `PLATFORM_TYPE_VCD`\n12: `PLATFORM_TYPE_K8S_BARE_METAL`\n13: `PLATFORM_TYPE_KIND`\n14: `PLATFORM_TYPE_KINDINFRA`\n15: `PLATFORM_TYPE_FAKE_SINGLE_CLUSTER`\n16: `PLATFORM_TYPE_FEDERATION`\n17: `PLATFORM_TYPE_FAKE_VM_POOL`",
      "type": "integer",
      "format": "int32",
      "title": "Platform Type",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "PowerState": {
      "description": "Power State of the AppInst\n\n0: `POWER_STATE_UNKNOWN`\n1: `POWER_ON_REQUESTED`\n2: `POWERING_ON`\n3: `POWER_ON`\n4: `POWER_OFF_REQUESTED`\n5: `POWERING_OFF`\n6: `POWER_OFF`\n7: `REBOOT_REQUESTED`\n8: `REBOOTING`\n9: `REBOOT`\n10: `POWER_STATE_ERROR`",
      "type": "integer",
      "format": "int32",
      "title": "Power State",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "QosSessionProfile": {
      "description": "The selected profile name will be included\nas the \"qos\" value in the qos-senf/v1/sessions POST.",
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "RateLimitTarget": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "TrackedState": {
      "description": "TrackedState is used to track the state of an object on a remote node,\ni.e. track the state of a ClusterInst object on the CRM (Cloudlet).\n\n0: `TRACKED_STATE_UNKNOWN`\n1: `NOT_PRESENT`\n2: `CREATE_REQUESTED`\n3: `CREATING`\n4: `CREATE_ERROR`\n5: `READY`\n6: `UPDATE_REQUESTED`\n7: `UPDATING`\n8: `UPDATE_ERROR`\n9: `DELETE_REQUESTED`\n10: `DELETING`\n11: `DELETE_ERROR`\n12: `DELETE_PREPARE`\n13: `CRM_INITOK`\n14: `CREATING_DEPENDENCIES`\n15: `DELETE_DONE`",
      "type": "integer",
      "format": "int32",
      "title": "Tracked States",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "TrustPolicyExceptionState": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "VMState": {
      "description": "VMState is the state of the VM\n\n0: `VM_FREE`\n1: `VM_IN_PROGRESS`\n2: `VM_IN_USE`\n3: `VM_ADD`\n4: `VM_REMOVE`\n5: `VM_UPDATE`\n6: `VM_FORCE_FREE`",
      "type": "integer",
      "format": "int32",
      "title": "VM State",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "VmAppOsType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/mobiledgex/edge-cloud/edgeproto"
    },
    "alert": {
      "description": "Alert alert",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        }
      },
      "x-go-name": "Alert",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "alertGroup": {
      "description": "AlertGroup alert group",
      "type": "object",
      "required": [
        "alerts",
        "labels",
        "receiver"
      ],
      "properties": {
        "alerts": {
          "description": "alerts",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "labels",
              "annotations",
              "endsAt",
              "fingerprint",
              "receivers",
              "startsAt",
              "status",
              "updatedAt"
            ],
            "properties": {
              "annotations": {
                "$ref": "#/definitions/labelSet"
              },
              "endsAt": {
                "description": "ends at",
                "type": "string",
                "format": "date-time",
                "x-go-name": "EndsAt"
              },
              "fingerprint": {
                "description": "fingerprint",
                "type": "string",
                "x-go-name": "Fingerprint"
              },
              "generatorURL": {
                "description": "generator URL\nFormat: uri",
                "type": "string",
                "format": "uri",
                "x-go-name": "GeneratorURL"
              },
              "labels": {
                "$ref": "#/definitions/labelSet"
              },
              "receivers": {
                "description": "receivers",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "name",
                      "type": "string",
                      "x-go-name": "Name"
                    }
                  }
                },
                "x-go-name": "Receivers"
              },
              "startsAt": {
                "description": "starts at",
                "type": "string",
                "format": "date-time",
                "x-go-name": "StartsAt"
              },
              "status": {
                "description": "status",
                "type": "object",
                "required": [
                  "inhibitedBy",
                  "silencedBy",
                  "state"
                ],
                "properties": {
                  "inhibitedBy": {
                    "description": "inhibited by",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-go-name": "InhibitedBy"
                  },
                  "silencedBy": {
                    "description": "silenced by",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-go-name": "SilencedBy"
                  },
                  "state": {
                    "description": "state",
                    "type": "string",
                    "enum": [
                      "[unprocessed active suppressed]"
                    ],
                    "x-go-name": "State"
                  }
                },
                "x-go-name": "Status"
              },
              "updatedAt": {
                "description": "updated at",
                "type": "string",
                "format": "date-time",
                "x-go-name": "UpdatedAt"
              }
            }
          },
          "x-go-name": "Alerts"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receiver": {
          "description": "receiver",
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "name",
              "type": "string",
              "x-go-name": "Name"
            }
          },
          "x-go-name": "Receiver"
        }
      },
      "x-go-name": "AlertGroup",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "alertGroups": {
      "description": "AlertGroups alert groups",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "alerts",
          "labels",
          "receiver"
        ],
        "properties": {
          "alerts": {
            "description": "alerts",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "labels",
                "annotations",
                "endsAt",
                "fingerprint",
                "receivers",
                "startsAt",
                "status",
                "updatedAt"
              ],
              "properties": {
                "annotations": {
                  "$ref": "#/definitions/labelSet"
                },
                "endsAt": {
                  "description": "ends at",
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "EndsAt"
                },
                "fingerprint": {
                  "description": "fingerprint",
                  "type": "string",
                  "x-go-name": "Fingerprint"
                },
                "generatorURL": {
                  "description": "generator URL\nFormat: uri",
                  "type": "string",
                  "format": "uri",
                  "x-go-name": "GeneratorURL"
                },
                "labels": {
                  "$ref": "#/definitions/labelSet"
                },
                "receivers": {
                  "description": "receivers",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name",
                        "type": "string",
                        "x-go-name": "Name"
                      }
                    }
                  },
                  "x-go-name": "Receivers"
                },
                "startsAt": {
                  "description": "starts at",
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "StartsAt"
                },
                "status": {
                  "description": "status",
                  "type": "object",
                  "required": [
                    "inhibitedBy",
                    "silencedBy",
                    "state"
                  ],
                  "properties": {
                    "inhibitedBy": {
                      "description": "inhibited by",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "InhibitedBy"
                    },
                    "silencedBy": {
                      "description": "silenced by",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "SilencedBy"
                    },
                    "state": {
                      "description": "state",
                      "type": "string",
                      "enum": [
                        "[unprocessed active suppressed]"
                      ],
                      "x-go-name": "State"
                    }
                  },
                  "x-go-name": "Status"
                },
                "updatedAt": {
                  "description": "updated at",
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "UpdatedAt"
                }
              }
            },
            "x-go-name": "Alerts"
          },
          "labels": {
            "$ref": "#/definitions/labelSet"
          },
          "receiver": {
            "description": "receiver",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "name",
                "type": "string",
                "x-go-name": "Name"
              }
            },
            "x-go-name": "Receiver"
          }
        }
      },
      "x-go-name": "AlertGroups",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "alertStatus": {
      "description": "AlertStatus alert status",
      "type": "object",
      "required": [
        "inhibitedBy",
        "silencedBy",
        "state"
      ],
      "properties": {
        "inhibitedBy": {
          "description": "inhibited by",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InhibitedBy"
        },
        "silencedBy": {
          "description": "silenced by",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SilencedBy"
        },
        "state": {
          "description": "state",
          "type": "string",
          "enum": [
            "[unprocessed active suppressed]"
          ],
          "x-go-name": "State"
        }
      },
      "x-go-name": "AlertStatus",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "alertmanagerConfig": {
      "description": "AlertmanagerConfig alertmanager config",
      "type": "object",
      "required": [
        "original"
      ],
      "properties": {
        "original": {
          "description": "original",
          "type": "string",
          "x-go-name": "Original"
        }
      },
      "x-go-name": "AlertmanagerConfig",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "alertmanagerStatus": {
      "description": "AlertmanagerStatus alertmanager status",
      "type": "object",
      "required": [
        "cluster",
        "config",
        "uptime",
        "versionInfo"
      ],
      "properties": {
        "cluster": {
          "description": "cluster",
          "type": "object",
          "required": [
            "status"
          ],
          "properties": {
            "name": {
              "description": "name",
              "type": "string",
              "x-go-name": "Name"
            },
            "peers": {
              "description": "peers",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "address",
                  "name"
                ],
                "properties": {
                  "address": {
                    "description": "address",
                    "type": "string",
                    "x-go-name": "Address"
                  },
                  "name": {
                    "description": "name",
                    "type": "string",
                    "x-go-name": "Name"
                  }
                }
              },
              "x-go-name": "Peers"
            },
            "status": {
              "description": "status",
              "type": "string",
              "enum": [
                "[ready settling disabled]"
              ],
              "x-go-name": "Status"
            }
          },
          "x-go-name": "Cluster"
        },
        "config": {
          "description": "config",
          "type": "object",
          "required": [
            "original"
          ],
          "properties": {
            "original": {
              "description": "original",
              "type": "string",
              "x-go-name": "Original"
            }
          },
          "x-go-name": "Config"
        },
        "uptime": {
          "description": "uptime",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Uptime"
        },
        "versionInfo": {
          "description": "version info",
          "type": "object",
          "required": [
            "branch",
            "buildDate",
            "buildUser",
            "goVersion",
            "revision",
            "version"
          ],
          "properties": {
            "branch": {
              "description": "branch",
              "type": "string",
              "x-go-name": "Branch"
            },
            "buildDate": {
              "description": "build date",
              "type": "string",
              "x-go-name": "BuildDate"
            },
            "buildUser": {
              "description": "build user",
              "type": "string",
              "x-go-name": "BuildUser"
            },
            "goVersion": {
              "description": "go version",
              "type": "string",
              "x-go-name": "GoVersion"
            },
            "revision": {
              "description": "revision",
              "type": "string",
              "x-go-name": "Revision"
            },
            "version": {
              "description": "version",
              "type": "string",
              "x-go-name": "Version"
            }
          },
          "x-go-name": "VersionInfo"
        }
      },
      "x-go-name": "AlertmanagerStatus",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "clusterStatus": {
      "description": "ClusterStatus cluster status",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "peers": {
          "description": "peers",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "address",
              "name"
            ],
            "properties": {
              "address": {
                "description": "address",
                "type": "string",
                "x-go-name": "Address"
              },
              "name": {
                "description": "name",
                "type": "string",
                "x-go-name": "Name"
              }
            }
          },
          "x-go-name": "Peers"
        },
        "status": {
          "description": "status",
          "type": "string",
          "enum": [
            "[ready settling disabled]"
          ],
          "x-go-name": "Status"
        }
      },
      "x-go-name": "ClusterStatus",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "gettableAlert": {
      "description": "GettableAlert gettable alert",
      "type": "object",
      "required": [
        "labels",
        "annotations",
        "endsAt",
        "fingerprint",
        "receivers",
        "startsAt",
        "status",
        "updatedAt"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "fingerprint": {
          "description": "fingerprint",
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "receivers": {
          "description": "receivers",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "name",
                "type": "string",
                "x-go-name": "Name"
              }
            }
          },
          "x-go-name": "Receivers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        },
        "status": {
          "description": "status",
          "type": "object",
          "required": [
            "inhibitedBy",
            "silencedBy",
            "state"
          ],
          "properties": {
            "inhibitedBy": {
              "description": "inhibited by",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "InhibitedBy"
            },
            "silencedBy": {
              "description": "silenced by",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "SilencedBy"
            },
            "state": {
              "description": "state",
              "type": "string",
              "enum": [
                "[unprocessed active suppressed]"
              ],
              "x-go-name": "State"
            }
          },
          "x-go-name": "Status"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "GettableAlert",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "gettableAlerts": {
      "description": "GettableAlerts gettable alerts",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "labels",
          "annotations",
          "endsAt",
          "fingerprint",
          "receivers",
          "startsAt",
          "status",
          "updatedAt"
        ],
        "properties": {
          "annotations": {
            "$ref": "#/definitions/labelSet"
          },
          "endsAt": {
            "description": "ends at",
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndsAt"
          },
          "fingerprint": {
            "description": "fingerprint",
            "type": "string",
            "x-go-name": "Fingerprint"
          },
          "generatorURL": {
            "description": "generator URL\nFormat: uri",
            "type": "string",
            "format": "uri",
            "x-go-name": "GeneratorURL"
          },
          "labels": {
            "$ref": "#/definitions/labelSet"
          },
          "receivers": {
            "description": "receivers",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "name",
                  "type": "string",
                  "x-go-name": "Name"
                }
              }
            },
            "x-go-name": "Receivers"
          },
          "startsAt": {
            "description": "starts at",
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartsAt"
          },
          "status": {
            "description": "status",
            "type": "object",
            "required": [
              "inhibitedBy",
              "silencedBy",
              "state"
            ],
            "properties": {
              "inhibitedBy": {
                "description": "inhibited by",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-go-name": "InhibitedBy"
              },
              "silencedBy": {
                "description": "silenced by",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-go-name": "SilencedBy"
              },
              "state": {
                "description": "state",
                "type": "string",
                "enum": [
                  "[unprocessed active suppressed]"
                ],
                "x-go-name": "State"
              }
            },
            "x-go-name": "Status"
          },
          "updatedAt": {
            "description": "updated at",
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      },
      "x-go-name": "GettableAlerts",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "gettableSilence": {
      "description": "GettableSilence gettable silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt",
        "id",
        "status",
        "updatedAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        },
        "status": {
          "description": "status",
          "type": "object",
          "required": [
            "state"
          ],
          "properties": {
            "state": {
              "description": "state",
              "type": "string",
              "enum": [
                "[expired active pending]"
              ],
              "x-go-name": "State"
            }
          },
          "x-go-name": "Status"
        },
        "updatedAt": {
          "description": "updated at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-name": "GettableSilence",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "gettableSilences": {
      "description": "GettableSilences gettable silences",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "comment",
          "createdBy",
          "endsAt",
          "matchers",
          "startsAt",
          "id",
          "status",
          "updatedAt"
        ],
        "properties": {
          "comment": {
            "description": "comment",
            "type": "string",
            "x-go-name": "Comment"
          },
          "createdBy": {
            "description": "created by",
            "type": "string",
            "x-go-name": "CreatedBy"
          },
          "endsAt": {
            "description": "ends at",
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndsAt"
          },
          "id": {
            "description": "id",
            "type": "string",
            "x-go-name": "ID"
          },
          "matchers": {
            "$ref": "#/definitions/matchers"
          },
          "startsAt": {
            "description": "starts at",
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartsAt"
          },
          "status": {
            "description": "status",
            "type": "object",
            "required": [
              "state"
            ],
            "properties": {
              "state": {
                "description": "state",
                "type": "string",
                "enum": [
                  "[expired active pending]"
                ],
                "x-go-name": "State"
              }
            },
            "x-go-name": "Status"
          },
          "updatedAt": {
            "description": "updated at",
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      },
      "x-go-name": "GettableSilences",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "labelSet": {
      "description": "LabelSet label set",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-name": "LabelSet",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "matcher": {
      "description": "Matcher matcher",
      "type": "object",
      "required": [
        "isRegex",
        "name",
        "value"
      ],
      "properties": {
        "isRegex": {
          "description": "is regex",
          "type": "boolean",
          "x-go-name": "IsRegex"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "description": "value",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-name": "Matcher",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "matchers": {
      "description": "Matchers matchers",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "isRegex",
          "name",
          "value"
        ],
        "properties": {
          "isRegex": {
            "description": "is regex",
            "type": "boolean",
            "x-go-name": "IsRegex"
          },
          "name": {
            "description": "name",
            "type": "string",
            "x-go-name": "Name"
          },
          "value": {
            "description": "value",
            "type": "string",
            "x-go-name": "Value"
          }
        }
      },
      "x-go-name": "Matchers",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "peerStatus": {
      "description": "PeerStatus peer status",
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "description": "address",
          "type": "string",
          "x-go-name": "Address"
        },
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "PeerStatus",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "postableAlert": {
      "description": "PostableAlert postable alert",
      "type": "object",
      "required": [
        "labels"
      ],
      "properties": {
        "annotations": {
          "$ref": "#/definitions/labelSet"
        },
        "endsAt": {
          "description": "ends at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "generatorURL": {
          "description": "generator URL\nFormat: uri",
          "type": "string",
          "format": "uri",
          "x-go-name": "GeneratorURL"
        },
        "labels": {
          "$ref": "#/definitions/labelSet"
        },
        "startsAt": {
          "description": "starts at\nFormat: date-time",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "PostableAlert",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "postableAlerts": {
      "description": "PostableAlerts postable alerts",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "labels"
        ],
        "properties": {
          "annotations": {
            "$ref": "#/definitions/labelSet"
          },
          "endsAt": {
            "description": "ends at\nFormat: date-time",
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndsAt"
          },
          "generatorURL": {
            "description": "generator URL\nFormat: uri",
            "type": "string",
            "format": "uri",
            "x-go-name": "GeneratorURL"
          },
          "labels": {
            "$ref": "#/definitions/labelSet"
          },
          "startsAt": {
            "description": "starts at\nFormat: date-time",
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartsAt"
          }
        }
      },
      "x-go-name": "PostableAlerts",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "postableSilence": {
      "description": "PostableSilence postable silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "id": {
          "description": "id",
          "type": "string",
          "x-go-name": "ID"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "PostableSilence",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "receiver": {
      "description": "Receiver receiver",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-name": "Receiver",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "silence": {
      "description": "Silence silence",
      "type": "object",
      "required": [
        "comment",
        "createdBy",
        "endsAt",
        "matchers",
        "startsAt"
      ],
      "properties": {
        "comment": {
          "description": "comment",
          "type": "string",
          "x-go-name": "Comment"
        },
        "createdBy": {
          "description": "created by",
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "endsAt": {
          "description": "ends at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "EndsAt"
        },
        "matchers": {
          "$ref": "#/definitions/matchers"
        },
        "startsAt": {
          "description": "starts at",
          "type": "string",
          "format": "date-time",
          "x-go-name": "StartsAt"
        }
      },
      "x-go-name": "Silence",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "silenceStatus": {
      "description": "SilenceStatus silence status",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "description": "state",
          "type": "string",
          "enum": [
            "[expired active pending]"
          ],
          "x-go-name": "State"
        }
      },
      "x-go-name": "SilenceStatus",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    },
    "versionInfo": {
      "description": "VersionInfo version info",
      "type": "object",
      "required": [
        "branch",
        "buildDate",
        "buildUser",
        "goVersion",
        "revision",
        "version"
      ],
      "properties": {
        "branch": {
          "description": "branch",
          "type": "string",
          "x-go-name": "Branch"
        },
        "buildDate": {
          "description": "build date",
          "type": "string",
          "x-go-name": "BuildDate"
        },
        "buildUser": {
          "description": "build user",
          "type": "string",
          "x-go-name": "BuildUser"
        },
        "goVersion": {
          "description": "go version",
          "type": "string",
          "x-go-name": "GoVersion"
        },
        "revision": {
          "description": "revision",
          "type": "string",
          "x-go-name": "Revision"
        },
        "version": {
          "description": "version",
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-name": "VersionInfo",
      "x-go-package": "github.com/mobiledgex/edge-cloud-infra/mc/orm/alertmgr/prometheus_structs/models"
    }
  },
  "responses": {
    "authToken": {
      "description": "Authentication Token",
      "schema": {
        "type": "object",
        "properties": {
          "token": {
            "description": "Authentication token",
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "badRequest": {
      "description": "Status Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "forbidden": {
      "description": "Forbidden",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "listBillingOrgs": {
      "description": "List of BillingOrgs",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "Name"
          ],
          "properties": {
            "Address": {
              "description": "Organization address",
              "type": "string"
            },
            "Address2": {
              "description": "Organization address2",
              "type": "string"
            },
            "Children": {
              "description": "Children belonging to this BillingOrganization",
              "type": "string"
            },
            "City": {
              "description": "Organization city",
              "type": "string"
            },
            "Country": {
              "description": "Organization country",
              "type": "string"
            },
            "CreatedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "DeleteInProgress": {
              "description": "Delete of this BillingOrganization is in progress",
              "type": "boolean",
              "readOnly": true
            },
            "Email": {
              "description": "Organization email",
              "type": "string"
            },
            "FirstName": {
              "description": "Billing info first name",
              "type": "string"
            },
            "LastName": {
              "description": "Billing info last name",
              "type": "string"
            },
            "Name": {
              "description": "BillingOrganization name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
              "type": "string"
            },
            "Phone": {
              "description": "Organization phone number",
              "type": "string"
            },
            "PostalCode": {
              "description": "Organization postal code",
              "type": "string"
            },
            "State": {
              "description": "Organization state",
              "type": "string"
            },
            "Type": {
              "description": "Organization type: \"parent\" or \"self\"",
              "type": "string"
            },
            "UpdatedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          }
        }
      }
    },
    "listOrgs": {
      "description": "List of Orgs",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "Name"
          ],
          "properties": {
            "Address": {
              "description": "Organization address",
              "type": "string"
            },
            "CreatedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "DeleteInProgress": {
              "description": "Delete of this organization is in progress",
              "type": "boolean",
              "readOnly": true
            },
            "EdgeboxOnly": {
              "description": "Edgebox only operator organization",
              "type": "boolean",
              "readOnly": true
            },
            "Name": {
              "description": "Organization name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
              "type": "string"
            },
            "Parent": {
              "type": "string",
              "readOnly": true
            },
            "Phone": {
              "description": "Organization phone number",
              "type": "string"
            },
            "PublicImages": {
              "description": "Images are made available to other organization",
              "type": "boolean",
              "readOnly": true
            },
            "Type": {
              "description": "Organization type: \"developer\" or \"operator\"",
              "type": "string"
            },
            "UpdatedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          }
        }
      }
    },
    "listPerms": {
      "description": "List of Permissions",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "description": "Action defines what type of action can be performed on a resource",
              "type": "string",
              "x-go-name": "Action"
            },
            "resource": {
              "description": "Resource defines a resource to act upon",
              "type": "string",
              "x-go-name": "Resource"
            },
            "role": {
              "description": "Role defines a collection of permissions, which are resource-action pairs",
              "type": "string",
              "x-go-name": "Role"
            }
          }
        }
      }
    },
    "listRoles": {
      "description": "List of Roles",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "org": {
              "description": "Organization name",
              "type": "string",
              "x-go-name": "Org"
            },
            "role": {
              "description": "Role which defines the set of permissions",
              "type": "string",
              "x-go-name": "Role"
            },
            "username": {
              "description": "User name",
              "type": "string",
              "x-go-name": "Username"
            }
          }
        }
      }
    },
    "listUsers": {
      "description": "List of Users",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "Name"
          ],
          "properties": {
            "CreatedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "Email": {
              "description": "User email",
              "type": "string"
            },
            "EmailVerified": {
              "description": "Email address has been verified",
              "type": "boolean",
              "readOnly": true
            },
            "EnableTOTP": {
              "description": "Enable or disable temporary one-time passwords for the account",
              "type": "boolean"
            },
            "FailedLogins": {
              "description": "Number of failed login attempts since last successful login",
              "type": "integer",
              "format": "int64"
            },
            "FamilyName": {
              "description": "Family Name",
              "type": "string"
            },
            "GivenName": {
              "description": "Given Name",
              "type": "string"
            },
            "Iter": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "LastFailedLogin": {
              "description": "Last failed login time",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "LastLogin": {
              "description": "Last successful login time",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "Locked": {
              "description": "Account is locked",
              "type": "boolean",
              "readOnly": true
            },
            "Metadata": {
              "description": "Metadata",
              "type": "string"
            },
            "Name": {
              "description": "User name. Can only contain letters, digits, underscore, period, hyphen. It cannot have leading or trailing spaces or period. It cannot start with hyphen",
              "type": "string"
            },
            "Nickname": {
              "description": "Nick Name",
              "type": "string"
            },
            "PassCrackTimeSec": {
              "type": "number",
              "format": "double",
              "readOnly": true
            },
            "Passhash": {
              "type": "string",
              "readOnly": true
            },
            "Picture": {
              "type": "string",
              "readOnly": true
            },
            "Salt": {
              "type": "string",
              "readOnly": true
            },
            "TOTPSharedKey": {
              "type": "string",
              "readOnly": true
            },
            "UpdatedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          }
        }
      }
    },
    "loginBadRequest": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notFound": {
      "description": "Not Found",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "success": {
      "description": "Success",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "description": "Use [login API](#operation/Login) to generate bearer token (JWT) for authorization. Usage format - `Bearer \u003cJWT\u003e`",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Authentication is done by a user name or email plus a password. The login function returns a JSON Web Token (JWT) once authenticated, that should be included with subsequent API calls to authenticate the user. The JWT will expire after a while for security, at which point you may need to log in again.",
      "name": "Security"
    },
    {
      "description": "Users can be assigned roles for Organizations, allowing them to view or manage resources associated with the Organizations.",
      "name": "User"
    },
    {
      "description": "Roles can be assigned to users for Organizations, allowing the users to view or manage resources associated with the Organizations.",
      "name": "Role"
    },
    {
      "description": "Organizations group a set of resources together, for example Apps, App Instances, or Cloudlets. Users given a role in an Organization can operate on those resources in the scope provided by their role.",
      "name": "Organization"
    },
    {
      "description": "OperatorCode maps a carrier code to an Operator organization name.",
      "name": "OperatorCode"
    },
    {
      "description": "Flavors define the compute, memory and storage capacity of computing instances. To put it simply, a flavor is an available hardware configuration for a server. It defines the size of a virtual server that can be launched.",
      "name": "Flavor"
    },
    {
      "description": "AutoProvPolicy defines the automated provisioning policy.",
      "name": "AutoProvPolicy"
    },
    {
      "description": "AutoProvPolicy belonging to an app.",
      "name": "AppAutoProvPolicy"
    },
    {
      "description": "AutoScalePolicy defines when and how ClusterInsts will have their nodes scaled up or down.",
      "name": "AutoScalePolicy"
    },
    {
      "description": "PrivacyPolicy defines security restrictions for cluster instances nodes scaled up or down.",
      "name": "PrivacyPolicy"
    },
    {
      "description": "AutoProvPolicyCloudlet belong to a cloudlet.",
      "name": "AutoProvPolicyCloudlet"
    },
    {
      "description": "Pool of VMs to be part of a Cloudlet.",
      "name": "VMPool"
    },
    {
      "description": "Members belong to a VMPool.",
      "name": "VMPoolMember"
    },
    {
      "description": "Cloudlet is a set of compute resources at a particular location, provided by an Operator.",
      "name": "Cloudlet"
    },
    {
      "description": "CloudletPool defines a pool of Cloudlets that have restricted access.",
      "name": "CloudletPool"
    },
    {
      "description": "Member belong to a cloudlet pool.",
      "name": "CloudletPoolMember"
    },
    {
      "description": "ClusterInst is an instance of a Cluster on a Cloudlet. It is defined by a Cluster, Cloudlet, and Developer key.",
      "name": "ClusterInst"
    },
    {
      "description": "Provides information about the developer's application.",
      "name": "App"
    },
    {
      "description": "AppInst is an instance of an App on a Cloudlet where it is defined by an App plus a ClusterInst key.",
      "name": "AppInst"
    },
    {
      "description": "Infra properties used to setup cloudlet.",
      "name": "CloudletProps"
    },
    {
      "description": "Cloudlet resouce mapping.",
      "name": "CloudletResMap"
    },
    {
      "description": "To match a flavor with platform flavor.",
      "name": "FlavorMatch"
    },
    {
      "description": "Client is an AppInst client that called FindCloudlet DME Api.",
      "name": "AppInstClientKey"
    },
    {
      "description": "ExecRequest is a common struct for enabling a connection to execute some work on a container.",
      "name": "ExecRequest"
    },
    {
      "description": "Collection of statistics related to Client/App/Cluster.",
      "name": "DeveloperMetrics"
    },
    {
      "description": "Collection of statistics related to Cloudlet.",
      "name": "OperatorMetrics"
    },
    {
      "description": "Collection of event/audit logs from edge services.",
      "name": "Events"
    },
    {
      "description": "Usage details of App/Cluster.",
      "name": "DeveloperUsage"
    },
    {
      "description": "Usage details of Cloudlet.",
      "name": "OperatorUsage"
    },
    {
      "description": "Manage receiver for alerts from edge services.",
      "name": "AlertReceiver"
    },
    {
      "description": "Manage additional networks which can be added to Cluster Instances.",
      "name": "Network"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Auth \u0026 User Management API",
      "tags": [
        "Security",
        "User",
        "Role",
        "Organization"
      ]
    },
    {
      "name": "Operator API",
      "tags": [
        "Cloudlet",
        "OperatorCode",
        "Flavor",
        "CloudletProps",
        "CloudletResMap",
        "FlavorMatch",
        "CloudletPool",
        "CloudletPoolMember",
        "VMPool",
        "VMPoolMember",
        "OperatorMetrics",
        "Events",
        "OperatorUsage",
        "AlertReceiver",
        "Network"
      ]
    },
    {
      "name": "Developer API",
      "tags": [
        "ClusterInst",
        "App",
        "AppInst",
        "AutoProvPolicy",
        "AppAutoProvPolicy",
        "AutoScalePolicy",
        "PrivacyPolicy",
        "AutoProvPolicyCloudlet",
        "AppInstClientKey",
        "ExecRequest",
        "DeveloperMetrics",
        "Events",
        "DeveloperUsage",
        "AlertReceiver"
      ]
    }
  ]
}